[
  {
    "objectID": "viz/total_hourly_rides_vs_temp_2_total_subs_cust.html",
    "href": "viz/total_hourly_rides_vs_temp_2_total_subs_cust.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Total Hourly Rides vs Temperature by User Type (2°C Buckets)\n\n  \n\nTotal hourly rides by temperature bucket (2°C), separated by user type. Subscriber activity peaks more sharply in moderate to warm temperatures, while Customer rides increase more steadily with temperature. Data aggregated across all non-loop rides.\n\n\n\nOverview\nThis chart shows how total rides vary with temperature, split between Subscribers and Customers. Ride counts are aggregated by temperature buckets, offering a side-by-side view of weather sensitivity by user group.\n\n\nChart Details\n\nX-Axis: Temperature in degrees Celsius, grouped into 2°C buckets.\nY-Axis: Total number of rides aggregated per hourly bin across the dataset.\nLines:\n\nSubscribers: Typically exhibit a sharper peak in moderate temperature ranges.\nCustomers: Show a more gradual increase in ride volume as temperatures rise.\n\n\n\n\nPurpose\nThe visualization helps compare how different user types respond to temperature changes. It reveals behavioral distinctions between Subscribers and Customers.\n\n\nObservations\n\nSubscribers:\n\nLow ride volume below 10°C.\nSharp peak near 25°C, suggesting strong commuting patterns tied to comfort.\nRapid decline above 30°C, possibly due to heat discomfort.\n\nCustomers:\n\nMore gradual increase in ride volume with rising temperatures.\nPeak also around 25–30°C, but less steep rise and fall.\nGreater relative tolerance for warmer temperatures.\n\n\n\n\nInterpretation\n\nSubscriber behavior is more concentrated and sensitive to moderate temperatures, likely tied to commuting habits.\nCustomer rides are more distributed across a range of temperatures, aligning with recreational or discretionary use.\nThe divergence in curve shapes supports the hypothesis of different underlying motivations between user groups.\n\n\n\nTechnical Notes\n\nTemperatures are binned into 2°C increments based on conditions at the start of each ride.\nRides were grouped and summed by user type for each temperature bin, then aggregated hourly."
  },
  {
    "objectID": "viz/average_hourly_rides_vs_temp_2_bucket_smooth.html",
    "href": "viz/average_hourly_rides_vs_temp_2_bucket_smooth.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Average Hourly Rides vs Temperature (2° Buckets with Cubic Spline Interpolation)\n\n  \n\nAverage hourly ride volume by temperature (2°C buckets) with cubic spline interpolation to highlight overall trends in ridership as temperatures rise and fall.\n\n\n\nOverview\nThis chart presents the average number of hourly bike rides as a function of temperature (°C). The data is aggregated across all users, without distinguishing between subscriber or casual rider types.\n\n\nChart Details\n\nX-Axis: Temperature in degrees Celsius, ranging from below -10°C to above 35°C.\nY-Axis: Average hourly ride count.\nLine: A single curve showing average ride volume across all users, smoothed with cubic spline interpolation and bucketed by temperature.\n\n\n\nPurpose\nThis visualization illustrates how temperature alone affects overall ridership behavior, independent of time of day, day of week, or rider category.\n\n\nObservations\n\nSub-zero temperatures (&lt; 0°C): Very low ridership, close to zero, as expected.\nGradual increase: Ride volume increases steadily with temperature from around 0°C to the low 20s.\nPeak ridership: Occurs near 25°C, representing the optimal weather for riding.\nDrop-off above 30°C: Suggests decreased willingness to ride in high heat, likely due to discomfort or health concerns.\n\n\n\nInterpretation\n\nThe chart suggests a strong correlation between temperature and total ride volume.\nThe symmetric, bell-shaped curve implies that moderate temperatures are ideal for cycling.\nExtremes on either end (cold or hot) sharply reduce bike usage.\n\n\n\nTechnical Notes\n\nRides were grouped into 2°C increments based on the temperature at ride start times.\nThe “2-bucket” term refers to this binning, which reduces noise by aggregating similar readings.\nThe curve was further smoothed using cubic spline interpolation, creating a continuous line that passes through the averaged data points.\n\n\n\nData Sources\n\nRide Data: Hourly aggregated ride counts from the rides_weather table, binned by temperature.\nWeather Data: Hourly temperature records associated to ride start timestamps.\n\n\n\nSQL Code Used to Generate Data File:\n.headers off          -- we only want raw numbers\n.mode tabs            -- gnuplot likes tab‑ or space‑separated columns\n.output temp_vs_rides.dat\nWITH t AS (\n  SELECT\n    CAST(temp / 2.0 AS INT)*2  AS temp_bin,   -- 2 °C buckets: …, 14, 16, 18 …\n    AVG(rides)                 AS avg_rides\n  FROM rides_weather\n  GROUP BY temp_bin\n  ORDER BY temp_bin\n)\nSELECT temp_bin, avg_rides\nFROM t;\n.output stdout         -- restore console\n\n\nGnuplot Code Used to Generate Chart:\nset title \"Average hourly rides vs. temperature\"\nset xlabel \"Temperature (°C)\"\nset ylabel \"Average rides per hour\"\nset grid\nset key off\n\n\n# smoothed curve (Cubic Spline)\nplot \"temp_vs_rides.dat\" using 1:2 smooth csplines lw 2"
  },
  {
    "objectID": "viz/average_hourly_rides_vs_temp_2_bucket.html",
    "href": "viz/average_hourly_rides_vs_temp_2_bucket.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Average Hourly Rides vs Temperature (2° Buckets)\n\n  \n\nAverage hourly rides by temperature bucket and user type. Both subscribers and customers take more rides as temperatures increase, but customer ride volume rises more sharply in warmer weather, indicating greater temperature sensitivity among casual riders.\n\n\n\nOverview\nThis chart presents the average number of hourly bike rides as a function of temperature (°C). The data is aggregated across all users, without distinguishing between subscriber or casual rider types.\n\n\nChart Details\n\nX-Axis: Temperature in degrees Celsius, ranging from below -10°C to above 35°C.\nY-Axis: Average hourly ride count.\nLine: A single curve showing average ride volume across all users, bucketed by temperature.\n\n\n\nPurpose\nThis visualization is intended to illustrate how temperature alone affects overall ridership behavior, independent of time of day, day of week, or rider category.\n\n\nObservations\n\nSub-zero temperatures (&lt; 0°C): Very low ridership, close to zero, as expected.\nGradual increase: Ride volume increases steadily with temperature from around 0°C to the low 20s.\nPeak ridership: Occurs near 25°C, representing the optimal weather for riding.\nDrop-off above 30°C: Suggests decreased willingness to ride in high heat, likely due to discomfort or health concerns.\n\n\n\nInterpretation\n\nThe chart suggests a strong correlation between temperature and total ride volume.\nThe symmetric, bell-shaped curve implies that moderate temperatures are ideal for cycling.\nExtremes on either end (cold or hot) sharply reduce bike usage.\n\n\n\nTechnical Notes\n\nRides are put into bucked with 2°C increments based on the temperature at ride start times.\nThe “2-bucket” term refers to the fact that the temperatures readings were grouped into bins of 2°C. Binning is a form of data smoothing applied to reduce noise.\n\n.headers off          -- we only want raw numbers\n.mode tabs            -- gnuplot likes tab‑ or space‑separated columns\n.output temp_vs_rides.dat\nWITH t AS (\n  SELECT\n    CAST(temp / 2.0 AS INT)*2  AS temp_bin,   -- 2 °C buckets: …, 14, 16, 18 …\n    AVG(rides)                 AS avg_rides\n  FROM rides_weather\n  GROUP BY temp_bin\n  ORDER BY temp_bin\n)\nSELECT temp_bin, avg_rides\nFROM t;\n.output stdout         -- restore console\n\n\nGnuplot Code Used to Generate Chart:\nset title \"Average hourly rides vs. temperature\"\nset xlabel \"Temperature (°C)\"\nset ylabel \"Average rides per hour\"\nset grid\nset key off\n\n# Simple connected line\nplot \"temp_vs_rides.dat\" using 1:2 with linespoints lw 2 pt 7"
  },
  {
    "objectID": "viz/Top_25_Non-Tourist_Stations_by_Customer_Ride_Count.html",
    "href": "viz/Top_25_Non-Tourist_Stations_by_Customer_Ride_Count.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Top 25 Non-Tourist Stations by Customer Ride Count\n\n  \n\nTop 25 stations (excluding tourist locations) ranked by total customer ride volume. Bars highlight the most frequently used start locations among casual riders.\n\n\n\nOverview\nThis horizontal bar chart displays the 25 non-tourist stations with the highest number of customer rides. Each bar represents a single station, ranked from lowest to highest.\n\n\nChart Details\n\nX-Axis: Station names (rotated vertically by using coord_flip()).\nY-Axis: Number of customer rides originating at each station.\nBars:\n\nColored steel blue.\nSorted so that the most-used stations appear at the top of the chart.\n\n\n\n\nObservations\n\nThe highest-ranking stations have significantly more rides than those near the bottom of the top 25.\nUsage distribution shows a steep drop-off after the first few most popular stations.\nThis pattern suggests localized hubs of casual rider activity outside major tourist zones.\n\n\n\nInterpretation\n\nNon-tourist stations can still accumulate large ride volumes, likely reflecting:\n\nProximity to residential neighborhoods.\nAccess to transit nodes or commercial areas.\nPopularity among local users for short trips and errands.\n\n\n\n\nData Sources\n\nInput Table: Rides table in caseStudy.db.\nFilters Applied:\n\nOnly rides with user_type = 1 (customers).\nStart stations excluding predefined tourist station IDs.\nGrouped and aggregated ride counts by start station.\nJoined with station metadata to retrieve station names.\n\n\n\n\nR Code Used to Generate Chart:\nggplot(top_non_tourist_stations_named, aes(\n   x = reorder(name, customer_ride_count),\n   y = customer_ride_count\n   )) +\n   geom_col(fill = \"steelblue\") +\n   coord_flip() +\n   labs(\n     title = \"Top 25 Non-Tourist Stations by Customer Ride Count\",\n     x = \"Station\",\n     y = \"Customer Rides\"\n) +\ntheme_minimal()"
  },
  {
    "objectID": "viz/Top_20_Most_Asymmetric_Paths.html",
    "href": "viz/Top_20_Most_Asymmetric_Paths.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Top 20 Most Asymmetric Paths\n\n  \n\nTop 20 most asymmetric ride paths by user type. Asymmetry ratio is calculated as the proportion of rides taken in one direction relative to the total rides between two stations. Distinct path preferences emerge between customers and subscribers.\n\n\n\nOverview\nThis side-by-side horizontal bar chart displays the 20 most directionally imbalanced station pairs for each user type: customers and subscribers. These paths have the highest asymmetry ratios, indicating strong one-way usage patterns.\n\n\nChart Details\n\nX-Axis: Asymmetry Ratio (ranging up to ~1.0).\nY-Axis: Station pair labels (listed within each bar).\nPanels:\n\nLeft: Top asymmetric paths for Customers.\nRight: Top asymmetric paths for Subscribers.\n\n\n\n\nObservations\n\nCustomers:\n\nTop asymmetric paths often involve major downtown locations such as Canal St, Clinton St, and Wacker Dr.\nPatterns likely reflect tourism, drop-offs, or infrequent return trips.\n\nSubscribers:\n\nAsymmetries cluster around recreational and waterfront areas such as Columbus Dr, Streeter Dr, Lake Shore Dr, Millennium Park, and McCormick Place.\nPatterns suggest consistent commuting or recreational flows.\n\n\n\n\nInterpretation\n\nAsymmetry Ratio:\n\nDefined as: &gt; rides in one direction / total rides between the two stations.\nValues close to 1.0 mean most trips occur in a single direction.\n\nBehavioral Insight:\n\nCustomer asymmetry is oriented toward downtown ad hoc travel.\nSubscriber asymmetry is more tied to commuting and lakefront destinations.\n\nComparison:\n\nEven when overlapping in geography, the dominant flow directions and endpoints differ between user groups.\n\n\n\n\nUse Case\nThis visualization supports:\n\nIdentifying rebalancing needs.\nTargeting incentive programs to encourage return trips.\nUnderstanding travel patterns for infrastructure planning and operational improvements."
  },
  {
    "objectID": "viz/Ride_Volume_by_Temp_and_Precipitation.html",
    "href": "viz/Ride_Volume_by_Temp_and_Precipitation.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Ride Volume by Temperature and Precipitation\n\n  \n\nRide Volume by Temperature and Rain Condition This panel chart shows total ride volume for subscribers and customers, grouped by dry, wet, and unknown precipitation conditions. Most rides occur in dry weather at temperatures between 20–25°C. Wet conditions significantly suppress ridership for both user types, revealing clear sensitivity to rain.\n\n\n\nOverview\nThis line chart panel shows the total ride volume across 2°C temperature bins, broken down by user type (Customer vs. Subscriber) and grouped by rain condition (Dry, Wet, No data). Each panel represents a different precipitation category, allowing direct comparison of behavior under different weather conditions.\n\n\nChart Structure\n\nX-Axis (Temperature Bin °C):\n\nTemperature ranges from -30°C to +30°C.\nBinned in 2°C increments.\n\nY-Axis (Total Rides):\n\nNumber of rides recorded within each temperature bin.\n\nFacets (Panels):\n\nDry: Rides that occurred with no recorded rain.\nNo data: Weather data was missing.\nWet: Rides that occurred during rain conditions.\n\nLines:\n\nRed: Customer ride volume.\nCyan: Subscriber ride volume.\n\n\n\n\nObservations\n\nDry Conditions\n\nMost ride volume occurs here, peaking between 20–26°C.\nSubscribers consistently log more rides than customers across all temperature bins.\nClear bell-shaped distribution centered around optimal riding weather (20–25°C).\n\n\n\nNo Data\n\nVery little volume, but patterns still mirror the dry curve.\nCould include times where weather data was not collected for some reason (hardware failure, etc) or corrupted weather records.\n\n\n\nWet Conditions\n\nDramatic decrease in ride volume for both user types.\nSubscriber and customer patterns flatten and converge, showing less variance in behavior when it’s raining.\n\n\n\n\nInterpretation\n\nTemperature strongly influences ridership, with optimal weather (20–25°C) showing the highest activity.\nPrecipitation is a major deterrent, suppressing ride volume across all temperatures.\nSubscribers ride more often and in a wider temperature range than customers, especially when conditions are dry.\n\n\n\nUse Case\nThis visualization helps:\n\nQuantify the impact of weather on bike share demand.\nSupport decisions around dynamic pricing, rebalancing, or user alerts based on forecasted weather.\nSegment usage patterns based on environmental conditions, without requiring detailed user data beyond type.\n\n\n\nData Sources\n\nTrip Data: Divvy trip records from:\n\n2013–2019 (S3 archive)\n2023–2025 (City of Chicago Data Portal)\n\nWeather Data: Chicago Midway Airport hourly observations via Meteostat.\n\n\n\nData Preparation\n\nRides aggregated per hour and user type (COUNT(*) AS rides).\nWeather joined on hourly epoch timestamp (start_time / 3600 * 3600).\nTemperature binned using floor(temp / 2) * 2.\nPrecipitation labeled:\n\nDry = 0 mm precipitation.\nWet = &gt;0 mm precipitation.\nNo Data = missing precipitation.\n\nSummed rides per combination of bin, user type, and precipitation label.\n\n\n\nR Code Used to Generate Chart:\ngroup_by(temp_bin, user_type, precip_label) %&gt;%\n     summarise(rides = sum(rides), .groups = \"drop\") %&gt;%\n     ggplot(aes(x = temp_bin, y = rides, color = user_type)) +\n     geom_line(size = 1) +\n     facet_wrap(~ precip_label, nrow = 1) +\n     labs(\n         title = \"Ride Volume by Temperature and Precipitation\",\n         subtitle = \"2°C temperature bins grouped by rain condition\",\n         x = \"Temperature Bin (°C)\",\n         y = \"Total Rides\",\n         color = \"User Type\"\n     ) +\n     scale_x_continuous(breaks = seq(-30, 40, by = 10)) +\n     theme_minimal(base_size = 14)"
  },
  {
    "objectID": "viz/Ride_Duration_by_User_Type_box.html",
    "href": "viz/Ride_Duration_by_User_Type_box.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Ride Duration by User Type ( box plot )\n\n  \n\nBox plot of ride durations by user type. Subscribers have shorter, more consistent trips, while customers exhibit longer and more variable ride times.\n\n\n\nOverview\nThis box plot compares the distribution of ride durations between subscribers and customers, emphasizing differences in median, spread, and outliers.\n\n\nChart Details\n\nX-Axis: User Type (Subscriber, Customer).\nY-Axis: Ride Duration in Minutes (0–200 min).\nBoxes:\n\nShow interquartile range (25th–75th percentile).\nCentral line indicates the median ride duration.\n\nWhiskers and Outliers:\n\nWhiskers extend to ~1.5× interquartile range (IQR).\nOutliers plotted with low opacity for clarity.\n\n\n\n\nObservations\n\nSubscribers:\n\nMedian ride duration is substantially lower.\nTight interquartile range, indicating consistent short trips.\nFewer extreme outliers.\n\nCustomers:\n\nHigher median ride duration.\nWide interquartile range, reflecting greater variability.\nSubstantial number of longer-duration outliers.\n\n\n\n\nInterpretation\nThe data reinforces prior findings that:\n\nSubscribers ride mainly for commuting or quick tasks, resulting in shorter, predictable durations.\nCustomers tend to use bikes more recreationally, leading to longer, less consistent trips.\n\n\n\nData Sources\n\nTrip Data: Divvy rides from:\n\n2013–2019 (S3 archive)\n2023–2025 (City of Chicago Data Portal)\n\n\n\nData Preparation\nSQL Query Used to Retrieve Data:\n# Connect to the SQLite database\ncon &lt;- dbConnect(RSQLite::SQLite(), \"caseStudy.db\")\n\n# Pull ride durations for valid subscriber/customer rides under 60 min\nride_durations &lt;- dbGetQuery(con, \"\n  SELECT\n    CASE user_type\n      WHEN 0 THEN 'subscriber'\n      WHEN 1 THEN 'customer'\n    END AS user_type,\n    (end_time - start_time) / 60.0 AS duration_min\n  FROM rides\n  WHERE user_type IN (0, 1)\n    AND end_time &gt; start_time\n    AND (end_time - start_time) &lt; 12000\n\")\n\n# Disconnect\n dbDisconnect(con)\n\n\nR Code Used to Generate Chart:\nggplot(ride_durations, aes(x = user_type, y = duration_min, fill = user_type)) +\n     geom_boxplot(outlier.alpha = 0.1) +\n     labs(title = \"Ride Duration by User Type\", x = \"\", y = \"Duration (minutes)\") +\n     scale_fill_manual(values = c(\"subscriber\" = \"#1f77b4\", \"customer\" = \"#ff7f0e\")) +\n     theme_minimal()"
  },
  {
    "objectID": "viz/Ride_Duration_Density.html",
    "href": "viz/Ride_Duration_Density.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Ride Duration Density\n\n  \n\nDensity plot of ride durations by user type. Subscribers tend to take shorter trips, while customers have more varied and longer rides.\n\n\n\nOverview\nThis density plot visualizes the distribution of ride durations for customers and subscribers, providing a smoothed alternative to histograms for easier comparison of patterns.\n\n\nChart Details\n\nX-Axis: Ride duration in minutes (0–60 min).\nY-Axis: Density estimate of ride frequency.\nLines/Areas:\n\nBlue (Subscribers): High, narrow peak at short durations.\nOrange (Customers): Flatter, broader distribution extending to longer rides.\n\nSmoothing: Kernel density estimation applied with default bandwidth.\n\n\n\nObservations\n\nSubscribers:\n\nStrong peak centered around ~10–15 minutes.\nRapid decline beyond ~20 minutes.\nIndicates trips optimized for commuting or quick errands.\n\nCustomers:\n\nLess pronounced peak.\nLong tail extending to ~60 minutes.\nReflects more recreational or exploratory rides.\n\n\n\n\nInterpretation\nThe contrasting shapes highlight different usage patterns:\n\nSubscribers prioritize efficiency and short trips, likely influenced by pricing incentives and commute needs.\nCustomers are more likely to take longer rides with varied trip purposes.\n\n\n\nData Sources\n\nTrip Data: Divvy ride records from:\n\n2013–2019 (S3 archive)\n2023–2025 (City of Chicago Data Portal)\n\n\n\n\nData Preparation\n\nSelected rides where:\n\nuser_type is 0 (subscriber) or 1 (customer).\nend_time &gt; start_time.\nDuration &lt; 200 minutes.\n\nDuration computed as (end_time - start_time) / 60.\nNo filtering by station type.\n\n\nR Code Used to Generate Chart:\nggplot(ride_durations, aes(x = duration_min, color = user_type, fill = user_type)) +\n     geom_density(alpha = 0.3) +\n     labs(title = \"Ride Duration Density\", x = \"Duration (minutes)\", y = \"Density\") +\n     scale_color_manual(values = c(\"subscriber\" = \"#1f77b4\", \"customer\" = \"#ff7f0e\")) +\n     scale_fill_manual(values = c(\"subscriber\" = \"#1f77b4\", \"customer\" = \"#ff7f0e\")) +\n     theme_minimal()"
  },
  {
    "objectID": "viz/Non-Tourist_Proportion_of_Daily_Rides_by_Hour_and_Day_Type.html",
    "href": "viz/Non-Tourist_Proportion_of_Daily_Rides_by_Hour_and_Day_Type.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Non-Tourist Proportion of Daily Rides by Hour and Day Type\n\n  \n\nProportion of daily non-tourist rides by hour of day and day type (weekday vs. weekend). Weekdays show a clear peak in the late afternoon commute hours, while weekends have a more uniform midday distribution.\n\n\n\nOverview\nThis heatmap shows the hourly share of total daily rides for non-tourist customer rides, split by day type (Weekday vs. Weekend). Darker colors indicate higher proportions of each day’s total rides occurring in that hour.\n\n\nChart Details\n\nX-Axis (Hour of Day):\n\nRanges from 0 to 23.\nRepresents the ride start hour in local time.\n\nY-Axis (Day Type):\n\nTwo categories: Weekday and Weekend.\n\nFill Color (Proportion):\n\nGradient from white (low) to dark orange (high).\nIndicates the fraction of the day’s total rides occurring in each hour.\n\n\n\n\nObservations\n\nWeekdays:\n\nClear late afternoon peak around 17:00–18:00, consistent with evening commute patterns.\nLower activity in early morning and late evening.\n\nWeekends:\n\nMore even distribution across 10:00–16:00, suggesting recreational or discretionary use.\nNo strong commute-style spike.\n\n\n\n\nInterpretation\n\nThe contrast between weekday and weekend timing supports the hypothesis that weekday rides are more likely commuting or errands, while weekend rides are more leisurely.\nOperators could align staffing, bike redistribution, or promotions to these temporal patterns.\n\n\n\nUse Case\nThis chart can help\n\nModel hourly demand by day type.\nOptimize fleet distribution and availability during peak periods.\nInform marketing or pricing strategies aligned to usage timing.\n\n\n\nData Sources\n\nRide Records: Filtered for non-tourist customer rides (excluding stations flagged as tourist destinations).\nDerived Columns: Hour extracted from local start time; day type assigned as Weekday or Weekend.\nAggregation: Hourly counts normalized to proportions of each day’s total rides.\n\n\nR Code Used to Generate the Chart:\nggplot(ride_props, aes(x = hour, y = week_part, fill = prop)) +\n  geom_tile() +\n  scale_fill_gradient(low = \"white\", high = \"darkorange\") +\n  labs(\n    title = \"Non-Tourist Proportion of Daily Rides by Hour and Day Type\",\n    x = \"Hour of Day\",\n    y = \"Day Type\",\n    fill = \"Ride Proportion\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "viz/Non-Tourist_Hourly_Ride_Patterns_by_Season_and_Day_type.html",
    "href": "viz/Non-Tourist_Hourly_Ride_Patterns_by_Season_and_Day_type.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Hourly Ride Patterns by Season and Day Type (Non-Tourist Stations)\n\n  \n\nHourly ride counts at non-tourist stations, grouped by season and separated by weekday versus weekend, illustrating clear seasonal and temporal ridership patterns.\n\n\n\nOverview\nThis multi-panel grouped bar chart compares hourly ride activity across the four seasons, separated into weekday and weekend usage, restricted to non-tourist stations. It provides a clear view of how both time of day and seasonality influence ridership behavior among casual users.\n\n\nChart Details\n\nX-Axis: Hour of Day (0–23 in 24-hour format).\nY-Axis: Number of Rides.\nBars:\n\nDark Blue: Weekday rides.\nDark Orange: Weekend rides.\n\nFacets:\n\nOne panel per season: Fall, Spring, Summer, and Winter.\n\nPosition: Bars are grouped side by side within each hour for comparison.\n\n\n\nPurpose\nThe visualization aims to:\n\nQuantify the impact of seasonal changes on ridership volume.\nIdentify daily commute-like patterns even among non-subscribers.\nHighlight how weekends differ from weekdays in temporal distribution.\n\n\n\nObservations\n\nSummer and Fall:\n\nPronounced weekday peaks around 17:00, likely related to commuting or end-of-day activities.\nWeekend ridership is elevated but spread more evenly across midday hours.\n\nSpring:\n\nSimilar but slightly lower weekday afternoon peaks.\n\nWinter:\n\nOverall volume sharply reduced.\nFlatter distribution throughout the day with only a mild afternoon increase on weekdays.\n\n\n\n\nInterpretation\n\nStrong weekday afternoon peaks in warm months support the idea of commuting or routine trips by casual riders.\nWeekend rides remain relatively stable across seasons, indicating recreation and errands.\nWinter conditions significantly suppress all ride activity.\n\n\n\nTechnical Notes\n\nAll rides are filtered to exclude tourist stations.\nOnly rides by customer (non-subscriber) users are included.\nLocal Chicago time used for hourly binning.\nSeason assigned based on ride start date.\n\n\n\nData & Methods\n\nData source:\n\nnon_tourist_customer_rides_df\n\nFiltered for user_type = 1.\nFiltered to non-tourist station IDs.\n\n\n\n\nR Code Used to Generate the Chart:\nggplot(rides_by_hour_season, aes(x = hour, y = ride_count, fill = week_part)) +\n  geom_col(position = \"dodge\") +\n  facet_wrap(~season, ncol = 2) +\n  scale_x_continuous(breaks = 0:23) +\n  scale_fill_manual(values = c(\"Weekday\" = \"darkblue\", \"Weekend\" = \"darkorange\")) +\n  labs(\n    title = \"Hourly Ride Patterns by Season and Day Type (Non-Tourist Stations)\",\n    x = \"Hour of Day\",\n    y = \"Number of Rides\",\n    fill = \"Day Type\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "viz/Non-Tourist_Customer_Rides_by_Month.html",
    "href": "viz/Non-Tourist_Customer_Rides_by_Month.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Non-Tourist Customer Rides by Month\n\n  \n\nMonthly distribution of customer rides at non-tourist stations, illustrating clear seasonality in usage patterns.\n\n\n\nOverview\nThis bar chart displays the total number of rides initiated by customers (non-subscribers) at non-tourist stations, aggregated by calendar month. It shows clear seasonal patterns in ridership.\n\n\nChart Details\n\nX-Axis: Month (1 = January, 12 = December).\nY-Axis: Total ride count for each month.\nBars: Orange fill indicates the count of rides starting in each month.\n\n\n\nPurpose\nThis visualization is intended to illustrate seasonal variation in usage, excluding tourist-heavy locations to focus on local customer ridership.\n\n\nObservations\n\nWinter (Dec–Feb): Lowest ridership, likely due to cold weather.\nSpring (Mar–May): Steady increase as temperatures rise.\nSummer Peak (June–August): Highest ridership, peaking in July.\nFall Decline (Sept–Nov): Gradual reduction in usage as temperatures cool.\n\n\n\nInterpretation\n\nThe clear summer peak suggests that casual riders strongly prefer warm-weather months.\nThe exclusion of tourist stations reinforces that these are local usage patterns, not driven primarily by visitors.\nWinter ridership does not drop to zero, indicating some year-round demand.\n\n\n\nData & Methods\n\nData Source:\n\nnon_tourist_customer_rides_df\nFiltered to include:\n\nuser_type == “customer”\nstart_station_id in the non-tourist station list\n\n\n\n\nR Code Used to Generate Chart:\nggplot(non_tourist_customer_rides_df, aes(x = month)) +\n     geom_bar(fill = \"darkorange\") +\n     labs(\n         title = \"Non-Tourist Customer Rides by Month\",\n         x = \"Month\",\n         y = \"Number of Rides\"\n     ) +\n     theme_minimal()"
  },
  {
    "objectID": "viz/Non-Tourist_Customer_Rides_by_Hour_Weekday_vs_Weekend.html",
    "href": "viz/Non-Tourist_Customer_Rides_by_Hour_Weekday_vs_Weekend.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Customer Rides by Hour: Weekday vs Weekend (Non-Tourist Stations)\n\n  \n\nHourly comparison of customer rides by day type (weekday vs weekend) at non-tourist stations, highlighting differences in temporal riding behavior.\n\n\n\nOverview\nThis grouped bar chart compares customer ride activity across hours of the day, split by weekday and weekend, limited to non-tourist stations. It highlights behavioral shifts in usage patterns between workdays and leisure days.\n\n\nChart Details\n\nX-Axis: Hour of day (0–23 in 24-hour format).\nY-Axis: Number of rides initiated during that hour.\nBars:\n\nBlue: Weekday ride counts.\nOrange: Weekend ride counts.\n\nBars are grouped by hour to allow direct visual comparison between the two day types.\n\n\n\nPurpose\nThis visualization is designed to isolate potential commuting or habitual usage patterns by removing the influence of tourist-heavy areas and separating ride behavior by the type of day.\n\n\nObservations\n\nWeekday Trends:\n\nStrong late afternoon peak at 17:00 (5 PM) suggests post-work or school riding.\nModerate increase starting around 7–8 AM, possibly indicating morning commutes.\nSubdued activity in the early morning and late evening.\n\nWeekend Trends:\n\nMore even distribution throughout the midday and early afternoon.\nNo sharp peak, but elevated ridership between 10:00 and 16:00.\nMorning and evening ride counts are lower than weekday equivalents.\n\n\n\n\nInterpretation\n\nThe sharp peak at 5 PM on weekdays strongly suggests commuter behavior, even among casual (non-subscriber) users.\nThe flatter weekend profile indicates a more recreational or errand-driven pattern, with rides spread across daylight hours.\nFiltering out tourist stations helps reinforce the interpretation that these behaviors stem from local usage, not tourism.\n\n\n\nTechnical Notes\n\nRide records are filtered to include only those starting at non-tourist stations.\nUsers included are labeled as Customers (i.e., non-subscribers).\n“Weekday” includes Monday through Friday; “Weekend” includes Saturday and Sunday.\nTime is derived from the local timestamp of the ride start.\n\n\n\nData & Methods\n\nData Sources\n\nData Frame: rides_by_hour_weekpart\n\nFilters Applied:\n\nOnly customer rides (casual users)\nRides originating from non-tourist stations\nGrouped by hour of day and week_part (Weekday vs Weekend)\n\n\n\n\n\nR Code Used to Generate Chart:\nggplot(rides_by_hour_weekpart, aes(x = hour, y = ride_count, fill = week_part)) +\ngeom_col(position = \"dodge\") +\nlabs(\ntitle = \"Customer Rides by Hour: Weekday vs Weekend (Non-Tourist Stations)\",\nx = \"Hour of Day\",\ny = \"Number of Rides\",\nfill = \"Day Type\"\n) +\nscale_x_continuous(breaks = 0:23) +\nscale_fill_manual(values = c(\"Weekday\" = \"darkblue\", \"Weekend\" = \"darkorange\")) +\ntheme_minimal()"
  },
  {
    "objectID": "viz/Non-Tourist_Customer_Ride_by_Hour_Faceted_by_Season.html",
    "href": "viz/Non-Tourist_Customer_Ride_by_Hour_Faceted_by_Season.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Customer Rides by Hour, Faceted by Season (Non-Tourist Stations)\n\n  \n\nHourly customer ride patterns by season at non-tourist stations. Weekday rides peak strongly in the late afternoon during warmer seasons, while weekend rides are more evenly distributed. Winter shows the lowest activity overall.\n\n\n\nOverview\nThis faceted line chart visualizes customer rides over the hours of the day, separated by season and by weekday/weekend. It highlights how ridership patterns shift throughout the year.\n\n\nChart Details\n\nX-Axis: Hour of Day (0–23)\nY-Axis: Ride Count\nFacets: One panel per season (Spring, Summer, Fall, Winter)\nLine Colors:\n\nBlue: Weekday\nOrange: Weekend\n\n\n\n\nPurpose\nTo illustrate how both time of day and seasonality affect customer ride behavior when excluding tourist-heavy stations.\n\n\nObservations\n\nSpring: Moderate volume, clear late afternoon weekday peak\nSummer: Highest usage, pronounced 17:00 weekday peak\nFall: Similar shape to Spring, slightly lower counts\nWinter: Flat distribution, significantly reduced activity\n\n\n\nInterpretation\n\nCommuting Behavior: Strong summer/fall weekday peaks around 17:00 suggest commuter-driven use, especially among customers using the system for one-way travel from work or transit.\nRecreation and Errands: Weekend rides are more spread throughout midday.\nSeasonal Sensitivity: Weekend ride patterns are flatter across the day and more seasonally stable, while weekday patterns show strong seasonal variation.\nCold Weather Impact: Ridership drops sharply in winter across all times of day.\n\n\n\nTechnical Notes\n\nTimestamps were converted to local Chicago time.\nDay-of-week was used to classify rides into “Weekday” vs “Weekend”.\nSeasonal classification was derived from ride start dates.\nAll rides were filtered to exclude tourist station IDs before analysis.\n\n\n\nData & Methods\nData Source\nData Frame: rides_by_hour_season\nThis dataframe includes:\n\nFiltered out tourist stations\nFiltered to customer rides\nDerived season from start timestamp\nDerived week_part from day of week\nAggregated ride counts by hour, season, and day type\n\nR Code Used to Generate the Chart:\nggplot(rides_by_hour_season, aes(x = hour, y = ride_count, color = week_part)) +\n  geom_line(size = 1.1) +\n  facet_wrap(~season, ncol = 2) +\n  scale_x_continuous(breaks = 0:23) +\n  scale_color_manual(values = c(\"Weekday\" = \"darkblue\", \"Weekend\" = \"darkorange\")) +\n  labs(\n    title = \"Customer Rides by Hour, Faceted by Season (Non-Tourist Stations)\",\n    x = \"Hour of Day\",\n    y = \"Ride Count\",\n    color = \"Day Type\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "viz/Non-Tourist_Customer_Ride_Duration_for_Loop_Rides.html",
    "href": "viz/Non-Tourist_Customer_Ride_Duration_for_Loop_Rides.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Non-Tourist Customer Ride Duration for Loop Rides\n\n  \n\nRide duration density for non-tourist loop rides taken by customers. The strong concentration of short rides suggests quick, casual trips returning to the same station.\n\n\n\nOverview\nThis density plot shows the distribution of ride lengths (in minutes) for customer rides that start and end at the same station. Known as loop rides. Also trips involving tourist stations are excluded.\n\n\nChart Details\n\nX-Axis: Ride Length (minutes), ranging from 0 to 150.\nY-Axis: Density (area under curve sums to 1).\nFill Color: Orange shading under the curve.\n\n\n\nObservations\n\nClear peak between 3–7 minutes, indicating many short loop trips.\nSteady decline in frequency as ride durations increase.\nVery long rides (over ~60 minutes) are rare but do exist.\n\n\n\nInterpretation\n\nThe strong skew toward short rides reinforces the idea that many loop trips are quick, casual uses, possibly for errands or brief leisure.\nThe lack of a secondary peak suggests there is not a distinct long-ride group among non-tourist customers.\n\n\n\nTechnical Notes\n\nThis subset was filtered to include only loop rides (start_station_id == end_station_id) and to exclude known tourist stations.\nDurations are calculated as ride end time minus start time, expressed in minutes.\nSmoothed density estimation was applied rather than a histogram.\n\n\n\nR Code Used to Generate the Chart\nUnfortunately, the exact R code could not be recovered.\nHowever, it likely resembled:\nggplot(loop_rides_non_tourist_df, aes(x = ride_length_min)) +\n  geom_density(fill = \"orange\", alpha = 0.6) +\n  labs(\n    title = \"Non-Tourist Customer Ride Duration for Loop Rides\",\n    x = \"Ride Length (minutes)\",\n    y = \"Density\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "viz/Non-Tourist_Customer_Ride_Duration_Distribution.html",
    "href": "viz/Non-Tourist_Customer_Ride_Duration_Distribution.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Non-Tourist Customer Ride Duration Distribution\n\n  \n\nDistribution of ride durations for non-tourist customer trips. The histogram shows that the vast majority of trips are short in duration, tapering off beyond 20 minutes.\n\n\n\nOverview\nThis histogram depicts the distribution of ride durations (in minutes) for casual rides that start and end outside tourist areas. Each bar represents the count of trips falling within a 5-minute interval.\n\n\nChart Details\n\nX-Axis: Ride Length (minutes), binned in 5-minute increments.\nY-Axis: Number of rides in each duration bin.\nBars: Filled in dark orange with white borders for clarity.\n\n\n\nObservations\n\nThe distribution is heavily right-skewed, with most rides lasting under ~15–20 minutes.\nA clear peak appears in the 0–5 minute bin, highlighting frequent short trips.\nFrequency decreases rapidly as duration increases.\nOccasional longer trips are visible in the long tail.\n\n\n\nInterpretation\n\nCasual riders overwhelmingly use the system for short trips.\nThe lack of secondary peaks suggests uniform trip purposes, likely errands or last-mile transport.\nLonger rides may reflect recreational or exploratory use, but they are relatively rare.\n\n\n\nUse Case\nThis chart is helpful for:\n\nInforming policies about time-based pricing tiers.\nUnderstanding baseline trip durations among casual riders.\nSupporting planning of rebalancing or maintenance cycles.\n\n\n\nTechnical Notes\n\nData Filtering:\n\nIncludes only customer rides.\nExcludes tourist station trips.\n\nRide Length Calculation:\n\n(end_time - start_time) / 60.\n\nBin Width:\n\n5 minutes.\n\n\n\n\nData Sources\n\nData Frame: non_tourist_customer_rides_df\n\nFiltered from the rides table by user type and station criteria.\n\n\n\n\nR Code Used to Generate the Chart:\nggplot(non_tourist_customer_rides_df, aes(x = ride_length_min)) +\n  geom_histogram(binwidth = 5, fill = \"darkorange\", color = \"white\") +\n  labs(\n    title = \"Non-Tourist Customer Ride Duration Distribution\",\n    x = \"Ride Length (minutes)\",\n    y = \"Number of Rides\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "viz/Non-Tourist_Customer_Ride_Count_by_Distance.html",
    "href": "viz/Non-Tourist_Customer_Ride_Count_by_Distance.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Non-Tourist Customer Ride Count by Distance\n\n  \n\nRide count by station-to-station distance for non-tourist customer trips, highlighting common trip lengths in the 0–2 km range.\n\n\n\nOverview\nThis bar chart shows the number of non-tourist customer rides grouped by the straight-line distance between the starting and ending stations. The visualization makes clear which distance ranges are most commonly traveled.\n\n\nChart Details\n\nX-Axis: Distance between stations (km), from 0 to 10 km.\nY-Axis: Number of rides in each distance bin (up to ~60,000 rides).\nBars:\n\nFilled in dark orange.\nLabeled at notable peaks for emphasis.\n\n\n\n\nObservations\n\nPrimary Peaks:\n\n~0.85 km: 58,268 rides.\n~1.35 km: 54,563 rides.\n\nSharp drop-off beyond 2 km, with very few rides exceeding 5 km.\nThe shape strongly suggests most casual rides occur within a short radius.\n\n\n\nInterpretation\n\nShort trips dominate non-subscriber usage, likely reflecting quick local errands or last-mile transit.\nPeaks may correspond to popular station pairs located 3–8 blocks apart.\nThe pattern mirrors the density distribution of unique station-to-station distances, but here each ride contributes equally to counts.\n\n\n\nData Sources\n\nRide Records: Non-subscriber rides starting after 2023-01-01.\nFilters Applied:\n\nExcluded loop rides (start station = end station).\nLimited to non-tourist stations.\nCalculated distance using Haversine formula between station coordinates.\nIncluded only trips with distances ≤10 km.\n\n\n\nR Code Used to Generate Chart:\n# Bin and count rides by distance\nride_counts_by_distance &lt;- non_loop_rides_df %&gt;%\n  filter(distance_km &lt;= 10) %&gt;%\n  mutate(distance_bin = round(distance_km / 0.1) * 0.1) %&gt;%\n  count(distance_bin)\n\n# Plot\nggplot(ride_counts_by_distance, aes(x = distance_bin, y = n)) +\n  geom_col(fill = \"darkorange\", width = 0.08) +\n  geom_text(\n    data = filter(ride_counts_by_distance, distance_bin %in% c(0.85, 1.35)),\n    aes(label = paste0(\"Peak: \", distance_bin, \" km\\n\", scales::comma(n))),\n    vjust = -0.5,\n    size = 3.5\n  ) +\n  labs(\n    title = \"Non-Tourist Customer Ride Count by Station-to-Station Distance\",\n    x = \"Distance Between Stations (km)\",\n    y = \"Number of Rides\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "viz/Non-Tourist_Customer_Distribution_of_Station-to-Station_Distance.html",
    "href": "viz/Non-Tourist_Customer_Distribution_of_Station-to-Station_Distance.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Non-Tourist Customer Distribution of Station-to-Station Distances\n\n  \n\nDensity plot of station-to-station distances for non-tourist customer rides. Distinct peaks highlight preferred trip lengths and usage patterns.\n\n\n\nOverview\nThis density plot shows the distribution of ride distances (in kilometers) for non-tourist customer rides where the start and end stations differ (i.e., excluding loops). Labeled peaks call attention to common trip lengths.\n\n\nChart Details\n\nX-Axis: Distance between stations (km).\nY-Axis: Density (normalized proportion of rides).\nElements:\n\nOrange Curve: Smoothed density estimate of all rides.\nGray Points: Locations of top peaks.\nText Labels: Distance of each peak (e.g., “1.25 km”).\n\n\n\n\nObservations\n\nA pronounced peak around 1.2–1.5 km, suggesting many trips are short.\nSecondary peaks near 2.5 km and 3.5 km may reflect popular commuting corridors.\nThe distribution tapers gradually beyond 5 km, indicating longer rides are less frequent but still occur.\n\n\n\nInterpretation\n\nThe strong concentration in the 1–2 km range likely reflects neighborhood trips, errands, and short connections.\nThe presence of distinct peaks at larger distances suggests repeated use of certain longer routes.\nPlanners could use this to identify popular station pairs and inform station placement or rebalancing strategies.\n\n\n\nData Sources\n\nRide Data: Rides starting in 2023 or later, from stations not classified as tourist locations.\nStation Locations: Latitude and longitude of all active stations, joined to ride records for distance calculation.\n\n\n\nData Preparation\n\nRides filtered to:\n\nUser Type: Customer.\nStart ≠ End Station.\n\nDistances calculated using the Haversine formula (geosphere::distHaversine).\nDensity estimated with geom_density().\n\n\n\nR Code Used to Generate Chart:\nggplot(non_loop_rides_df, aes(x = distance_km)) +\n  geom_density(fill = \"darkorange\", alpha = 0.5) +\n  geom_point(data = top_peaks, aes(x = x, y = y), color = \"gray\", size = 2) +\n  geom_text(\n    data = top_peaks,\n    aes(\n      x = x,\n      y = y,\n      label = paste0(\" \", round(x, 2), \" km\")\n    ),\n    angle = 25,\n    vjust = 0,\n    hjust = 0,\n    size = 3.5,\n    color = \"black\"\n  ) +\n  labs(\n    title = \"Non-Tourist Customer Distribution of Station-to-Station Distances\",\n    x = \"Distance Between Stations (km)\",\n    y = \"Density\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 1)\n  )\n\n\nR Code Used to Generate Chart:\nggplot(non_loop_rides_df, aes(x = distance_km)) +\n  geom_density(fill = \"darkorange\", alpha = 0.5) +\n  geom_point(data = top_peaks, aes(x = x, y = y), color = \"gray\", size = 2) +\n  geom_text(\n    data = top_peaks, aes(x = x, y = y, label = paste0(\" \", round(x, 2), \" km\")),\n    angle = 25, vjust = 0, hjust = 0, size = 3.5, color = \"black\"\n  ) +\n  labs(\n    title = \"Non-Tourist Customer Distribution of Station-to-Station Distances\",\n    x = \"Distance Between Stations (km)\",\n    y = \"Density\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 1)\n  )"
  },
  {
    "objectID": "viz/Non-Tourist_Customer_Distribution_Station_to_Station_Distance.html",
    "href": "viz/Non-Tourist_Customer_Distribution_Station_to_Station_Distance.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Station-to-Station Distance Distribution (Non-Tourist Customers)\n\n  \n\nDistribution of station-to-station distances for non-tourist customer rides. Most trips are under 5 km, confirming primarily short-distance usage.\n\n\n\nOverview\nThis density plot visualizes the distribution of station-to-station distances for rides taken by customer (non-subscriber) riders that do not involve tourist stations. The x-axis represents the distance in kilometers, and the y-axis shows the relative density of rides occurring at each distance.\n\n\nChart Details\n\nX-Axis: Distance Between Stations (km), ranging from 0 to ~30 km\n\nY-Axis: Relative probability density of rides at each distance\n\nPlot Style: Smoothed density plot (not a histogram), area under the curve normalized to 1\n\n\n\nPurpose\nThis chart highlights the typical distance casual riders travel between stations when tourist hotspots are excluded, revealing patterns in local, everyday bike-share use.\n\n\nObservations\n\nPeak around 1 km: Most rides are short hops between closely spaced stations.\nSteep decline: Density drops quickly after ~5 km.\nLong tail: A small number of rides extend past 10 km.\nVery few extreme values: Rides over 20 km are rare outliers.\n\n\n\nInterpretation\n\nThe pronounced twin peaks around 1 km suggests short-distance, utility-oriented trips, like errands or first-/last-mile commuting.\nThe long but thin tail implies that while occasional longer rides occur, they are uncommon among non-tourist customer riders.\nThe lack of a multiple wide spaced peaks differentiates this distribution from tourist-heavy patterns, which often show multiple modes due to popular routes.\n\n\n\nTechnical Notes\n\nDistance Calculation: Great-circle distance (Haversine formula) computed between station coordinates.\nFiltering: Tourist stations excluded via station ID filtering.\nDensity Scaling: The y-axis shows density, not raw counts. The area under the curve sums to 1.\n\n\n\nR Code Used to Generate Chart:\nggplot(non_loop_rides_df, aes(x = distance_km)) +\n  geom_density(fill = \"darkorange\", alpha = 0.6) +\n  labs(\n    title = \"Non-Tourist Customer Distribution of Station-to-Station Distances\",\n    x = \"Distance Between Stations (km)\",\n    y = \"Density\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "viz/Hourly_Ride_Volume_vs_Temperature.html",
    "href": "viz/Hourly_Ride_Volume_vs_Temperature.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Hourly Ride Volume vs Temperature\n\n  \n\nLOESS-smoothed hourly ride volume as a function of temperature, comparing customers and subscribers. Patterns remain elevated at higher temperatures due to the smoothing method.\n\n\n\nOverview\nLOESS-smoothed hourly ride volume as a function of temperature, comparing customers and subscribers. Patterns remain elevated at higher temperatures due to the smoothing method.\n\nX-Axis: Air temperature in °C.\nY-Axis: Number of rides per hour.\nLines: LOESS smooth for each user type.\n\nBlue: Subscribers.\nRed: Customers.\n\n\n\n\nObservations\n\nRide counts rise with temperature from below 0°C through the 20s.\nUnlike binned histograms, no clear decline is visible above ~30°C.\nCustomer volume grows faster with temperature than subscriber volume.\n\n\n\nInterpretation\nThe continuous LOESS smoothing aggregates all hours (including some without rides), potentially obscuring the decline at extreme temperatures seen in binned charts. This chart reflects the overall association between hourly temperatures and ridership, rather than the distribution of rides alone.\n\n\nData Sources\n\nTrip Data: Divvy trip records from:\n\n2013–2019 (S3 archive)\n2023–2025 (City of Chicago Data Portal)\n\nWeather Data: Chicago Midway Airport hourly observations via Meteostat.\n\n\n\nData Preparation\n\nRides aggregated per hour and user type (COUNT(*) AS rides).\nWeather joined on hourly epoch timestamp (start_time / 3600 * 3600).\nNo filter applied to exclude zero-ride hours (i.e., hours with no rides are included as 0).\nUsed as input to (../glossary.qmd#glossary-LOESS) smoothing, resulting in a different trend shape compared to temperature bin summaries.\n\n\n\nR Code Used to Generate Chart:\nggplot(rides_weather_df, aes(x = temp, y = rides, color = user_type)) +\n  geom_smooth(method = \"loess\", se = FALSE) +\n  scale_y_continuous(labels = label_number(scale_cut = cut_short_scale())) +\n  scale_color_manual(values = c(\"subscriber\" = \"blue\", \"customer\" = \"red\")) +\n  labs(\n    title = \"Hourly Ride Volume vs Temperature\",\n    x = \"Temperature (°C)\",\n    y = \"Hourly Ride Volume\",\n    color = \"User Type\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "viz/Divvy_Stations_table.html",
    "href": "viz/Divvy_Stations_table.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Divvy Stations Table\n\n  \n\nQGIS screenshot\n\n\nThis is a screenshot of the Divvy_Stations_2013 table taken from QGIS\nThis screenshot was not used in the case study it is included only for completeness and to support narrative details."
  },
  {
    "objectID": "viz/Difference_in_Ride_Proportions_Weekday-Weekend.html",
    "href": "viz/Difference_in_Ride_Proportions_Weekday-Weekend.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Difference in Ride Proportions Weekday to Weekend\n\n  \n\nHourly difference in ride proportions: Weekday minus Weekend. Red tones highlight hours where weekday rides are more frequent proportionally; blue tones highlight hours dominated by weekend activity.\n\n\n\nOverview\nThis heatmap shows the proportional difference in ride volume by hour of the day between weekdays and weekends. It normalizes each group separately so the visualization highlights relative time-of-day preference, independent of the total ride volume.\n\n\nChart Details\n\nX-Axis: Hour of Day (0–23)\nY-Axis: Dummy axis to create a horizontal heatmap band (no intrinsic meaning)\nColor Scale:\n\nRed: Hours with proportionally higher weekday usage\nBlue: Hours with proportionally higher weekend usage\nWhite: No significant difference\n\n\n\n\nObservations\n\nWeekday-dominant hours:\n\nStrong peaks in the morning (7–9 AM) and late afternoon (4–6 PM).\nConsistent with commuter patterns among customers using non-tourist stations.\n\nWeekend-dominant hours:\n\nMidday and early afternoon (10 AM–3 PM) show higher weekend share, likely indicating recreational or leisure use.\n\nEvenings:\n\nSome residual weekday preference persists into the evening, but less pronounced.\n\n\n\n\nInterpretation\n\nThis chart highlights the behavioral shift between weekdays and weekends.\nEven when weekends have high total ride volume, customers distribute their rides more evenly across midday hours.\nWeekdays concentrate ridership in commute-related time blocks.\n\n\n\nData Sources\n\nrides table filtered for:\n\nuser_type = 1 (customer)\nNon-tourist stations (start and end)\nRides after 2023-01-01\n\nDerived tables:\n\nrides_by_hour_weekpart: Hourly counts by weekday/weekend\nride_props: Proportions normalized within each week part\nprop_wide: Wide-format table for computing differences\n\n\n\n\nR Code Used to Generate Chart:\nggplot(prop_wide, aes(x = hour, y = 1, fill = diff)) +\n     geom_tile() +\n     scale_fill_gradient2(low = \"blue\", high = \"red\", mid = \"white\", midpoint = 0) +\n     labs(\n         title = \"Difference in Ride Proportions: Weekday - Weekend\",\n         x = \"Hour of Day\",\n         y = NULL,\n         fill = \"Weekday &gt; Weekend\"\n     ) +\n     theme_minimal()"
  },
  {
    "objectID": "viz/Avg_Hourly_Rides_vs_Temp.html",
    "href": "viz/Avg_Hourly_Rides_vs_Temp.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Average Hourly Rides vs. Temperature\n\n  \n\nAverage hourly rides by temperature (°C), showing subscriber, customer, and total ride volume peaking near 25°C. Customers are slightly more temperature-sensitive; subscribers remain steadier.\n\n\nThis chart illustrates the relationship between ambient temperature (°C) and the average number of rides per hour, with data grouped into 2°C bins to smooth short-term fluctuations and reveal broader trends..\n\nThe x-axis shows temperature in degrees Celsius.\nThe y-axis displays the average number of rides per hour.\nGrid lines and a clear legend outside the plot area aid interpretability.\n\nThree ride categories are plotted:\n\nTotal Rides (all users)\nSubscribers (dark blue line)\nCustomers (dark orange line)\n\n\nInsights:\n\nBike usage increases with warmer weather, peaking for both Subscribers and Customers at 26°C (78.8∘F) temperatures, after which it falls off sharplybe.\nSubscribers tend to be less dependant on temperature range (correlation coefficient VALUE compared to VALUE for Customers), but sill follow the same basic pattern.\nCustomers show a sharper increase in usage with warmth, indicating stronger sensitivity to weather.\n\nThese trends can inform operational decisions and user engagement strategies, particularly around marketing and bike redistribution efforts during seasonal changes.\n**SQL code to gather data for chart.\n.headers off\n.mode tabs\n.output avg_temp_vs_rides.tsv\n\nWITH binned AS (                          -- 2 °C comfort‑oriented buckets\n    SELECT\n        CAST(temp / 2.0 AS INT) * 2              AS temp_bin,         -- –10,‑8,…,34\n        r.user_type,\n        SUM(r.rides)                             AS rides\n    FROM rides_per_hour_tbl   AS r\n    JOIN hourly_weather       AS w  ON w.epoch = r.epoch\n    GROUP BY temp_bin, r.user_type\n), pivot AS (                             -- turn rows into columns\n    SELECT\n        temp_bin,\n        AVG(rides)                                  AS total,\n        AVG(CASE WHEN user_type='subscriber' THEN rides END) AS subs,\n        AVG(CASE WHEN user_type='customer'   THEN rides END) AS cust\n    FROM binned\n    GROUP BY temp_bin\n    ORDER BY temp_bin\n)\nSELECT temp_bin, total, subs, cust\nFROM pivot;\n\n.output stdout\nGnuplot Code Used to Generate Chart:\nset title \"Average Hourly Rides vs. Temperature (2°C Bins)\"\nset xlabel \"Temperature (°C)\"\nset ylabel \"Average Rides per Hour\"\nset datafile separator '\\t'\nset term wxt\nset grid\nset key outside\nset format y \"%.0f\"\nplot \\\n&gt;    \"temp_vs_rides.tsv\" every ::35::68 using 1:2 with lines lw 2 lc rgb \"black\" title \"Avg Total\", \\\n    \"\" every ::35::68 using 1:3 with lines lw 2 lc rgb \"dark-blue\" title \"Avg Subscribers\", \\\n    \"\" every ::35::68 using 1:4 with lines lw 2 lc rgb \"dark-orange\" title \"Avg Customers\"\nplot \\\n    \"temp_vs_rides.tsv\" every ::35::68 using 1:2 with lines lw 2 lc rgb \"black\" title \"Avg Total\", \\\n    \"\" every ::35::68 using 1:3 with lines lw 2 lc rgb \"dark-blue\" title \"Avg Subscribers\", \\\n    \"\" every ::35::68 using 1:4 with lines lw 2 lc rgb \"dark-orange\" title \"Avg Customers\""
  },
  {
    "objectID": "viz/2025_Divvy_Stations.html",
    "href": "viz/2025_Divvy_Stations.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "🗺️ Screenshot: 2025 Divvy Stations Map\n\n  \n\nMap showing Divvy station locations across Chicago, captured during early data source exploration.\n\n\nThis is a screenshot of the Divvy Bicycle Stations Map from the City of Chicago Transportations web site. This image is referenced by the workLog during the exploratory stage of the case study while searching for a street map of Chicago to use in my own visualizations. This image was not used as a part of the case study.\nSource: Divvy Station Map Copyright: Map © City of Chicago. Used here under fair use for educational and analytical documentation."
  },
  {
    "objectID": "data/rides_weather.html",
    "href": "data/rides_weather.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Creation\nREATE VIEW rides_weather AS SELECT w.epoch AS epoch, – seconds since 1970‑01‑01 UTC r.user_type, COALESCE(r.rides, 0) AS rides, – 0 if no trips that hour w.temp, w.dwpt, w.rhum, w.prcp, w.wdir, w.wspd, w.coco FROM hourly_weather AS w LEFT JOIN rides_per_hour AS r ON r.epoch = w.epoch"
  },
  {
    "objectID": "data/post_electric_rides_df.html",
    "href": "data/post_electric_rides_df.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "post_electric_rides_df &lt;- dbGetQuery(con, \"SELECT\n   DATE(start_time, 'unixepoch') AS ride_date,\n   user_type,\n   bike_type,\n   COUNT(*) AS ride_count,\n   AVG((end_time - start_time) / 60.0) AS avg_duration_minutes\nFROM rides\nWHERE start_time &gt;= strftime('%s', '2023-01-01') -- first e-bike appeared\nGROUP BY ride_date, user_type, bike_type;\")"
  },
  {
    "objectID": "data/non_tourist_customer_rides_df.html",
    "href": "data/non_tourist_customer_rides_df.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "** Source Table:** rides table in SQLite database\n\n\n\nQuery selects:\n\nride_id\nstart_time\nend_time\nstart_station_id\nend_station_id\nbike_type\n\nWith these filters:\n\nuser_type = 1\nMeaning: customer (casual rider)\nstart_station_id and end_station_id both in your non-tourist stations list (station_ids_sql)\nstart_time &gt;= ‘2023-01-01’\nMeaning: rides starting on or after Jan 1, 2023\n\n\n\n\nThis dataset forms the foundational rides subset from which many other frames were derived:\n\nnon_loop_rides_df\n\nList others\n** Full Query Text **\nrides_query &lt;- sprintf(\" \n   SELECT\n     ride_id,\n     start_time,\n     end_time,\n     start_station_id,\n     end_station_id,\n     bike_type\n   FROM rides\n   WHERE user_type = 1\n     AND start_station_id IN (%s)\n     AND end_station_id IN (%s)\n     AND start_time &gt;= strftime('%%s', '2023-01-01')\n\", station_ids_sql, station_ids_sql)\n\nnon_tourist_customer_rides_df &lt;- dbGetQuery(con, ride_query)"
  },
  {
    "objectID": "data/non_tourist_customer_rides_df.html#provenance-for-non_tourist_customer_rides_df",
    "href": "data/non_tourist_customer_rides_df.html#provenance-for-non_tourist_customer_rides_df",
    "title": "Bike share case-study",
    "section": "",
    "text": "** Source Table:** rides table in SQLite database\n\n\n\nQuery selects:\n\nride_id\nstart_time\nend_time\nstart_station_id\nend_station_id\nbike_type\n\nWith these filters:\n\nuser_type = 1\nMeaning: customer (casual rider)\nstart_station_id and end_station_id both in your non-tourist stations list (station_ids_sql)\nstart_time &gt;= ‘2023-01-01’\nMeaning: rides starting on or after Jan 1, 2023\n\n\n\n\nThis dataset forms the foundational rides subset from which many other frames were derived:\n\nnon_loop_rides_df\n\nList others\n** Full Query Text **\nrides_query &lt;- sprintf(\" \n   SELECT\n     ride_id,\n     start_time,\n     end_time,\n     start_station_id,\n     end_station_id,\n     bike_type\n   FROM rides\n   WHERE user_type = 1\n     AND start_station_id IN (%s)\n     AND end_station_id IN (%s)\n     AND start_time &gt;= strftime('%%s', '2023-01-01')\n\", station_ids_sql, station_ids_sql)\n\nnon_tourist_customer_rides_df &lt;- dbGetQuery(con, ride_query)"
  },
  {
    "objectID": "data/hourly_weather.html",
    "href": "data/hourly_weather.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Import\n&gt; df &lt;- read.csv(\"/home/sas/classes/Google/data-analytics/data/midway_weather.csv\", stringsAsFac\ntors = FALSE)\n&gt; head(df)\n        Date Hour Temp dwpt rhum prcp snow wdir wspd wpgt   pres tsun coco\n1 2013-06-27    0 27.2 19.3   62    0   NA  270 18.4   NA 1005.7   NA   NA\n2 2013-06-27    1 24.4 18.8   71    0   NA   10 16.6   NA 1005.7   NA   NA\n3 2013-06-27    2 23.3 18.4   74    0   NA   20 11.2   NA 1006.5   NA   NA\n4 2013-06-27    3 23.3 18.4   74    0   NA   30  9.4   NA 1006.7   NA   NA\n5 2013-06-27    4 22.8 17.7   73    0   NA   10  5.4   NA 1007.0   NA   NA\n6 2013-06-27    5 22.2 18.4   79    0   NA  350  9.4   NA 1007.8   NA   NA\n&gt; library(dplyr)\n&gt; df &lt;- df %&gt;% select(-snow)\n&gt; df &lt;- df %&gt;% select(-wpgt, -pres)\n&gt; df &lt;- df %&gt;% select(-tsun)\n&gt; df$datetime &lt;- as.POSIXct(paste(df$Date, sprintf(\"%02d:00:00\", df$Hour)), format=\"%Y-%m-%d %H:\n%M:%S\", tz=\"UTC\")\n&gt; df$epoch &lt;- as.integer(df$datetime)\n&gt; \n&gt; df &lt;- df[, c(\"epoch\", setdiff(names(df), \"epoch\"))]\n&gt; df &lt;- df %&gt;% select(-Date)\n&gt; df &lt;- df %&gt;% select(-Hour)\n&gt; df &lt;- df %&gt;% select(-datetime)\n head(df)\n       epoch Temp dwpt rhum prcp wdir wspd coco\n1 1372291200 27.2 19.3   62    0  270 18.4   NA\n2 1372294800 24.4 18.8   71    0   10 16.6   NA\n3 1372298400 23.3 18.4   74    0   20 11.2   NA\n4 1372302000 23.3 18.4   74    0   30  9.4   NA\n5 1372305600 22.8 17.7   73    0   10  5.4   NA\n6 1372309200 22.2 18.4   79    0  350  9.4   NA\n\ncon &lt;- dbConnect(RSQLite::SQLite(), \"/home/sas/classes/Google/data-analytics/data/caseStudy.db\")\n&gt; dbExecute(con, \"\n+    CREATE TABLE hourly_weather (\n+      epoch INTEGER PRIMARY KEY,\n+      temp REAL,\n+      dwpt REAL,\n+      rhum INTEGER,\n+      prcp REAL,\n+      wdir INTEGER,\n+      wspd REAL,\n+      coco INTEGER\n+   )\n+ \")\n&gt; dbWriteTable(con, \"hourly_weather\", df, append = TRUE)\n\n\nCleaning"
  },
  {
    "objectID": "viz/visualizations.html",
    "href": "viz/visualizations.html",
    "title": "Visualizations",
    "section": "",
    "text": "This page presents visualizations from the case study. Visuals are grouped into thematic sections covering time-based patterns, temperature effects, spatial behavior, and more.\n\n\n\n\n\n\n  \n\nFIGCAPTION\n\n\nThis interactive map of the top 50 stations includes the top 50 stations by number of subscriber rides and the top 50 stations by number of customer rides. We break from the normal color scheme as more contrast was required due to the preexisting colors in the map. So the dots for subscriber stations rendered in blue and the dots for customer stations rendered in red. The dots for stations are offset slightly to avoid one dot obscuring the other for the cases where the station is in the top 50 for both subscribers and customers. This is accomplished by using a data frame where the location of the stations is offset. The size of the dots is scaled by the total number of rides (subscriber or customer as appropriate), so that stations with more rides are larger dots.\nIt was created in R using Leaflet.\n\n\n\n\n  \n\nThis interactive map shows the top 10 most frequently traveled station-to-station ride paths for the following rider groups; All Riders, Subscribers, or Customers. Line colors indicate ride volume, revealing distinct spatial usage patterns: casual riders concentrate near the lakefront and tourist zones, while subscribers follow more distributed, commuter-aligned routes. Click to open the full visualization in Tableau.\n\n\n\n\nThis interactive map displays the top 10 most common ride paths (station-to-station pairs) for a selected user group: All Riders, Subscribers, or Customers.\n\nEach line represents a frequently traveled path, regardless of direction.\nLine color corresponds to ride volume between those stations.\nUsers can filter by rider type using the control panel on the right.\n\nThis visualization highlights differences in spatial behavior between groups:\n\nCustomers tend to use routes near the lakefront and popular tourist zones.\nSubscribers favor more distributed, commuter-oriented paths.\n\n“Station usage differs substantially by rider type, but not in the expected way.”\n\n  \n\nComparison of Customer vs. Subscriber Rides by Path. This horizontal bar chart visualizes the total number of rides by customer type (subscribers in blue, casual customers in orange) for the top ride paths. It highlights differences in route preferences and ride volumes between the two user segments.\n\n\n\n\n\nThis histogram compares ride volumes for station-to-station pairs with at least 10,000 rides, of which there are 88, sorted by total combined ride count.\nEach bar shows the ride count split between Subscribers (dark blue) and Customers (orange) for a specific path.\nThis view emphasizes which ride paths are dominated by Subscribers (often commuter routes) versus those with more balanced or Customer-heavy traffic.\n\n  \n\nFIGCAPTION\n\n\n\n\n\nThis histogram visualizes the distribution of ride paths (station-to-station pairs) by their subscriber ratio, defined as the proportion of rides taken by Subscribers versus Customers for each path.\n\nThe dataset includes all the bi-directional path with at least 10,000 rides. There are 88 such paths.\nEach path name represents one bi-directional path, with the length of the bar corresponding to the subscriber ratio (from 0% subscriber to 100%).\n\nThe chart can be sorted by:\n\nPath name (alphabetical)\nSubscriber ratio (to identify Customer-heavy or Subscriber-heavy routes)\n\nThis visualization reveals important asymmetries in how ride paths are used:\n\nPaths with very low subscriber ratios often correspond to tourist-heavy or leisure routes.\nPaths with high subscriber ratios are more likely to represent commuting corridors or utilitarian rides between residential and business areas.\n\n\n\n\n\n\n\n\nRides analyzed across time dimensions like hour, day, month, or season.\n\n\n\n  \n\nHourly distribution of customer rides originating from non-tourist stations, showing peak activity in the late afternoon.\n\n\n\n\nThis bar chart shows how customer rides at non-tourist stations vary across the 24-hour day. By excluding rides from stations frequently used by tourists, this visualization highlights local usage patterns, such as commuting or neighborhood trips. Excluding sightseeing or visitor behavior as much as possible.\n\n\n\n\nX-Axis: Hour of day (0 = midnight, 23 = 11 PM)\nY-Axis: Number of rides started in each hour\nBars: Hourly ride counts by customer users at non-tourist stations\n\n\n\n\nTo identify when non-tourist customer rides occur most frequently and to reveal possible commuter or routine daily patterns among local riders.\n\n\n\n\nEarly morning (0–5 AM): Minimal activity.\nMorning ramp-up (6–11 AM): Gradual increase as the day progresses.\nMidday plateau (12–15 PM): Consistent moderate ride volume.\nPeak period (16–18 PM): Pronounced spike with the highest volume around 17:00.\nEvening taper (19–23 PM): Gradual decline but still notable usage into the night.\n\n\n\n\nThe clear peak around 5 PM suggests:\n\nAfter work recreation or errands.\nPossible casual commuting behavior.\n\nThe modest morning volume and sustained midday usage indicate that, while some rides may be utilitarian, many are likely discretionary trips by locals.\n\n\n\n\nTourist stations were excluded based on a curated station ID list.\nRides filtered to customer user type.\nAll timestamps converted to Chicago local time.\nBin width: 1 hour per bar.\n\n\n\n\n\n\n\nPre-processed dataframe rides_by_hour_weekpart\n\nFiltered by:\n\nNon-tourist station IDs\ncustomer user type\ntime converted to local time\n\n\n\n\n\n\nggplot(rides_by_hour_weekpart, aes(x = hour, y = ride_count, fill = week_part)) +\n    geom_col(position = \"dodge\") +\n    labs(\n        title = \"Non-Tourist Customer Rides by Hour of Day\",\n        subtitle = \"Adjusted to Chicago Local Time\",\n        x = \"Hour of Day\",\n        y = \"Ride Count\",\n        fill = \"Day Type\"\n    ) +\n    scale_x_continuous(breaks = 0:23) +\n    theme_minimal()\n\n\n\n\n\n\n\n  \n\nTotal customer rides per day of week at non-tourist stations, highlighting the clear weekend peaks in ridership.\n\n\n\n\nThis bar chart displays the total number of customer rides at non-tourist stations, grouped by day of the week. By focusing on non-tourist stations, the visualization emphasizes local usage patterns rather than rides taken by visitors.\n\n\n\n\nX-Axis: Day of the week (Sunday through Saturday)\nY-Axis: Total ride count per day\nBars: Aggregate counts of rides initiated by customers at non-tourist stations\n\n\n\n\nTo illustrate weekly patterns in casual (customer) ridership among local users, highlighting which days see higher or lower activity.\n\n\n\n\nWeekends (Saturday and Sunday): Highest ride volumes, indicating strong recreational or leisure usage.\nWeekdays (Monday–Friday): Lower and relatively consistent ride counts compared to weekends.\nPeak day: Saturday shows the most activity overall.\n\n\n\n\n\nThe clear weekend peak suggests most customer rides are discretionary trips taken for leisure rather than routine commuting.\nThe relative uniformity of weekday rides indicates a stable but smaller base of casual usage during the workweek.\n\n\n\n\n\nRides were filtered to:\n\ncustomer user type (not subscribers)\nExclude all tourist stations\n\nDay of week extracted from ride start timestamps (converted to local time)\n\n\n\n\n\n\n\nPre-processed dataframe non_tourist_customer_rides_df\n\nFiltered by:\n\nNon-tourist station IDs\ncustomer user type\n\n\n\n\n\n\nggplot(non_tourist_customer_rides_df, aes(x = day_of_week)) +\n     geom_bar(fill = \"steelblue\") +\n     labs(\n         title = \"Non-Tourist Customer Rides by Day of the Week\",\n         x = \"Day of the Week\",\n         y = \"Number of Rides\"\n     ) +\n     theme_minimal()\n\n\n\n\n\n\n\n  \n\nHourly comparison of customer rides by day type (weekday vs weekend) at non-tourist stations, highlighting differences in temporal riding behavior.\n\n\n\n\nThis grouped bar chart compares customer ride activity across hours of the day, split by weekday and weekend, limited to non-tourist stations. It highlights behavioral shifts in usage patterns between workdays and leisure days.\n\n\n\n\nX-Axis: Hour of day (0–23 in 24-hour format).\nY-Axis: Number of rides initiated during that hour.\nBars:\n\nBlue: Weekday ride counts.\nOrange: Weekend ride counts.\n\nBars are grouped by hour to allow direct visual comparison between the two day types.\n\n\n\n\nThis visualization is designed to isolate potential commuting or habitual usage patterns by removing the influence of tourist-heavy areas and separating ride behavior by the type of day.\n\n\n\n\nWeekday Trends:\n\nStrong late afternoon peak at 17:00 (5 PM) suggests post-work or school riding.\nModerate increase starting around 7–8 AM, possibly indicating morning commutes.\nSubdued activity in the early morning and late evening.\n\nWeekend Trends:\n\nMore even distribution throughout the midday and early afternoon.\nNo sharp peak, but elevated ridership between 10:00 and 16:00.\nMorning and evening ride counts are lower than weekday equivalents.\n\n\n\n\n\n\nThe sharp peak at 5 PM on weekdays strongly suggests commuter behavior, even among casual (non-subscriber) users.\nThe flatter weekend profile indicates a more recreational or errand-driven pattern, with rides spread across daylight hours.\nFiltering out tourist stations helps reinforce the interpretation that these behaviors stem from local usage, not tourism.\n\n\n\n\n\nRide records are filtered to include only those starting at non-tourist stations.\nUsers included are labeled as Customers (i.e., non-subscribers).\n“Weekday” includes Monday through Friday; “Weekend” includes Saturday and Sunday.\nTime is derived from the local timestamp of the ride start.\n\n\n\n\n\n\n\nData Frame: rides_by_hour_weekpart\n\nFilters Applied:\n\nOnly customer rides (casual users)\nRides originating from non-tourist stations\nGrouped by hour of day and week_part (Weekday vs Weekend)\n\n\n\n\n\n\nggplot(rides_by_hour_weekpart, aes(x = hour, y = ride_count, fill = week_part)) +\ngeom_col(position = \"dodge\") +\nlabs(\ntitle = \"Customer Rides by Hour: Weekday vs Weekend (Non-Tourist Stations)\",\nx = \"Hour of Day\",\ny = \"Number of Rides\",\nfill = \"Day Type\"\n) +\nscale_x_continuous(breaks = 0:23) +\nscale_fill_manual(values = c(\"Weekday\" = \"darkblue\", \"Weekend\" = \"darkorange\")) +\ntheme_minimal()\n\n\n\n\n\n\n\n  \n\nHourly customer ride patterns by season at non-tourist stations. Weekday rides peak strongly in the late afternoon during warmer seasons, while weekend rides are more evenly distributed. Winter shows the lowest activity overall.\n\n\n\n\nThis faceted line chart visualizes customer rides over the hours of the day, separated by season and by weekday/weekend. It highlights how ridership patterns shift throughout the year.\n\n\n\n\nX-Axis: Hour of Day (0–23)\nY-Axis: Ride Count\nFacets: One panel per season (Spring, Summer, Fall, Winter)\nLine Colors:\n\nBlue: Weekday\nOrange: Weekend\n\n\n\n\n\nTo illustrate how both time of day and seasonality affect customer ride behavior when excluding tourist-heavy stations.\n\n\n\n\nSpring: Moderate volume, clear late afternoon weekday peak\nSummer: Highest usage, pronounced 17:00 weekday peak\nFall: Similar shape to Spring, slightly lower counts\nWinter: Flat distribution, significantly reduced activity\n\n\n\n\n\nCommuting Behavior: Strong summer/fall weekday peaks around 17:00 suggest commuter-driven use, especially among customers using the system for one-way travel from work or transit.\nRecreation and Errands: Weekend rides are more spread throughout midday.\nSeasonal Sensitivity: Weekend ride patterns are flatter across the day and more seasonally stable, while weekday patterns show strong seasonal variation.\nCold Weather Impact: Ridership drops sharply in winter across all times of day.\n\n\n\n\n\nTimestamps were converted to local Chicago time.\nDay-of-week was used to classify rides into “Weekday” vs “Weekend”.\nSeasonal classification was derived from ride start dates.\nAll rides were filtered to exclude tourist station IDs before analysis.\n\n\n\n\nData Source\nData Frame: rides_by_hour_season\nThis dataframe includes:\n\nFiltered out tourist stations\nFiltered to customer rides\nDerived season from start timestamp\nDerived week_part from day of week\nAggregated ride counts by hour, season, and day type\n\nR Code Used to Generate the Chart:\nggplot(rides_by_hour_season, aes(x = hour, y = ride_count, color = week_part)) +\n  geom_line(size = 1.1) +\n  facet_wrap(~season, ncol = 2) +\n  scale_x_continuous(breaks = 0:23) +\n  scale_color_manual(values = c(\"Weekday\" = \"darkblue\", \"Weekend\" = \"darkorange\")) +\n  labs(\n    title = \"Customer Rides by Hour, Faceted by Season (Non-Tourist Stations)\",\n    x = \"Hour of Day\",\n    y = \"Ride Count\",\n    color = \"Day Type\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n  \n\nMonthly distribution of customer rides at non-tourist stations, illustrating clear seasonality in usage patterns.\n\n\n\n\nThis bar chart displays the total number of rides initiated by customers (non-subscribers) at non-tourist stations, aggregated by calendar month. It shows clear seasonal patterns in ridership.\n\n\n\n\nX-Axis: Month (1 = January, 12 = December).\nY-Axis: Total ride count for each month.\nBars: Orange fill indicates the count of rides starting in each month.\n\n\n\n\nThis visualization is intended to illustrate seasonal variation in usage, excluding tourist-heavy locations to focus on local customer ridership.\n\n\n\n\nWinter (Dec–Feb): Lowest ridership, likely due to cold weather.\nSpring (Mar–May): Steady increase as temperatures rise.\nSummer Peak (June–August): Highest ridership, peaking in July.\nFall Decline (Sept–Nov): Gradual reduction in usage as temperatures cool.\n\n\n\n\n\nThe clear summer peak suggests that casual riders strongly prefer warm-weather months.\nThe exclusion of tourist stations reinforces that these are local usage patterns, not driven primarily by visitors.\nWinter ridership does not drop to zero, indicating some year-round demand.\n\n\n\n\n\n\n\nnon_tourist_customer_rides_df\nFiltered to include:\n\nuser_type == “customer”\nstart_station_id in the non-tourist station list\n\n\n\n\n\nggplot(non_tourist_customer_rides_df, aes(x = month)) +\n     geom_bar(fill = \"darkorange\") +\n     labs(\n         title = \"Non-Tourist Customer Rides by Month\",\n         x = \"Month\",\n         y = \"Number of Rides\"\n     ) +\n     theme_minimal()\n\n\n\n\n\n\n\n  \n\nTotal customer rides originating at non-tourist stations, aggregated by season. Summer shows the highest volume, with winter substantially lower.\n\n\n\n\nThis bar chart summarizes the total ride volume by season for customers using non-tourist stations. It helps illustrate seasonal variability in casual riding behavior.\n\n\n\n\nX-Axis: Season (Spring, Summer, Fall, Winter)\nY-Axis: Number of rides\nBar Fill: Solid dark orange\n\n\n\n\nThis chart highlights how seasonal factors influence casual ridership, such as weather and daylight availability, independent of tourist activity.\n\n\n\nSummer: Rides peak sharply, exceeding 600,000 rides. Reflecting warm weather and extended daylight hours.\nFall: Second-highest ridership, over 400,000 rides, showing sustained use into cooler months.\nSpring: More modest totals (~220,000 rides), likely reflecting a gradual ramp-up in riding.\nWinter: Lowest ridership (under 200,000), consistent with reduced bike use in cold conditions.\n\n\n\n\n\n\nThe strong seasonal trend underscores the importance of temperature and daylight in casual rider behavior.\nEven excluding tourist hotspots, ridership in summer triples or quadruples winter levels.\nThese patterns can inform resource allocation (e.g., rebalancing bikes) and maintenance scheduling.\n\n\n\n\n\n\nFiltered rides from the dataset:\n\nnon_tourist_customer_rides_df\nFilters Applied:\n\nuser_type = customer\nStart station ID in non-tourist stations list\n\n\n\n\n\nggplot(non_tourist_customer_rides_df, aes(x = season)) +\n     geom_bar(fill = \"darkorange\") +\n     labs(\n         title = \"Non-Tourist Customer Rides by Season\",\n         x = \"Season\",\n         y = \"Number of Rides\"\n     ) +\n     theme_minimal()\n\n\n\n\n\n\n\n  \n\nHourly ride counts at non-tourist stations, grouped by season and separated by weekday versus weekend, illustrating clear seasonal and temporal ridership patterns.\n\n\n\n\nThis multi-panel grouped bar chart compares hourly ride activity across the four seasons, separated into weekday and weekend usage, restricted to non-tourist stations. It provides a clear view of how both time of day and seasonality influence ridership behavior among casual users.\n\n\n\n\nX-Axis: Hour of Day (0–23 in 24-hour format).\nY-Axis: Number of Rides.\nBars:\n\nDark Blue: Weekday rides.\nDark Orange: Weekend rides.\n\nFacets:\n\nOne panel per season: Fall, Spring, Summer, and Winter.\n\nPosition: Bars are grouped side by side within each hour for comparison.\n\n\n\n\nThe visualization aims to:\n\nQuantify the impact of seasonal changes on ridership volume.\nIdentify daily commute-like patterns even among non-subscribers.\nHighlight how weekends differ from weekdays in temporal distribution.\n\n\n\n\n\nSummer and Fall:\n\nPronounced weekday peaks around 17:00, likely related to commuting or end-of-day activities.\nWeekend ridership is elevated but spread more evenly across midday hours.\n\nSpring:\n\nSimilar but slightly lower weekday afternoon peaks.\n\nWinter:\n\nOverall volume sharply reduced.\nFlatter distribution throughout the day with only a mild afternoon increase on weekdays.\n\n\n\n\n\n\nStrong weekday afternoon peaks in warm months support the idea of commuting or routine trips by casual riders.\nWeekend rides remain relatively stable across seasons, indicating recreation and errands.\nWinter conditions significantly suppress all ride activity.\n\n\n\n\n\nAll rides are filtered to exclude tourist stations.\nOnly rides by customer (non-subscriber) users are included.\nLocal Chicago time used for hourly binning.\nSeason assigned based on ride start date.\n\n\n\n\n\n\n\nnon_tourist_customer_rides_df\n\nFiltered for user_type = 1.\nFiltered to non-tourist station IDs.\n\n\n\n\n\nggplot(rides_by_hour_season, aes(x = hour, y = ride_count, fill = week_part)) +\n  geom_col(position = \"dodge\") +\n  facet_wrap(~season, ncol = 2) +\n  scale_x_continuous(breaks = 0:23) +\n  scale_fill_manual(values = c(\"Weekday\" = \"darkblue\", \"Weekend\" = \"darkorange\")) +\n  labs(\n    title = \"Hourly Ride Patterns by Season and Day Type (Non-Tourist Stations)\",\n    x = \"Hour of Day\",\n    y = \"Number of Rides\",\n    fill = \"Day Type\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n  \n\nProportion of daily non-tourist rides by hour of day and day type (weekday vs. weekend). Weekdays show a clear peak in the late afternoon commute hours, while weekends have a more uniform midday distribution.\n\n\n\n\nThis heatmap shows the hourly share of total daily rides for non-tourist customer rides, split by day type (Weekday vs. Weekend). Darker colors indicate higher proportions of each day’s total rides occurring in that hour.\n\n\n\n\nX-Axis (Hour of Day):\n\nRanges from 0 to 23.\nRepresents the ride start hour in local time.\n\nY-Axis (Day Type):\n\nTwo categories: Weekday and Weekend.\n\nFill Color (Proportion):\n\nGradient from white (low) to dark orange (high).\nIndicates the fraction of the day’s total rides occurring in each hour.\n\n\n\n\n\n\nWeekdays:\n\nClear late afternoon peak around 17:00–18:00, consistent with evening commute patterns.\nLower activity in early morning and late evening.\n\nWeekends:\n\nMore even distribution across 10:00–16:00, suggesting recreational or discretionary use.\nNo strong commute-style spike.\n\n\n\n\n\n\nThe contrast between weekday and weekend timing supports the hypothesis that weekday rides are more likely commuting or errands, while weekend rides are more leisurely.\nOperators could align staffing, bike redistribution, or promotions to these temporal patterns.\n\n\n\n\nThis chart can help\n\nModel hourly demand by day type.\nOptimize fleet distribution and availability during peak periods.\nInform marketing or pricing strategies aligned to usage timing.\n\n\n\n\n\nRide Records: Filtered for non-tourist customer rides (excluding stations flagged as tourist destinations).\nDerived Columns: Hour extracted from local start time; day type assigned as Weekday or Weekend.\nAggregation: Hourly counts normalized to proportions of each day’s total rides.\n\n\n\nggplot(ride_props, aes(x = hour, y = week_part, fill = prop)) +\n  geom_tile() +\n  scale_fill_gradient(low = \"white\", high = \"darkorange\") +\n  labs(\n    title = \"Non-Tourist Proportion of Daily Rides by Hour and Day Type\",\n    x = \"Hour of Day\",\n    y = \"Day Type\",\n    fill = \"Ride Proportion\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n  \n\nHourly difference in ride proportions: Weekday minus Weekend. Red tones highlight hours where weekday rides are more frequent proportionally; blue tones highlight hours dominated by weekend activity.\n\n\n\n\nThis heatmap shows the proportional difference in ride volume by hour of the day between weekdays and weekends. It normalizes each group separately so the visualization highlights relative time-of-day preference, independent of the total ride volume.\n\n\n\n\nX-Axis: Hour of Day (0–23)\nY-Axis: Dummy axis to create a horizontal heatmap band (no intrinsic meaning)\nColor Scale:\n\nRed: Hours with proportionally higher weekday usage\nBlue: Hours with proportionally higher weekend usage\nWhite: No significant difference\n\n\n\n\n\n\nWeekday-dominant hours:\n\nStrong peaks in the morning (7–9 AM) and late afternoon (4–6 PM).\nConsistent with commuter patterns among customers using non-tourist stations.\n\nWeekend-dominant hours:\n\nMidday and early afternoon (10 AM–3 PM) show higher weekend share, likely indicating recreational or leisure use.\n\nEvenings:\n\nSome residual weekday preference persists into the evening, but less pronounced.\n\n\n\n\n\n\nThis chart highlights the behavioral shift between weekdays and weekends.\nEven when weekends have high total ride volume, customers distribute their rides more evenly across midday hours.\nWeekdays concentrate ridership in commute-related time blocks.\n\n\n\n\n\nrides table filtered for:\n\nuser_type = 1 (customer)\nNon-tourist stations (start and end)\nRides after 2023-01-01\n\nDerived tables:\n\nrides_by_hour_weekpart: Hourly counts by weekday/weekend\nride_props: Proportions normalized within each week part\nprop_wide: Wide-format table for computing differences\n\n\n\n\n\nggplot(prop_wide, aes(x = hour, y = 1, fill = diff)) +\n     geom_tile() +\n     scale_fill_gradient2(low = \"blue\", high = \"red\", mid = \"white\", midpoint = 0) +\n     labs(\n         title = \"Difference in Ride Proportions: Weekday - Weekend\",\n         x = \"Hour of Day\",\n         y = NULL,\n         fill = \"Weekday &gt; Weekend\"\n     ) +\n     theme_minimal()\n\n\n\n\n\nRide behavior as it relates to temperature (and optionally precipitation).\n\n\n\n  \n\nHourly ride counts by temperature bin, with separate curves for Total, Subscriber, and Customer rides. Warmer temperatures strongly correlate with increased bike usage, especially among Customers.\n\n\nThis chart illustrates the relationship between ambient temperature (°C) and the number of rides starting at that temperature. Data is grouped into 2°C bins to smooth short-term fluctuations and reveal broader trends.\n\n\n\nX-Axis: Temperature in degrees Celsius.\nY-Axis: Total number of rides per bin, formatted with metric suffixes (e.g., 1k, 1M).\nGrid lines and a legend outside the plot area improve readability.\nThree ride categories are plotted:\n\nTotal Rides (black line)\nSubscribers (dark blue line)\nCustomers (dark orange line)\n\n\n\n\n\n\nBike usage increases steadily with warmer weather, peaking for both Subscribers and Customers around 26°C (78.8°F), after which it falls off sharply.\nCustomers display a steeper increase in usage with temperature, suggesting stronger sensitivity to warm conditions.\nSubscribers maintain higher baseline usage in cooler temperatures but follow a similar bell-shaped curve overall.\n\n\n\n\n\nThese trends highlight temperature as a powerful predictor of ridership.\nThe steeper response among Customers may reflect their recreational or discretionary usage.\nInsights from this pattern can inform:\n\nOperations (e.g., fleet redistribution, maintenance scheduling)\nMarketing campaigns (e.g., promoting rides during optimal weather windows)\n\n\n\n\n\n\nHourly Weather Data: Chicago Midway Airport hourly weather observations (temperature, precipitation, etc.)\nRide Data: Aggregated hourly ride counts joined to weather records by timestamp.\nPeriod: All available data between 2013 and 2025.\n\n\n\n\nBelow is the SQL command used to prepare the dataset:\n.headers off\n.mode tabs\n.output temp_vs_rides.tsv\n\nWITH binned AS (                          -- 2 °C comfort‑oriented buckets\n    SELECT\n        CAST(temp / 2.0 AS INT) * 2              AS temp_bin,         -- –10,‑8,…,34\n        r.user_type,\n        SUM(r.rides)                             AS rides\n    FROM rides_per_hour_tbl   AS r\n    JOIN hourly_weather       AS w  ON w.epoch = r.epoch\n    GROUP BY temp_bin, r.user_type\n), pivot AS (                             -- turn rows into columns\n    SELECT\n        temp_bin,\n        SUM(rides)                                  AS total,\n        SUM(CASE WHEN user_type='subscriber' THEN rides END) AS subs,\n        SUM(CASE WHEN user_type='customer'   THEN rides END) AS cust\n    FROM binned\n    GROUP BY temp_bin\n    ORDER BY temp_bin\n)\nSELECT temp_bin, total, subs, cust\nFROM pivot;\n\n.output stdout\n\n\n\nset format y \"%.0s%c\"\nset term wxt           \nset title \"Hourly Rides vs. Temperature\"\nset xlabel \"Temperature (°C)\"\nset ylabel \"Rides per hour\"\nset grid\nset datafile separator '\\t'   \nset key outside\nplot \\\n    \"temp_vs_rides.tsv\" every ::1::34 using 1:2 with lines lw 2 lc rgb \"black\" title \"Total\", \\\n    \"\"      every ::1::34 using 1:3 with lines lw 2 lc rgb \"dark-blue\" title \"Subscribers\", \\\n    \"\"      every ::1::34 using 1:4 with lines lw 2 lc rgb \"dark-orange\" title \"Customers\"\n\n\n\n\n\n  \n\nLOESS-smoothed hourly ride volume as a function of temperature, comparing customers and subscribers. Patterns remain elevated at higher temperatures due to the smoothing method.\n\n\n\n\nLOESS-smoothed hourly ride volume as a function of temperature, comparing customers and subscribers. Patterns remain elevated at higher temperatures due to the smoothing method.\n\nX-Axis: Air temperature in °C.\nY-Axis: Number of rides per hour.\nLines: LOESS smooth for each user type.\n\nBlue: Subscribers.\nRed: Customers.\n\n\n\n\n\n\nRide counts rise with temperature from below 0°C through the 20s.\nUnlike binned histograms, no clear decline is visible above ~30°C.\nCustomer volume grows faster with temperature than subscriber volume.\n\n\n\n\nThe continuous LOESS smoothing aggregates all hours (including some without rides), potentially obscuring the decline at extreme temperatures seen in binned charts. This chart reflects the overall association between hourly temperatures and ridership, rather than the distribution of rides alone.\n\n\n\n\nTrip Data: Divvy trip records from:\n\n2013–2019 (S3 archive)\n2023–2025 (City of Chicago Data Portal)\n\nWeather Data: Chicago Midway Airport hourly observations via Meteostat.\n\n\n\n\n\nRides aggregated per hour and user type (COUNT(*) AS rides).\nWeather joined on hourly epoch timestamp (start_time / 3600 * 3600).\nNo filter applied to exclude zero-ride hours (i.e., hours with no rides are included as 0).\nUsed as input to (../glossary.qmd#glossary-LOESS) smoothing, resulting in a different trend shape compared to temperature bin summaries.\n\n\n\n\nggplot(rides_weather_df, aes(x = temp, y = rides, color = user_type)) +\n  geom_smooth(method = \"loess\", se = FALSE) +\n  scale_y_continuous(labels = label_number(scale_cut = cut_short_scale())) +\n  scale_color_manual(values = c(\"subscriber\" = \"blue\", \"customer\" = \"red\")) +\n  labs(\n    title = \"Hourly Ride Volume vs Temperature\",\n    x = \"Temperature (°C)\",\n    y = \"Hourly Ride Volume\",\n    color = \"User Type\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n  \n\nFrequency distribution of hourly temperature observations during the analysis period, illustrating data coverage across temperature ranges.\n\n\n\n\nThis histogram shows how often each 2°C temperature range occurred in the underlying weather dataset. It helps contextualize the density of data points used in other temperature-related analyses, particularly the scarcity of very hot or very cold hours.\n\n\n\n\nX-Axis: Temperature Bin (°C), grouped in 2-degree intervals.\nY-Axis: Number of hourly records falling within each bin.\nBars: Height proportional to frequency of observations per bin.\n\n\n\n\n\nThe majority of observations cluster between ~5°C and ~25°C.\nVery few hours fall below -10°C or above 30°C.\nThis uneven distribution explains why temperature-related charts show more stable trends in mid-range temperatures but can become volatile at extremes.\n\n\n\n\nThe chart demonstrates that the dataset’s coverage is concentrated in moderate temperatures, suggesting caution when interpreting trends at temperature extremes due to sparse data.\n\n\n\n\nWeather Data: Hourly observations from Chicago Midway Airport via Meteostat Bulk Hourly Dataset.\n\nIncludes air temperature, dewpoint, humidity, precipitation, and other weather variables.\n\nTimeframe: Coverage aligned to available trip data (2013–2019 and 2023–2025), although this chart includes all available hourly weather records regardless of whether rides occurred.\n\n\n\n\n\nHourly temperature records loaded into SQLite.\nTemperature rounded down to nearest 2°C bin (floor(temp / 2) * 2).\nCounts aggregated per bin using dplyr in R.\n\n\n\n\n# Create temperature bins and count occurrences\ntemp_bins &lt;- hourly_weather_df %&gt;%\n  mutate(temp_bin = floor(temp / 2) * 2) %&gt;%\n  group_by(temp_bin) %&gt;%\n  summarise(count = n())\n\n# Plot histogram\nggplot(temp_bins, aes(x = temp_bin, y = count)) +\n  geom_col(fill = \"steelblue\") +\n  labs(\n    title = \"Frequency of Temperature Bins\",\n    x = \"Temperature Bin (°C)\",\n    y = \"Number of Hours\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n  \n\nRide Volume by Temperature and Rain Condition This panel chart shows total ride volume for subscribers and customers, grouped by dry, wet, and unknown precipitation conditions. Most rides occur in dry weather at temperatures between 20–25°C. Wet conditions significantly suppress ridership for both user types, revealing clear sensitivity to rain.\n\n\n\n\nThis line chart panel shows the total ride volume across 2°C temperature bins, broken down by user type (Customer vs. Subscriber) and grouped by rain condition (Dry, Wet, No data). Each panel represents a different precipitation category, allowing direct comparison of behavior under different weather conditions.\n\n\n\n\nX-Axis (Temperature Bin °C):\n\nTemperature ranges from -30°C to +30°C.\nBinned in 2°C increments.\n\nY-Axis (Total Rides):\n\nNumber of rides recorded within each temperature bin.\n\nFacets (Panels):\n\nDry: Rides that occurred with no recorded rain.\nNo data: Weather data was missing.\nWet: Rides that occurred during rain conditions.\n\nLines:\n\nRed: Customer ride volume.\nCyan: Subscriber ride volume.\n\n\n\n\n\n\n\n\nMost ride volume occurs here, peaking between 20–26°C.\nSubscribers consistently log more rides than customers across all temperature bins.\nClear bell-shaped distribution centered around optimal riding weather (20–25°C).\n\n\n\n\n\nVery little volume, but patterns still mirror the dry curve.\nCould include times where weather data was not collected for some reason (hardware failure, etc) or corrupted weather records.\n\n\n\n\n\nDramatic decrease in ride volume for both user types.\nSubscriber and customer patterns flatten and converge, showing less variance in behavior when it’s raining.\n\n\n\n\n\n\nTemperature strongly influences ridership, with optimal weather (20–25°C) showing the highest activity.\nPrecipitation is a major deterrent, suppressing ride volume across all temperatures.\nSubscribers ride more often and in a wider temperature range than customers, especially when conditions are dry.\n\n\n\n\nThis visualization helps:\n\nQuantify the impact of weather on bike share demand.\nSupport decisions around dynamic pricing, rebalancing, or user alerts based on forecasted weather.\nSegment usage patterns based on environmental conditions, without requiring detailed user data beyond type.\n\n\n\n\n\nTrip Data: Divvy trip records from:\n\n2013–2019 (S3 archive)\n2023–2025 (City of Chicago Data Portal)\n\nWeather Data: Chicago Midway Airport hourly observations via Meteostat.\n\n\n\n\n\nRides aggregated per hour and user type (COUNT(*) AS rides).\nWeather joined on hourly epoch timestamp (start_time / 3600 * 3600).\nTemperature binned using floor(temp / 2) * 2.\nPrecipitation labeled:\n\nDry = 0 mm precipitation.\nWet = &gt;0 mm precipitation.\nNo Data = missing precipitation.\n\nSummed rides per combination of bin, user type, and precipitation label.\n\n\n\n\ngroup_by(temp_bin, user_type, precip_label) %&gt;%\n     summarise(rides = sum(rides), .groups = \"drop\") %&gt;%\n     ggplot(aes(x = temp_bin, y = rides, color = user_type)) +\n     geom_line(size = 1) +\n     facet_wrap(~ precip_label, nrow = 1) +\n     labs(\n         title = \"Ride Volume by Temperature and Precipitation\",\n         subtitle = \"2°C temperature bins grouped by rain condition\",\n         x = \"Temperature Bin (°C)\",\n         y = \"Total Rides\",\n         color = \"User Type\"\n     ) +\n     scale_x_continuous(breaks = seq(-30, 40, by = 10)) +\n     theme_minimal(base_size = 14)\n\n\n\n\n\n  \n\nHourly ride volume by temperature, faceted by user type. Warmer temperatures correlate strongly with increased ride volume for both customers and subscribers, with subscriber volume remaining higher across all temperatures.\n\n\n\n\nThis dual-panel line plot compares hourly ride volume to temperature (°C) for each user type separately. It illustrates how customers and subscribers respond differently to temperature changes.\n\n\n\n\nX-Axis: Temperature in °C.\nY-Axis: Hourly ride count.\nFacets:\n\nLeft: Customers.\nRight: Subscribers.\n\nLine: LOESS smooth showing trend across all hourly observations.\n\n\n\n\n\nRide volume is lowest below freezing, rising quickly as temperatures warm.\nSubscribers consistently have higher hourly volume across the entire temperature range.\nBoth user types show a smooth, nonlinear increase, with no clear plateau in the observed temperatures.\nThe upward trend becomes especially pronounced above ~20°C.\n\n\n\n\nThese patterns suggest that temperature strongly influences ridership among both groups, but subscribers are more resilient to cold and maintain more consistent usage. The continuous rise highlights that moderate and warm weather significantly increase demand.\n\n\n\n\nTrip Data: Divvy trip records from:\n\n2013–2019 (S3 archive)\n2023–2025 (City of Chicago Data Portal)\n\nWeather Data: Chicago Midway Airport hourly observations via Meteostat.\n\n\n\n\nRides aggregated per hour and user type (COUNT(*) AS rides).\nWeather joined on hourly epoch timestamp (start_time / 3600 * 3600).\nNo filtering by precipitation.\nLOESS smoothing applied within each user type facet.\n\n\n\n\nggplot(rides_weather_df, aes(x = temp, y = rides)) +\n     geom_smooth(method = \"loess\", se = FALSE, color = \"darkgreen\") +\n     scale_y_continuous(labels = label_number(scale_cut = cut_short_scale())) +\n     facet_wrap(~ user_type) +\n     labs(\n         title = \"Temperature vs Ride Volume by User Type\",\n         x = \"Temperature (°C)\",\n         y = \"Hourly Ride Volume\"\n     ) +\n     theme_minimal()\n\n\n\n\n\n\n  \n\nTotal hourly rides by temperature bucket (2°C), separated by user type. Subscriber activity peaks more sharply in moderate to warm temperatures, while Customer rides increase more steadily with temperature. Data aggregated across all non-loop rides.\n\n\n\n\nThis chart shows how total rides vary with temperature, split between Subscribers and Customers. Ride counts are aggregated by temperature buckets, offering a side-by-side view of weather sensitivity by user group.\n\n\n\n\nX-Axis: Temperature in degrees Celsius, grouped into 2°C buckets.\nY-Axis: Total number of rides aggregated per hourly bin across the dataset.\nLines:\n\nSubscribers: Typically exhibit a sharper peak in moderate temperature ranges.\nCustomers: Show a more gradual increase in ride volume as temperatures rise.\n\n\n\n\n\nThe visualization helps compare how different user types respond to temperature changes. It reveals behavioral distinctions between Subscribers and Customers.\n\n\n\n\nSubscribers:\n\nLow ride volume below 10°C.\nSharp peak near 25°C, suggesting strong commuting patterns tied to comfort.\nRapid decline above 30°C, possibly due to heat discomfort.\n\nCustomers:\n\nMore gradual increase in ride volume with rising temperatures.\nPeak also around 25–30°C, but less steep rise and fall.\nGreater relative tolerance for warmer temperatures.\n\n\n\n\n\n\nSubscriber behavior is more concentrated and sensitive to moderate temperatures, likely tied to commuting habits.\nCustomer rides are more distributed across a range of temperatures, aligning with recreational or discretionary use.\nThe divergence in curve shapes supports the hypothesis of different underlying motivations between user groups.\n\n\n\n\n\nTemperatures are binned into 2°C increments based on conditions at the start of each ride.\nRides were grouped and summed by user type for each temperature bin, then aggregated hourly.\n\n\n\n\n\n\n\n  \n\nAverage hourly rides by temperature bucket and user type. Both subscribers and customers take more rides as temperatures increase, but customer ride volume rises more sharply in warmer weather, indicating greater temperature sensitivity among casual riders.\n\n\n\n\nThis chart presents the average number of hourly bike rides as a function of temperature (°C). The data is aggregated across all users, without distinguishing between subscriber or casual rider types.\n\n\n\n\nX-Axis: Temperature in degrees Celsius, ranging from below -10°C to above 35°C.\nY-Axis: Average hourly ride count.\nLine: A single curve showing average ride volume across all users, bucketed by temperature.\n\n\n\n\nThis visualization is intended to illustrate how temperature alone affects overall ridership behavior, independent of time of day, day of week, or rider category.\n\n\n\n\nSub-zero temperatures (&lt; 0°C): Very low ridership, close to zero, as expected.\nGradual increase: Ride volume increases steadily with temperature from around 0°C to the low 20s.\nPeak ridership: Occurs near 25°C, representing the optimal weather for riding.\nDrop-off above 30°C: Suggests decreased willingness to ride in high heat, likely due to discomfort or health concerns.\n\n\n\n\n\nThe chart suggests a strong correlation between temperature and total ride volume.\nThe symmetric, bell-shaped curve implies that moderate temperatures are ideal for cycling.\nExtremes on either end (cold or hot) sharply reduce bike usage.\n\n\n\n\n\nRides are put into bucked with 2°C increments based on the temperature at ride start times.\nThe “2-bucket” term refers to the fact that the temperatures readings were grouped into bins of 2°C. Binning is a form of data smoothing applied to reduce noise.\n\n.headers off          -- we only want raw numbers\n.mode tabs            -- gnuplot likes tab‑ or space‑separated columns\n.output temp_vs_rides.dat\nWITH t AS (\n  SELECT\n    CAST(temp / 2.0 AS INT)*2  AS temp_bin,   -- 2 °C buckets: …, 14, 16, 18 …\n    AVG(rides)                 AS avg_rides\n  FROM rides_weather\n  GROUP BY temp_bin\n  ORDER BY temp_bin\n)\nSELECT temp_bin, avg_rides\nFROM t;\n.output stdout         -- restore console\n\n\n\nset title \"Average hourly rides vs. temperature\"\nset xlabel \"Temperature (°C)\"\nset ylabel \"Average rides per hour\"\nset grid\nset key off\n\n# Simple connected line\nplot \"temp_vs_rides.dat\" using 1:2 with linespoints lw 2 pt 7\n\n\n\n\n\n  \n\nAverage hourly ride volume by temperature (2°C buckets) with cubic spline interpolation to highlight overall trends in ridership as temperatures rise and fall.\n\n\n\n\nThis chart presents the average number of hourly bike rides as a function of temperature (°C). The data is aggregated across all users, without distinguishing between subscriber or casual rider types.\n\n\n\n\nX-Axis: Temperature in degrees Celsius, ranging from below -10°C to above 35°C.\nY-Axis: Average hourly ride count.\nLine: A single curve showing average ride volume across all users, smoothed with cubic spline interpolation and bucketed by temperature.\n\n\n\n\nThis visualization illustrates how temperature alone affects overall ridership behavior, independent of time of day, day of week, or rider category.\n\n\n\n\nSub-zero temperatures (&lt; 0°C): Very low ridership, close to zero, as expected.\nGradual increase: Ride volume increases steadily with temperature from around 0°C to the low 20s.\nPeak ridership: Occurs near 25°C, representing the optimal weather for riding.\nDrop-off above 30°C: Suggests decreased willingness to ride in high heat, likely due to discomfort or health concerns.\n\n\n\n\n\nThe chart suggests a strong correlation between temperature and total ride volume.\nThe symmetric, bell-shaped curve implies that moderate temperatures are ideal for cycling.\nExtremes on either end (cold or hot) sharply reduce bike usage.\n\n\n\n\n\nRides were grouped into 2°C increments based on the temperature at ride start times.\nThe “2-bucket” term refers to this binning, which reduces noise by aggregating similar readings.\nThe curve was further smoothed using cubic spline interpolation, creating a continuous line that passes through the averaged data points.\n\n\n\n\n\nRide Data: Hourly aggregated ride counts from the rides_weather table, binned by temperature.\nWeather Data: Hourly temperature records associated to ride start timestamps.\n\n\n\n\n.headers off          -- we only want raw numbers\n.mode tabs            -- gnuplot likes tab‑ or space‑separated columns\n.output temp_vs_rides.dat\nWITH t AS (\n  SELECT\n    CAST(temp / 2.0 AS INT)*2  AS temp_bin,   -- 2 °C buckets: …, 14, 16, 18 …\n    AVG(rides)                 AS avg_rides\n  FROM rides_weather\n  GROUP BY temp_bin\n  ORDER BY temp_bin\n)\nSELECT temp_bin, avg_rides\nFROM t;\n.output stdout         -- restore console\n\n\n\nset title \"Average hourly rides vs. temperature\"\nset xlabel \"Temperature (°C)\"\nset ylabel \"Average rides per hour\"\nset grid\nset key off\n\n\n# smoothed curve (Cubic Spline)\nplot \"temp_vs_rides.dat\" using 1:2 smooth csplines lw 2\n\n\n\n\n\n  \n\nNormalized average hourly rides by temperature (°C), showing subscriber, customer, and total ride volume peaking near 25°C.\n\n\n\n\nThis line chart displays how bike ride frequency varies with temperature, separated by user type. Data is normalized, meaning each series is scaled between 0 and 1 to emphasize trend shape rather than absolute counts.\n\n\n\n\nX-Axis (Temperature °C):\n\nRanges approximately -10°C to +35°C.\n\nY-Axis (Normalized Average Hourly Rides):\n\nScaled 0–1 within each series.\n\nLines:\n\nDark blue: Subscribers.\nDark orange: Customers.\nBlack: Combined total average.\n\n\n\n\n\n\nAll series follow a bell-shaped curve, peaking near 25°C (~77°F).\nBelow 5°C:\n\nAll ride volume is very low.\n\n5–25°C:\n\nSharp increase in ridership, especially among customers.\n\n&gt;30°C:\n\nSlight decline in rides, more pronounced for customers.\n\n\n\n\n\n\nSubscribers: More consistent usage, reflecting commuting or necessity.\nCustomers: More sensitive to temperature, showing higher warm-weather peaks and steeper hot/cold drop-offs.\nThe normalized pattern confirms temperature is a primary driver for all user types.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTemperature Range\nCustomer Behavior\nSubscriber Behavior\nInterpretation\n\n\n\n\n&lt;5°C\nVery low ridership\nModerately low\nCold strongly suppresses casual rides\n\n\n5–25°C\nSteep increase\nModerate increase\nWarmer weather encourages use\n\n\n~25°C\nPeak ridership\nNear-peak\nIdeal riding conditions\n\n\n30-25°C\nDecline\nSlight increase\nHeat discourages casual trips\n\n\n&gt;35°C\nSharp Decline\nSharp Decline\nExtreme heat discourages all trips\n\n\n\n\n\n\nThis visualization is useful for:\n\nUnderstanding seasonal ride patterns.\nModeling demand sensitivity to weather.\nDesigning promotions and fleet strategies.\n\n\n\n\n\nRide Counts: Aggregated hourly ride counts per user type.\nTemperature: Hourly observations joined on timestamp.\nNormalization: Each series scaled to [0–1].\n\n\n\n\nggplot(normalized_df, aes(x = temp_bin, y = normalized_rides, color = user_type)) +\n  geom_line(size = 1.2) +\n  labs(\n    title = \"Normalized Avg Hourly Rides vs Temperature\",\n    x = \"Temperature (°C)\",\n    y = \"Normalized Avg Hourly Rides\",\n    color = \"User Type\"\n  ) +\n  scale_color_manual(values = c(\"subs\" = \"darkblue\", \"cust\" = \"darkorange\", \"avg\" = \"black\")) +\n  theme_minimal()\n\n\n\n\n\nFocused on duration, distance, and their distributions by user type or cluster.\n\n\n\n  \n\nRide duration distribution for customers and subscribers. Subscriber rides tend to be shorter and more consistent, while customer rides show a broader range.\n\n\n\n\nThis histogram shows how ride durations differ between Subscribers and Customers. The distribution is plotted as a count of rides by duration (in minutes), revealing distinct usage patterns between user types.\n\n\n\n\nX-Axis: Ride duration in minutes, from 0 to 200 minutes.\nY-Axis: Count of rides in each duration bin.\nBars:\n\nBlue (Subscribers): Rides tightly clustered around shorter durations.\nOrange (Customers): Rides more spread out, with a longer tail.\n\nBin Width: 2 minutes per bar.\n\n\n\n\nThis visualization compares usage patterns between customers and subscribers, showing that the two groups engage with the bike share system very differently in terms of how long they ride.\n\n\n\n\nSubscribers:\n\nMajority of rides are under 30 minutes.\nStrong peak around 10–15 minutes.\nRapid drop-off after 30 minutes, suggesting time-constrained rides (possibly to avoid overage fees).\n\nCustomers:\n\nRide duration distribution is flatter and broader.\nSignificant number of rides extend beyond 30 minutes.\nTail extends beyond 100 minutes, though with diminishing frequency.\n\n\n\n\n\n\nSubscriber rides are likely more utilitarian in nature, for example commutes or quick errands, further shaped by pricing plans that encourage shorter trips.\nCustomer rides are more exploratory or recreational, often longer and less time-sensitive.\nThe chart highlights a fundamental behavioral difference in how the system is used by each group.\n\n\n\n\n\nDuration is measured from ride start to ride end.\nRides over 200 minutes are excluded for scale clarity.\nThe bin width used here is 2 minutes, offering good resolution of short trips.\n\n\n\n\nggplot(ride_durations, aes(x = duration_min, fill = user_type)) +\n  geom_histogram(binwidth = 2, position = \"identity\", alpha = 0.6) +\n  labs(\n    title = \"Ride Duration Distribution\",\n    x = \"Duration (minutes)\",\n    y = \"Ride Count\"\n  ) +\n  scale_fill_manual(values = c(\"subscriber\" = \"#1f77b4\", \"customer\" = \"#ff7f0e\")) +\n  scale_y_continuous(labels = label_number(scale_cut = cut_short_scale())) +\n  theme_minimal()\n\n\n\n\n\n  \n\nDensity plot of ride durations by user type. Subscribers tend to take shorter trips, while customers have more varied and longer rides.\n\n\n\n\nThis density plot visualizes the distribution of ride durations for customers and subscribers, providing a smoothed alternative to histograms for easier comparison of patterns.\n\n\n\n\nX-Axis: Ride duration in minutes (0–60 min).\nY-Axis: Density estimate of ride frequency.\nLines/Areas:\n\nBlue (Subscribers): High, narrow peak at short durations.\nOrange (Customers): Flatter, broader distribution extending to longer rides.\n\nSmoothing: Kernel density estimation applied with default bandwidth.\n\n\n\n\n\nSubscribers:\n\nStrong peak centered around ~10–15 minutes.\nRapid decline beyond ~20 minutes.\nIndicates trips optimized for commuting or quick errands.\n\nCustomers:\n\nLess pronounced peak.\nLong tail extending to ~60 minutes.\nReflects more recreational or exploratory rides.\n\n\n\n\n\nThe contrasting shapes highlight different usage patterns:\n\nSubscribers prioritize efficiency and short trips, likely influenced by pricing incentives and commute needs.\nCustomers are more likely to take longer rides with varied trip purposes.\n\n\n\n\n\nTrip Data: Divvy ride records from:\n\n2013–2019 (S3 archive)\n2023–2025 (City of Chicago Data Portal)\n\n\n\n\n\n\nSelected rides where:\n\nuser_type is 0 (subscriber) or 1 (customer).\nend_time &gt; start_time.\nDuration &lt; 200 minutes.\n\nDuration computed as (end_time - start_time) / 60.\nNo filtering by station type.\n\n\n\nggplot(ride_durations, aes(x = duration_min, color = user_type, fill = user_type)) +\n     geom_density(alpha = 0.3) +\n     labs(title = \"Ride Duration Density\", x = \"Duration (minutes)\", y = \"Density\") +\n     scale_color_manual(values = c(\"subscriber\" = \"#1f77b4\", \"customer\" = \"#ff7f0e\")) +\n     scale_fill_manual(values = c(\"subscriber\" = \"#1f77b4\", \"customer\" = \"#ff7f0e\")) +\n     theme_minimal()\n\n\n\n\n\n\n  \n\nBox plot of ride durations by user type. Subscribers have shorter, more consistent trips, while customers exhibit longer and more variable ride times.\n\n\n\n\nThis box plot compares the distribution of ride durations between subscribers and customers, emphasizing differences in median, spread, and outliers.\n\n\n\n\nX-Axis: User Type (Subscriber, Customer).\nY-Axis: Ride Duration in Minutes (0–200 min).\nBoxes:\n\nShow interquartile range (25th–75th percentile).\nCentral line indicates the median ride duration.\n\nWhiskers and Outliers:\n\nWhiskers extend to ~1.5× interquartile range (IQR).\nOutliers plotted with low opacity for clarity.\n\n\n\n\n\n\nSubscribers:\n\nMedian ride duration is substantially lower.\nTight interquartile range, indicating consistent short trips.\nFewer extreme outliers.\n\nCustomers:\n\nHigher median ride duration.\nWide interquartile range, reflecting greater variability.\nSubstantial number of longer-duration outliers.\n\n\n\n\n\nThe data reinforces prior findings that:\n\nSubscribers ride mainly for commuting or quick tasks, resulting in shorter, predictable durations.\nCustomers tend to use bikes more recreationally, leading to longer, less consistent trips.\n\n\n\n\n\nTrip Data: Divvy rides from:\n\n2013–2019 (S3 archive)\n2023–2025 (City of Chicago Data Portal)\n\n\n\n\nSQL Query Used to Retrieve Data:\n# Connect to the SQLite database\ncon &lt;- dbConnect(RSQLite::SQLite(), \"caseStudy.db\")\n\n# Pull ride durations for valid subscriber/customer rides under 60 min\nride_durations &lt;- dbGetQuery(con, \"\n  SELECT\n    CASE user_type\n      WHEN 0 THEN 'subscriber'\n      WHEN 1 THEN 'customer'\n    END AS user_type,\n    (end_time - start_time) / 60.0 AS duration_min\n  FROM rides\n  WHERE user_type IN (0, 1)\n    AND end_time &gt; start_time\n    AND (end_time - start_time) &lt; 12000\n\")\n\n# Disconnect\n dbDisconnect(con)\n\n\n\nggplot(ride_durations, aes(x = user_type, y = duration_min, fill = user_type)) +\n     geom_boxplot(outlier.alpha = 0.1) +\n     labs(title = \"Ride Duration by User Type\", x = \"\", y = \"Duration (minutes)\") +\n     scale_fill_manual(values = c(\"subscriber\" = \"#1f77b4\", \"customer\" = \"#ff7f0e\")) +\n     theme_minimal()\n\n\n\n\n\n\n  \n\nRide Duration Distribution by Day Type (Customer Rides Only). This density plot shows the distribution of ride durations in minutes for non-tourist customer rides, separated by weekdays and weekends. Weekday rides tend to peak slightly earlier and higher than weekend rides, indicating a stronger presence of short utility trips during the work week.\n\n\n\n\nThis kernel density plot compares ride durations (in minutes) for non-tourist customer bike rides, distinguishing between weekday and weekend behavior. It focuses exclusively on non-subscriber riders whose trips did not start or end near tourist destinations.\n\n\n\n\nX-Axis: Ride Length (minutes), ranging from 0 to 150.\nY-Axis: Density (smoothed kernel estimation).\nColors:\n\nWeekday (Blue): Tighter concentration at shorter durations.\nWeekend (Orange): Broader peak, more long-duration variability.\n\nPlot Type: Density plot with alpha blending to show overlap.\n\n\n\n\n\nWeekday rides are shorter on average, peaking around 6–8 minutes, suggesting quick trips.\nWeekend rides peak later (~8–10 minutes) and show a longer tail.\nBoth distributions are right-skewed, confirming the majority of rides are under ~15 minutes.\n\n\n\n\n\nWeekday trips are likely task-focused (errands, commuting).\nWeekend trips are more discretionary and potentially recreational.\nThe consistent shape across days supports the idea of habitual short-distance usage among non-tourist customers.\n\n\n\n\nThis chart can be applied to:\n\nDemand modeling and pricing strategies sensitive to day type.\nUser segmentation based on duration patterns.\nPlanning operational resources around expected trip lengths.\n\n\n\n\n\nData Filtering:\n\nuser_type = customer\nExcluded known tourist stations.\n\nDuration: Calculated as (end_time - start_time) / 60.\nKernel Bandwidth: Automatically selected by ggplot2.\nRides over 150 minutes excluded to improve interpretability.\n\n\n\n\n\nData Frame: non_tourist_customer_rides_df\n\nDerived from the rides table filtered for customer trips, start/end station IDs, and date range.\nPreprocessed with timezone adjustment to Chicago local time.\n\n\n\n\n\nggplot(non_tourist_customer_rides_df, aes(x = ride_length_min, fill = week_part)) +\n  geom_density(alpha = 0.4) +\n  scale_fill_manual(values = c(\"Weekday\" = \"darkblue\", \"Weekend\" = \"darkorange\")) +\n  labs(\n    title = \"Non-Tourist Customer Ride Duration by Weekday vs Weekend\",\n    x = \"Ride Length (minutes)\",\n    fill = \"Day Type\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n  \n\nRide Duration Density for Non-Tourist Customer Trips. This smoothed density plot shows how ride lengths are distributed among customer (non-subscriber) rides that do not involve tourist stations.\n\n\n\n\nThis density plot illustrates the distribution of ride durations (in minutes) for trips taken by non-tourist customers. The visualization focuses on how frequently different ride lengths occur, highlighting the most common trip durations.\n\n\n\n\nX-Axis: Ride Length (minutes), typically ranging from 0 to ~150.\nY-Axis: Density (smoothed probability density).\nPlot Style: Single density curve filled in orange to show concentration of rides.\n\n\n\n\n\nThe distribution is sharply right-skewed, with most rides lasting under ~15 minutes.\nA clear peak appears between ~6–10 minutes, reflecting short urban trips.\nThe long tail shows occasional longer rides, although these are much less frequent.\n\n\n\n\n\nShort rides dominate customer usage patterns, consistent with quick errands or intra-neighborhood trips.\nThe lack of a secondary peak suggests relatively uniform short-duration behavior among these riders.\nLonger rides may represent recreational trips or exploratory use.\n\n\n\n\nThis visualization is useful for:\n\nUnderstanding the central tendency and spread of ride lengths.\nSupporting decisions about pricing (e.g., time-based fees).\nTailoring operational planning for short-trip dominance among customer riders.\n\n\n\n\n\nData Filtering:\n\nOnly includes customer rides.\nExcludes trips starting or ending at tourist stations.\n\nRide Length Calculation:\n\n(end_time - start_time) / 60.\n\nKernel Bandwidth: Auto-selected by ggplot2.\n\n\n\n\n\nData Frame: non_tourist_customer_rides_df\n\nCreated by filtering the rides table to include only customer trips with relevant station IDs.\nConverted timestamps to local time for consistency.\n\n\n\n\n\nggplot(non_tourist_customer_rides_df, aes(x = ride_length_min)) +\n  geom_density(fill = \"darkorange\") +\n  labs(\n    title = \"Non-Tourist Customer Ride Duration Density\",\n    x = \"Ride Length (minutes)\",\n    y = \"Density\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n  \n\nRide duration density for non-tourist loop rides taken by customers. The strong concentration of short rides suggests quick, casual trips returning to the same station.\n\n\n\n\nThis density plot shows the distribution of ride lengths (in minutes) for customer rides that start and end at the same station. Known as loop rides. Also trips involving tourist stations are excluded.\n\n\n\n\nX-Axis: Ride Length (minutes), ranging from 0 to 150.\nY-Axis: Density (area under curve sums to 1).\nFill Color: Orange shading under the curve.\n\n\n\n\n\nClear peak between 3–7 minutes, indicating many short loop trips.\nSteady decline in frequency as ride durations increase.\nVery long rides (over ~60 minutes) are rare but do exist.\n\n\n\n\n\nThe strong skew toward short rides reinforces the idea that many loop trips are quick, casual uses, possibly for errands or brief leisure.\nThe lack of a secondary peak suggests there is not a distinct long-ride group among non-tourist customers.\n\n\n\n\n\nThis subset was filtered to include only loop rides (start_station_id == end_station_id) and to exclude known tourist stations.\nDurations are calculated as ride end time minus start time, expressed in minutes.\nSmoothed density estimation was applied rather than a histogram.\n\n\n\n\nUnfortunately, the exact R code could not be recovered.\nHowever, it likely resembled:\nggplot(loop_rides_non_tourist_df, aes(x = ride_length_min)) +\n  geom_density(fill = \"orange\", alpha = 0.6) +\n  labs(\n    title = \"Non-Tourist Customer Ride Duration for Loop Rides\",\n    x = \"Ride Length (minutes)\",\n    y = \"Density\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n  \n\nRide Duration vs. Station Distance (Non-Tourist Customer Rides) This scatterplot displays the relationship between ride length and distance between stations. While longer distances generally correspond to longer durations, many short-distance rides also exhibit long durations, suggesting varied usage patterns. A linear reference line highlights the lower boundary of likely direct trips.\n\n\n\n\nThis scatterplot shows the relationship between ride duration and station-to-station distance for non-tourist customer rides. A linear reference line illustrates the general trend.\n\n\n\n\nX-Axis: Distance Between Stations (km), 0–30.\nY-Axis: Ride Duration (minutes), 0–150.\nPoints: Green dots for individual rides.\nLine: Blue linear fit (least squares).\n\n\n\n\n\nDense cluster of short rides with low durations.\nHigh variance: many short trips took long times.\nSparse long-distance trips with a broad range of durations.\nBlue line suggests the fastest plausible rides for a given distance.\n\n\n\n\n\nClear positive correlation between distance and time.\nWide variability suggests many rides included stops, detours, or leisurely pacing.\n\n\n\n\n\nIdentify outlier usage patterns.\nUnderstand trip efficiency and routing behavior.\nInform operational planning for short vs. long trips.\n\n\n\n\n\nRide Data: Non-tourist customer rides filtered to exclude trips that start and end at the same station.\nStation Coordinates: Merged from cleaned station dataset(s).\nTime Frame: 2023 onward, as defined in the project scope.\n\n\n\n\nlibrary(ggplot2)\nggplot(non_loop_rides_df, aes(x = distance_km, y = ride_length_min)) +\n  geom_point(alpha = 0.05, color = \"darkgreen\") +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"blue\") +\n  labs(\n    title = \"Ride Duration vs. Station Distance\",\n    x = \"Distance Between Stations (km)\",\n    y = \"Ride Length (minutes)\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n  \n\nDistribution of ride durations for non-tourist customer trips. The histogram shows that the vast majority of trips are short in duration, tapering off beyond 20 minutes.\n\n\n\n\nThis histogram depicts the distribution of ride durations (in minutes) for casual rides that start and end outside tourist areas. Each bar represents the count of trips falling within a 5-minute interval.\n\n\n\n\nX-Axis: Ride Length (minutes), binned in 5-minute increments.\nY-Axis: Number of rides in each duration bin.\nBars: Filled in dark orange with white borders for clarity.\n\n\n\n\n\nThe distribution is heavily right-skewed, with most rides lasting under ~15–20 minutes.\nA clear peak appears in the 0–5 minute bin, highlighting frequent short trips.\nFrequency decreases rapidly as duration increases.\nOccasional longer trips are visible in the long tail.\n\n\n\n\n\nCasual riders overwhelmingly use the system for short trips.\nThe lack of secondary peaks suggests uniform trip purposes, likely errands or last-mile transport.\nLonger rides may reflect recreational or exploratory use, but they are relatively rare.\n\n\n\n\nThis chart is helpful for:\n\nInforming policies about time-based pricing tiers.\nUnderstanding baseline trip durations among casual riders.\nSupporting planning of rebalancing or maintenance cycles.\n\n\n\n\n\nData Filtering:\n\nIncludes only customer rides.\nExcludes tourist station trips.\n\nRide Length Calculation:\n\n(end_time - start_time) / 60.\n\nBin Width:\n\n5 minutes.\n\n\n\n\n\n\nData Frame: non_tourist_customer_rides_df\n\nFiltered from the rides table by user type and station criteria.\n\n\n\n\n\nggplot(non_tourist_customer_rides_df, aes(x = ride_length_min)) +\n  geom_histogram(binwidth = 5, fill = \"darkorange\", color = \"white\") +\n  labs(\n    title = \"Non-Tourist Customer Ride Duration Distribution\",\n    x = \"Ride Length (minutes)\",\n    y = \"Number of Rides\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n  \n\nRide count by station-to-station distance for non-tourist customer trips, highlighting common trip lengths in the 0–2 km range.\n\n\n\n\nThis bar chart shows the number of non-tourist customer rides grouped by the straight-line distance between the starting and ending stations. The visualization makes clear which distance ranges are most commonly traveled.\n\n\n\n\nX-Axis: Distance between stations (km), from 0 to 10 km.\nY-Axis: Number of rides in each distance bin (up to ~60,000 rides).\nBars:\n\nFilled in dark orange.\nLabeled at notable peaks for emphasis.\n\n\n\n\n\n\nPrimary Peaks:\n\n~0.85 km: 58,268 rides.\n~1.35 km: 54,563 rides.\n\nSharp drop-off beyond 2 km, with very few rides exceeding 5 km.\nThe shape strongly suggests most casual rides occur within a short radius.\n\n\n\n\n\nShort trips dominate non-subscriber usage, likely reflecting quick local errands or last-mile transit.\nPeaks may correspond to popular station pairs located 3–8 blocks apart.\nThe pattern mirrors the density distribution of unique station-to-station distances, but here each ride contributes equally to counts.\n\n\n\n\n\nRide Records: Non-subscriber rides starting after 2023-01-01.\nFilters Applied:\n\nExcluded loop rides (start station = end station).\nLimited to non-tourist stations.\nCalculated distance using Haversine formula between station coordinates.\nIncluded only trips with distances ≤10 km.\n\n\n\n\n# Bin and count rides by distance\nride_counts_by_distance &lt;- non_loop_rides_df %&gt;%\n  filter(distance_km &lt;= 10) %&gt;%\n  mutate(distance_bin = round(distance_km / 0.1) * 0.1) %&gt;%\n  count(distance_bin)\n\n# Plot\nggplot(ride_counts_by_distance, aes(x = distance_bin, y = n)) +\n  geom_col(fill = \"darkorange\", width = 0.08) +\n  geom_text(\n    data = filter(ride_counts_by_distance, distance_bin %in% c(0.85, 1.35)),\n    aes(label = paste0(\"Peak: \", distance_bin, \" km\\n\", scales::comma(n))),\n    vjust = -0.5,\n    size = 3.5\n  ) +\n  labs(\n    title = \"Non-Tourist Customer Ride Count by Station-to-Station Distance\",\n    x = \"Distance Between Stations (km)\",\n    y = \"Number of Rides\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n  \n\nDistribution of station-to-station distances for non-tourist customer rides. Most trips are under 5 km, confirming primarily short-distance usage.\n\n\n\n\nThis density plot visualizes the distribution of station-to-station distances for rides taken by customer (non-subscriber) riders that do not involve tourist stations. The x-axis represents the distance in kilometers, and the y-axis shows the relative density of rides occurring at each distance.\n\n\n\n\nX-Axis: Distance Between Stations (km), ranging from 0 to ~30 km\n\nY-Axis: Relative probability density of rides at each distance\n\nPlot Style: Smoothed density plot (not a histogram), area under the curve normalized to 1\n\n\n\n\nThis chart highlights the typical distance casual riders travel between stations when tourist hotspots are excluded, revealing patterns in local, everyday bike-share use.\n\n\n\n\nPeak around 1 km: Most rides are short hops between closely spaced stations.\nSteep decline: Density drops quickly after ~5 km.\nLong tail: A small number of rides extend past 10 km.\nVery few extreme values: Rides over 20 km are rare outliers.\n\n\n\n\n\nThe pronounced twin peaks around 1 km suggests short-distance, utility-oriented trips, like errands or first-/last-mile commuting.\nThe long but thin tail implies that while occasional longer rides occur, they are uncommon among non-tourist customer riders.\nThe lack of a multiple wide spaced peaks differentiates this distribution from tourist-heavy patterns, which often show multiple modes due to popular routes.\n\n\n\n\n\nDistance Calculation: Great-circle distance (Haversine formula) computed between station coordinates.\nFiltering: Tourist stations excluded via station ID filtering.\nDensity Scaling: The y-axis shows density, not raw counts. The area under the curve sums to 1.\n\n\n\n\nggplot(non_loop_rides_df, aes(x = distance_km)) +\n  geom_density(fill = \"darkorange\", alpha = 0.6) +\n  labs(\n    title = \"Non-Tourist Customer Distribution of Station-to-Station Distances\",\n    x = \"Distance Between Stations (km)\",\n    y = \"Density\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n  \n\nRide Distance Distribution by Duration Cluster (Customer Rides Only) This density plot compares ride distances for non-tourist, non-loop customer rides, grouped into clusters based on ride duration. Short-duration rides are tightly concentrated around 1–2 km, medium-duration rides cover a broader 2–6 km range, and long-duration rides extend further, reflecting distinct usage behaviors within the same user group.\n\n\n\n\nThis kernel density plot illustrates the distribution of ride distances (in kilometers) for non-tourist, non-loop customer rides, broken out by ride duration clusters labeled Short, Medium, and Long. Clustering these customer rides by duration helps uncover distinct usage patterns, such as short errand-like trips versus longer recreational journeys, without needing to segment riders further or rely on additional metadata.\n\n\n\n\nX-Axis (Distance in km):\n\nRanges from 0 to 10 km.\nRepresents the straight-line distance between start and end stations (minimum possible distance). Note: this is not actual path distance.\n\nY-Axis (Density):\n\nProbability density of ride distances within each cluster.\nHigher peaks = more common distances.\n\nCluster Colors:\n\nShort (Blue) – sharp peak around 1–2 km.\nMedium (Green) – broad distribution across ~2.5–6 km.\nLong (Red/Pink) – flatter spread across 3–10 km.\n\n\n\n\n\n\nShort rides:\n\nHighest density overall.\nStrong preference for distances under 3 km.\n\nMedium rides:\n\nBroadest range of distances.\nTransitional usage pattern overlapping short and long rides.\n\nLong rides:\n\nLess frequent but cover widest distance range.\n\n\n\n\n\n\nShort-duration trips are likely local, last-mile or neighborhood errands.\nMedium rides reflect mixed use: commuting and recreation.\nLong rides are more destination-focused or leisurely.\n\n\n\n\nThis chart helps:\n\nUnderstand non-tourist customer ride behavior segmented by trip duration.\nSupport targeted strategies for operations and pricing.\nInform planning of infrastructure, such as dock placement or service areas.\n\n\n\n\n\nRide Records: Filtered to exclude subscriber rides, tourist stations, and loop rides (rides that start and end at the same station).\nDistance Calculation: Haversine distance between station coordinates.\n\n\n\nggplot(non_loop_rides_df, aes(x = distance_km, fill = duration_cluster)) +\n  geom_density(alpha = 0.5) +\n  scale_fill_manual(values = c(\n    \"Short\" = \"blue\",\n    \"Medium\" = \"green\",\n    \"Long\" = \"red\"\n  )) +\n  labs(\n    title = \"Non-Tourist, Non-Loop Customers Ride Distance (km) Distribution by Ride Duration Cluster\",\n    x = \"Distance (km)\",\n    y = \"Density\",\n    fill = \"Duration Cluster\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n  \n\nLoop ride durations among non-tourist customers show a consistently skewed distribution, regardless of time of day or whether the ride occurred on a weekday or weekend.\n\n\n\n\nThis visualization shows how loop ride durations vary by hour of day and by whether the ride occurred on a weekday or weekend. Each subplot represents a single hour of the day, illustrating patterns of ride duration frequency across time.\n\n\n\n\nX-Axis: Ride Length (minutes)\nY-Axis: Ride Count\nFaceting: 24 panels, each corresponding to an hour of day (0–23)\nColor Encoding: Fill colors differentiate combinations of weekday/weekend and hour\nPlot Type: Histogram with bin width = 1 minute\n\n\n\n\n\nRides are heavily skewed toward short durations in all panels.\nMost rides fall under 10–15 minutes, regardless of hour.\nMidday and afternoon periods show slightly higher total counts.\nNo clear hour shows a major deviation in distribution shape.\n\n\n\n\n\nLoop rides are generally short-duration recreational trips, rather than commutes.\nThe lack of time-of-day variation suggests consistent rider behavior.\nThe similarity between weekday and weekend distributions reinforces this interpretation.\n\n\n\n\nThis chart supports:\n\nService planning: anticipating typical ride lengths for rebalancing.\nUser engagement strategies: targeting short-trip promotions.\nOperational decisions: confirming the limited variability in loop ride duration.\n\n\n\n\n\nData limited to rides starting and ending at the same station (loop rides).\nOnly non-tourist stations were included.\nBin width of 1 minute chosen for granularity.\nDuration computed as end_time - start_time in minutes.\n\n\n\n\n\nDatabase Table: rides\nFiltering Criteria:\n\nstart_station_id = end_station_id\nuser_type = customer\nExcluded known tourist stations\n\nTime Zone: Converted to Chicago local time\n\n\n\n\nggplot(loop_rides_non_tourist, aes(x = ride_length_min, fill = interaction(week_part, hour_local))) +\n  geom_histogram(binwidth = 1, position = \"identity\", alpha = 0.5) +\n  facet_wrap(~ hour_local, ncol = 4) +\n  labs(\n    title = \"Loop Ride Length Distribution by Week Part and Time of Day\",\n    x = \"Ride Length (minutes)\",\n    y = \"Ride Count\",\n    fill = \"Week/Time\"\n  ) +\n  theme_minimal()\n\n\n\n\n\nThis section presents spatial insights into non-tourist customer rides, highlighting both where trips originate and terminate (station popularity) and how far riders typically travel between stations. Together, these views illustrate usage density and trip distances across the system.\n\n\n\n  \n\nTop 25 stations (excluding tourist locations) ranked by total customer ride volume. Bars highlight the most frequently used start locations among casual riders.\n\n\n\n\nThis horizontal bar chart displays the 25 non-tourist stations with the highest number of customer rides. Each bar represents a single station, ranked from lowest to highest.\n\n\n\n\nX-Axis: Station names (rotated vertically by using coord_flip()).\nY-Axis: Number of customer rides originating at each station.\nBars:\n\nColored steel blue.\nSorted so that the most-used stations appear at the top of the chart.\n\n\n\n\n\n\nThe highest-ranking stations have significantly more rides than those near the bottom of the top 25.\nUsage distribution shows a steep drop-off after the first few most popular stations.\nThis pattern suggests localized hubs of casual rider activity outside major tourist zones.\n\n\n\n\n\nNon-tourist stations can still accumulate large ride volumes, likely reflecting:\n\nProximity to residential neighborhoods.\nAccess to transit nodes or commercial areas.\nPopularity among local users for short trips and errands.\n\n\n\n\n\n\nInput Table: Rides table in caseStudy.db.\nFilters Applied:\n\nOnly rides with user_type = 1 (customers).\nStart stations excluding predefined tourist station IDs.\nGrouped and aggregated ride counts by start station.\nJoined with station metadata to retrieve station names.\n\n\n\n\n\nggplot(top_non_tourist_stations_named, aes(\n   x = reorder(name, customer_ride_count),\n   y = customer_ride_count\n   )) +\n   geom_col(fill = \"steelblue\") +\n   coord_flip() +\n   labs(\n     title = \"Top 25 Non-Tourist Stations by Customer Ride Count\",\n     x = \"Station\",\n     y = \"Customer Rides\"\n) +\ntheme_minimal()\n\n\n\n\n\n  \n\nDistribution of station-to-station distances for non-tourist customer rides under 10 km. Distinct peaks highlight preferred trip lengths for local travel.\n\n\n\n\nThis density plot visualizes the distribution of station-to-station distances under 10 km for rides taken by customer (non-subscriber) riders that did not involve tourist stations. The focus on shorter trips reveals finer patterns in local travel behavior.\n\n\n\n\nX-Axis: Distance Between Stations (km), ranging from 0 to 10 km\n\nY-Axis: Relative probability density of rides occurring at each distance\n\nPlot Style: Smoothed density plot with area normalized to 1\n\nAnnotations: Peaks labeled to highlight the most common trip lengths\n\n\n\n\nBy excluding longer trips (&gt;10 km), this chart provides a clearer view of the most typical ride distances, supporting planning and operational decisions about station placement and bike redistribution.\n\n\n\n\nPrimary Peak (0.86 km): The most common ride length, suggesting very short intra-neighborhood trips.\nSecondary Peak (1.29 km): Another frequently observed trip length, likely representing local errands or commutes between adjacent districts.\nSteep Decline: Density decreases sharply beyond 4–5 km.\nAbsence of Long Tail: Filtering out longer rides eliminates noise from infrequent long-distance trips.\n\n\n\n\n\nShort-Distance Focus: The dual peaks reinforce that casual users primarily rely on the system for short urban journeys.\nPotential Trip Typologies:\n\n~1 km: Last-mile or neighborhood-scale trips.\n~2–3 km: Short errands or transit connections.\n\nThe low density beyond 5 km indicates that even non-tourist customers rarely use the bikes for longer travel.\n\n\n\n\n\nDistance Calculation: Computed with the Haversine formula between station coordinates.\nFiltering: Only trips with distance ≤10 km are included.\nAnnotations: Peaks were identified programmatically and labeled on the chart.\nDensity Scaling: Y-axis reflects probability density, not counts.\n\n\n\n\nggplot(non_loop_rides_df %&gt;% filter(distance_km &lt;= 10), aes(x = distance_km)) +\n  geom_density(fill = \"darkorange\", alpha = 0.6) +\n  geom_point(data = top_peaks, aes(x = x, y = y), color = \"gray\", size = 2) +\n  geom_text(\n    data = top_peaks,\n    aes(x = x, y = y, label = paste0(\" \", round(x, 2), \" km\")),\n    angle = 25,\n    vjust = 0,\n    hjust = 0,\n    size = 3.5,\n    color = \"black\"\n  ) +\n  labs(\n    title = \"Non-Tourist Customer Distribution of Station-to-Station Distances (≤10 km)\",\n    x = \"Distance Between Stations (km)\",\n    y = \"Density\"\n  ) +\n  theme_minimal()\n\n\n\n\n\nInsights about bikes themselves and system-level metrics.\n\n\n\n  \n\nAverage daily rides by bike type and user type after the introduction of electric bikes and scooters. Classic bikes remain dominant among subscribers, while electric modes see substantial adoption by both user groups.\n\n\n\n\nThis bar chart displays the average number of daily rides by bike type, grouped by user type (Subscriber vs. Customer), for the period after the introduction of electric bikes and scooters.\n\n\n\n\nX-Axis (Bike Type):\n\nclassic_bike\ndocked_bike\nelectric_bike\nelectric_scooter\n\nY-Axis (Average Rides per Day):\n\nRanges from 0 to over 4,500 rides per day.\n\nColor Legend:\n\nRed = Subscriber\nTeal = Customer\n\n\n\n\n\n\nClassic Bikes:\n\nMost used overall.\nSubscribers (red) significantly outnumber Customers in ride volume.\n\nDocked Bikes:\n\nVery low usage overall.\nOnly Customers use docked bikes in this dataset. Subscribers appear not to use docked bikes.\n\nElectric Bikes:\n\nPopular among both user types.\nSubscribers still dominate, but the Customer share is substantial.\n\nElectric Scooters:\n\nSlightly more popular with Customers than Subscribers.\nTotal volume is lower than bikes but non-trivial.\n\n\n\n\n\n\nSubscriber Preference:\n\nStrongly favors classic and electric bikes.\nLikely reflects commuting and utilitarian travel patterns.\n\nCustomer Preference:\n\nMore evenly spread across bike types.\nHigher share of docked bike and scooter usage, suggesting casual or occasional use.\n\nModal Shift:\n\nThe presence of electric modes (bike and scooter) introduces significant usage from both user groups, possibly pulling some traffic away from classic bikes.\n\n\n\n\n\nThis visualization supports:\n\nInfrastructure planning (e.g., expansion of electric charging or docking stations),\nMarketing strategy (targeting modal preferences by user type),\nEvaluating post-launch success of electric mobility options.\n\n\n\n\n\nQuery to Load Data into R:\n\npost_electric_rides_df &lt;- dbGetQuery(con, \"SELECT\n   DATE(start_time, 'unixepoch') AS ride_date,\n   user_type,\n   bike_type,\n   COUNT(*) AS ride_count,\n   AVG((end_time - start_time) / 60.0) AS avg_duration_minutes\nFROM rides\nWHERE start_time &gt;= strftime('%s', '2023-01-01') -- first e-bike appeared\nGROUP BY ride_date, user_type, bike_type;\")\n\n- **Data Transformation in R:**\n\ndaily_avg_df &lt;- post_electric_rides_df %&gt;%\n  group_by(user_type, bike_type) %&gt;%\n  summarise(\n    avg_rides_per_day = mean(ride_count),\n    .groups = \"drop\"\n  )\n\nR Code Used to Generate Chart:\n\nggplot(daily_avg_df, aes(\n     x = bike_type,\n     y = avg_rides_per_day,\n     fill = fct_recode(as.factor(user_type),\n                       \"Subscriber\" = \"0\",\n                       \"Customer\" = \"1\")\n )) +\n     geom_bar(stat = \"identity\", position = \"dodge\") +\n     labs(\n         title = \"Average Daily Rides by Bike Type and User Type (Post-Electric Launch)\",\n         x = \"Bike Type\",\n         y = \"Average Rides per Day\",\n         fill = \"User Type\"\n     ) +\n     theme_minimal()\n\n\n\n\n\n  \n\nDistribution of total ride counts per bike across the fleet, highlighting underused outliers and high-mileage bikes.\n\n\n\n\nThis histogram visualizes the distribution of total ride counts per bike, grouped into buckets of 100 rides each. It provides insight into how evenly or unevenly individual bikes are used over the dataset’s timespan.\n\n\n\n\nX-Axis (Ride Count Range):\n\nLabeled in bins of 100 rides (e.g., 0-99, 100-199, …, 5500-5599).\nRepresents the total number of rides associated with each bike.\n\nY-Axis (Number of Bikes):\n\nIndicates how many bikes fall within each ride count range.\nPeaks near 300 bikes in the most frequently occurring bins.\n\n\n\n\n\n\nBars:\n\nColored purple with black borders.\nUniform width, covering each 100-ride range.\nDistribution forms a roughly symmetric bell-shaped curve centered around the 2700–3499 range.\n\n\n\n\n\n\nLow-end Outliers:\n\nA noticeable spike in the 0–99 bin (~130 bikes), suggesting a set of bikes with extremely limited or no use.\nMay include stolen, damaged, or new bikes added near the end of the data collection period.\n\nCore Distribution:\n\nThe majority of bikes (~200–280 per bin) fall between 2200–3999 rides.\nIndicates typical usage patterns and operational consistency.\n\nHigh-end Tail:\n\nUsage drops off steadily after ~4000 rides per bike.\nVery few bikes exceed 5000 rides.\n\n\n\n\n\n\nThe chart implies a relatively well-utilized fleet with a normal distribution centered around ~3000 rides per bike.\nThe left-side spike at 0–99 highlights potential outliers worth investigating:\n\nUnderused bikes,\nPossible malfunctions,\nSeasonal deployments,\nRecent fleet additions.\n\nThe right tail shows some high-mileage bikes that may be candidates for maintenance or replacement soon.\n\n\n\n\nThis visualization is valuable for:\n\nFleet maintenance planning (identify overused/underused bikes),\nLifecycle analysis (detect uneven distribution of wear),\nDeployment strategy (optimize rotation or redistribution).\n\n\n\n\nrides table in SQLite, queried for bike usage counts grouped by bike_id.\n\n\n.headers on\n.mode csv\n.output bike_ride_buckets.csv\nWITH bucketed AS (\n  SELECT\n    (ride_count / 100) * 100 AS bucket_start,\n    COUNT(*) AS bike_count\n  FROM (\n    SELECT bike_id, COUNT(*) AS ride_count\n    FROM rides\n    WHERE bike_id IS NOT NULL\n    GROUP BY bike_id\n  )\n  GROUP BY bucket_start\n  ORDER BY bucket_start\n)\nSELECT\n  bucket_start,\n  bucket_start + 99 AS bucket_end,\n  bike_count\nFROM bucketed;\n.output stdout\n\n\n\nset datafile separator \",\"\nset terminal pngcairo size 1000,600 enhanced font 'Verdana,10'\nset output 'bike_ride_bucket_histogram.png'\n\nset title \"Distribution of Ride Counts per Bike\"\nset xlabel \"Ride Count Range\"\nset ylabel \"Number of Bikes\"\nset style fill solid 1.0 border -1\nset boxwidth 0.9\nset grid ytics\nunset key\nset xtics rotate by -45\n\n# Format x-tics with the bucket label, like \"0–99\"\nplot 'bike_ride_buckets.csv' using ($0):3:xtic(strcol(1).\"-\".strcol(2)) with boxes\n\n\n\n\n\n\nWhere paths are not balanced in both directions by user type.\n\n\n\n  \n\nTop 20 most asymmetric ride paths by user type. Asymmetry ratio is calculated as the proportion of rides taken in one direction relative to the total rides between two stations. Distinct path preferences emerge between customers and subscribers.\n\n\n\n\nThis side-by-side horizontal bar chart displays the 20 most directionally imbalanced station pairs for each user type: customers and subscribers. These paths have the highest asymmetry ratios, indicating strong one-way usage patterns.\n\n\n\n\nX-Axis: Asymmetry Ratio (ranging up to ~1.0).\nY-Axis: Station pair labels (listed within each bar).\nPanels:\n\nLeft: Top asymmetric paths for Customers.\nRight: Top asymmetric paths for Subscribers.\n\n\n\n\n\n\nCustomers:\n\nTop asymmetric paths often involve major downtown locations such as Canal St, Clinton St, and Wacker Dr.\nPatterns likely reflect tourism, drop-offs, or infrequent return trips.\n\nSubscribers:\n\nAsymmetries cluster around recreational and waterfront areas such as Columbus Dr, Streeter Dr, Lake Shore Dr, Millennium Park, and McCormick Place.\nPatterns suggest consistent commuting or recreational flows.\n\n\n\n\n\n\nAsymmetry Ratio:\n\nDefined as: &gt; rides in one direction / total rides between the two stations.\nValues close to 1.0 mean most trips occur in a single direction.\n\nBehavioral Insight:\n\nCustomer asymmetry is oriented toward downtown ad hoc travel.\nSubscriber asymmetry is more tied to commuting and lakefront destinations.\n\nComparison:\n\nEven when overlapping in geography, the dominant flow directions and endpoints differ between user groups.\n\n\n\n\n\nThis visualization supports:\n\nIdentifying rebalancing needs.\nTargeting incentive programs to encourage return trips.\nUnderstanding travel patterns for infrastructure planning and operational improvements.\n\n\n\n\n\n\n  \n\nTop 20 bike-share station pairs with the most directional imbalance by user type. Customers show high asymmetry around central business district hubs, while subscriber asymmetries often reflect lakefront access or commuter endpoint behavior.\n\n\n\n\nThis chart shows the 20 most directionally imbalanced station pairs for customers and subscribers, ranked by asymmetry ratio. Each bar represents a station-to-station path where trips predominantly flow in one direction.\n\n\n\n\nX-Axis: Asymmetry Ratio (0.0 to ~0.7)\n\nA higher value indicates more strongly one-way flows.\n\nY-Axis: Station pairs, labeled inside the bars.\nPanels:\n\nOne for each user type (Customer and Subscriber).\n\n\n\n\n\n\nCustomers:\n\nHigh asymmetry centered around central business district stations and transit hubs.\n\nSubscribers:\n\nStrong asymmetry toward lakefront or edge-of-network destinations.\n\nContrast:\n\nCustomer asymmetry is urban-core focused.\nSubscriber asymmetry suggests recreation or commute endpoints.\n\n\n\n\n\n\nAsymmetry highlights operational imbalances and user behavior patterns.\nPaths with high one-way traffic often require rebalancing or targeted incentives.\n\n\n\n\nSupports:\n\nRebalancing plans.\nInfrastructure decisions.\nTargeted marketing to address directional demand.\n\n\n\n\nggplot(asym_top, aes(x = asymmetry_ratio, y = reorder(path_label, asymmetry_ratio))) +\n    geom_col(fill = \"darkblue\") +\n    geom_text(\n        aes(label = path_label),\n        x = 0.01,                   \n        hjust = 0,                  \n        color = \"white\",\n        size = 2.7,\n        fontface = \"plain\"\n    ) +\n    facet_wrap(~ user_type_label, scales = \"free_y\") +\n    labs(\n        title = paste(\"Top\", top_n, \"Most Asymmetric Paths by User Type\"),\n        x = \"Asymmetry Ratio\", \n        y = NULL\n    ) +\n    coord_cartesian(xlim = c(0, max(asym_top$asymmetry_ratio) + 0.10)) +\n    theme_minimal(base_size = 11) +\n    theme(\n        plot.title = element_text(hjust = 0.1),\n        axis.text.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        panel.grid.major.y = element_blank()\n    )\n\n\n\n\n\n  \n\nTop 20 bike-share station pairs with the most directional imbalance by user type. Customers show high asymmetry around central business district hubs, while subscriber asymmetries often reflect lakefront access or commuter endpoint behavior.\n\n\n\n\nTitle: Top 20 Most Asymmetric Paths by User Type X-Axis: Asymmetry Ratio (from 0.0 to ~0.7) Panels: Two side-by-side bar charts\n\nLeft panel: Top asymmetric paths for Customers\nRight panel: Top asymmetric paths for Subscribers\n\n\n\n\n\nAsymmetry Ratio\n\nA value approaching 1 indicates heavy one-way usage between a pair of stations. Rides commonly occur in one direction but rarely the other.\n\nCustomer Patterns\n\nConcentrated near transit stations and central business districts. Reflect unidirectional use, possibly due to nearby public transit hubs, tourism drop-offs, or lack of return trips.\n\nSubscriber Patterns\n\nFocus on lakefront access (e.g., Streeter Dr, Lake Shore Dr) and commuter endpoints. Suggest consistent commuting flows where riders may use other transportation methods for return trips (e.g., walking or transit).\n\nContrast\n\nWhile customers show asymmetry in the urban core, subscribers show it around recreational or edge areas.\n\n\n\n\n\n\n\n\n\n\n\n  \n\nDivvy Stations in QGIS\n\n\nThis is a screen shot of the Divvy Stations plotted in QGIS. This was found in Divvy_Stations_2013.shp.zip which was included in the Divvy_Stations_Trips_2013.zip file.\nThis plot was not used as part of the case study.\n\n\n\n\n\n  \n\nQGIS screenshot\n\n\nThis is a screenshot of the Divvy_Stations_2013 table taken from QGIS\nThis screenshot was not used in the case study it is included only for completeness and to support narrative details."
  },
  {
    "objectID": "viz/visualizations.html#interactive-visuals",
    "href": "viz/visualizations.html#interactive-visuals",
    "title": "Visualizations",
    "section": "",
    "text": "FIGCAPTION\n\n\nThis interactive map of the top 50 stations includes the top 50 stations by number of subscriber rides and the top 50 stations by number of customer rides. We break from the normal color scheme as more contrast was required due to the preexisting colors in the map. So the dots for subscriber stations rendered in blue and the dots for customer stations rendered in red. The dots for stations are offset slightly to avoid one dot obscuring the other for the cases where the station is in the top 50 for both subscribers and customers. This is accomplished by using a data frame where the location of the stations is offset. The size of the dots is scaled by the total number of rides (subscriber or customer as appropriate), so that stations with more rides are larger dots.\nIt was created in R using Leaflet.\n\n\n\n\n  \n\nThis interactive map shows the top 10 most frequently traveled station-to-station ride paths for the following rider groups; All Riders, Subscribers, or Customers. Line colors indicate ride volume, revealing distinct spatial usage patterns: casual riders concentrate near the lakefront and tourist zones, while subscribers follow more distributed, commuter-aligned routes. Click to open the full visualization in Tableau.\n\n\n\n\nThis interactive map displays the top 10 most common ride paths (station-to-station pairs) for a selected user group: All Riders, Subscribers, or Customers.\n\nEach line represents a frequently traveled path, regardless of direction.\nLine color corresponds to ride volume between those stations.\nUsers can filter by rider type using the control panel on the right.\n\nThis visualization highlights differences in spatial behavior between groups:\n\nCustomers tend to use routes near the lakefront and popular tourist zones.\nSubscribers favor more distributed, commuter-oriented paths.\n\n“Station usage differs substantially by rider type, but not in the expected way.”\n\n  \n\nComparison of Customer vs. Subscriber Rides by Path. This horizontal bar chart visualizes the total number of rides by customer type (subscribers in blue, casual customers in orange) for the top ride paths. It highlights differences in route preferences and ride volumes between the two user segments.\n\n\n\n\n\nThis histogram compares ride volumes for station-to-station pairs with at least 10,000 rides, of which there are 88, sorted by total combined ride count.\nEach bar shows the ride count split between Subscribers (dark blue) and Customers (orange) for a specific path.\nThis view emphasizes which ride paths are dominated by Subscribers (often commuter routes) versus those with more balanced or Customer-heavy traffic.\n\n  \n\nFIGCAPTION\n\n\n\n\n\nThis histogram visualizes the distribution of ride paths (station-to-station pairs) by their subscriber ratio, defined as the proportion of rides taken by Subscribers versus Customers for each path.\n\nThe dataset includes all the bi-directional path with at least 10,000 rides. There are 88 such paths.\nEach path name represents one bi-directional path, with the length of the bar corresponding to the subscriber ratio (from 0% subscriber to 100%).\n\nThe chart can be sorted by:\n\nPath name (alphabetical)\nSubscriber ratio (to identify Customer-heavy or Subscriber-heavy routes)\n\nThis visualization reveals important asymmetries in how ride paths are used:\n\nPaths with very low subscriber ratios often correspond to tourist-heavy or leisure routes.\nPaths with high subscriber ratios are more likely to represent commuting corridors or utilitarian rides between residential and business areas."
  },
  {
    "objectID": "viz/visualizations.html#static-visualizations",
    "href": "viz/visualizations.html#static-visualizations",
    "title": "Visualizations",
    "section": "",
    "text": "Rides analyzed across time dimensions like hour, day, month, or season.\n\n\n\n  \n\nHourly distribution of customer rides originating from non-tourist stations, showing peak activity in the late afternoon.\n\n\n\n\nThis bar chart shows how customer rides at non-tourist stations vary across the 24-hour day. By excluding rides from stations frequently used by tourists, this visualization highlights local usage patterns, such as commuting or neighborhood trips. Excluding sightseeing or visitor behavior as much as possible.\n\n\n\n\nX-Axis: Hour of day (0 = midnight, 23 = 11 PM)\nY-Axis: Number of rides started in each hour\nBars: Hourly ride counts by customer users at non-tourist stations\n\n\n\n\nTo identify when non-tourist customer rides occur most frequently and to reveal possible commuter or routine daily patterns among local riders.\n\n\n\n\nEarly morning (0–5 AM): Minimal activity.\nMorning ramp-up (6–11 AM): Gradual increase as the day progresses.\nMidday plateau (12–15 PM): Consistent moderate ride volume.\nPeak period (16–18 PM): Pronounced spike with the highest volume around 17:00.\nEvening taper (19–23 PM): Gradual decline but still notable usage into the night.\n\n\n\n\nThe clear peak around 5 PM suggests:\n\nAfter work recreation or errands.\nPossible casual commuting behavior.\n\nThe modest morning volume and sustained midday usage indicate that, while some rides may be utilitarian, many are likely discretionary trips by locals.\n\n\n\n\nTourist stations were excluded based on a curated station ID list.\nRides filtered to customer user type.\nAll timestamps converted to Chicago local time.\nBin width: 1 hour per bar.\n\n\n\n\n\n\n\nPre-processed dataframe rides_by_hour_weekpart\n\nFiltered by:\n\nNon-tourist station IDs\ncustomer user type\ntime converted to local time\n\n\n\n\n\n\nggplot(rides_by_hour_weekpart, aes(x = hour, y = ride_count, fill = week_part)) +\n    geom_col(position = \"dodge\") +\n    labs(\n        title = \"Non-Tourist Customer Rides by Hour of Day\",\n        subtitle = \"Adjusted to Chicago Local Time\",\n        x = \"Hour of Day\",\n        y = \"Ride Count\",\n        fill = \"Day Type\"\n    ) +\n    scale_x_continuous(breaks = 0:23) +\n    theme_minimal()\n\n\n\n\n\n\n\n  \n\nTotal customer rides per day of week at non-tourist stations, highlighting the clear weekend peaks in ridership.\n\n\n\n\nThis bar chart displays the total number of customer rides at non-tourist stations, grouped by day of the week. By focusing on non-tourist stations, the visualization emphasizes local usage patterns rather than rides taken by visitors.\n\n\n\n\nX-Axis: Day of the week (Sunday through Saturday)\nY-Axis: Total ride count per day\nBars: Aggregate counts of rides initiated by customers at non-tourist stations\n\n\n\n\nTo illustrate weekly patterns in casual (customer) ridership among local users, highlighting which days see higher or lower activity.\n\n\n\n\nWeekends (Saturday and Sunday): Highest ride volumes, indicating strong recreational or leisure usage.\nWeekdays (Monday–Friday): Lower and relatively consistent ride counts compared to weekends.\nPeak day: Saturday shows the most activity overall.\n\n\n\n\n\nThe clear weekend peak suggests most customer rides are discretionary trips taken for leisure rather than routine commuting.\nThe relative uniformity of weekday rides indicates a stable but smaller base of casual usage during the workweek.\n\n\n\n\n\nRides were filtered to:\n\ncustomer user type (not subscribers)\nExclude all tourist stations\n\nDay of week extracted from ride start timestamps (converted to local time)\n\n\n\n\n\n\n\nPre-processed dataframe non_tourist_customer_rides_df\n\nFiltered by:\n\nNon-tourist station IDs\ncustomer user type\n\n\n\n\n\n\nggplot(non_tourist_customer_rides_df, aes(x = day_of_week)) +\n     geom_bar(fill = \"steelblue\") +\n     labs(\n         title = \"Non-Tourist Customer Rides by Day of the Week\",\n         x = \"Day of the Week\",\n         y = \"Number of Rides\"\n     ) +\n     theme_minimal()\n\n\n\n\n\n\n\n  \n\nHourly comparison of customer rides by day type (weekday vs weekend) at non-tourist stations, highlighting differences in temporal riding behavior.\n\n\n\n\nThis grouped bar chart compares customer ride activity across hours of the day, split by weekday and weekend, limited to non-tourist stations. It highlights behavioral shifts in usage patterns between workdays and leisure days.\n\n\n\n\nX-Axis: Hour of day (0–23 in 24-hour format).\nY-Axis: Number of rides initiated during that hour.\nBars:\n\nBlue: Weekday ride counts.\nOrange: Weekend ride counts.\n\nBars are grouped by hour to allow direct visual comparison between the two day types.\n\n\n\n\nThis visualization is designed to isolate potential commuting or habitual usage patterns by removing the influence of tourist-heavy areas and separating ride behavior by the type of day.\n\n\n\n\nWeekday Trends:\n\nStrong late afternoon peak at 17:00 (5 PM) suggests post-work or school riding.\nModerate increase starting around 7–8 AM, possibly indicating morning commutes.\nSubdued activity in the early morning and late evening.\n\nWeekend Trends:\n\nMore even distribution throughout the midday and early afternoon.\nNo sharp peak, but elevated ridership between 10:00 and 16:00.\nMorning and evening ride counts are lower than weekday equivalents.\n\n\n\n\n\n\nThe sharp peak at 5 PM on weekdays strongly suggests commuter behavior, even among casual (non-subscriber) users.\nThe flatter weekend profile indicates a more recreational or errand-driven pattern, with rides spread across daylight hours.\nFiltering out tourist stations helps reinforce the interpretation that these behaviors stem from local usage, not tourism.\n\n\n\n\n\nRide records are filtered to include only those starting at non-tourist stations.\nUsers included are labeled as Customers (i.e., non-subscribers).\n“Weekday” includes Monday through Friday; “Weekend” includes Saturday and Sunday.\nTime is derived from the local timestamp of the ride start.\n\n\n\n\n\n\n\nData Frame: rides_by_hour_weekpart\n\nFilters Applied:\n\nOnly customer rides (casual users)\nRides originating from non-tourist stations\nGrouped by hour of day and week_part (Weekday vs Weekend)\n\n\n\n\n\n\nggplot(rides_by_hour_weekpart, aes(x = hour, y = ride_count, fill = week_part)) +\ngeom_col(position = \"dodge\") +\nlabs(\ntitle = \"Customer Rides by Hour: Weekday vs Weekend (Non-Tourist Stations)\",\nx = \"Hour of Day\",\ny = \"Number of Rides\",\nfill = \"Day Type\"\n) +\nscale_x_continuous(breaks = 0:23) +\nscale_fill_manual(values = c(\"Weekday\" = \"darkblue\", \"Weekend\" = \"darkorange\")) +\ntheme_minimal()\n\n\n\n\n\n\n\n  \n\nHourly customer ride patterns by season at non-tourist stations. Weekday rides peak strongly in the late afternoon during warmer seasons, while weekend rides are more evenly distributed. Winter shows the lowest activity overall.\n\n\n\n\nThis faceted line chart visualizes customer rides over the hours of the day, separated by season and by weekday/weekend. It highlights how ridership patterns shift throughout the year.\n\n\n\n\nX-Axis: Hour of Day (0–23)\nY-Axis: Ride Count\nFacets: One panel per season (Spring, Summer, Fall, Winter)\nLine Colors:\n\nBlue: Weekday\nOrange: Weekend\n\n\n\n\n\nTo illustrate how both time of day and seasonality affect customer ride behavior when excluding tourist-heavy stations.\n\n\n\n\nSpring: Moderate volume, clear late afternoon weekday peak\nSummer: Highest usage, pronounced 17:00 weekday peak\nFall: Similar shape to Spring, slightly lower counts\nWinter: Flat distribution, significantly reduced activity\n\n\n\n\n\nCommuting Behavior: Strong summer/fall weekday peaks around 17:00 suggest commuter-driven use, especially among customers using the system for one-way travel from work or transit.\nRecreation and Errands: Weekend rides are more spread throughout midday.\nSeasonal Sensitivity: Weekend ride patterns are flatter across the day and more seasonally stable, while weekday patterns show strong seasonal variation.\nCold Weather Impact: Ridership drops sharply in winter across all times of day.\n\n\n\n\n\nTimestamps were converted to local Chicago time.\nDay-of-week was used to classify rides into “Weekday” vs “Weekend”.\nSeasonal classification was derived from ride start dates.\nAll rides were filtered to exclude tourist station IDs before analysis.\n\n\n\n\nData Source\nData Frame: rides_by_hour_season\nThis dataframe includes:\n\nFiltered out tourist stations\nFiltered to customer rides\nDerived season from start timestamp\nDerived week_part from day of week\nAggregated ride counts by hour, season, and day type\n\nR Code Used to Generate the Chart:\nggplot(rides_by_hour_season, aes(x = hour, y = ride_count, color = week_part)) +\n  geom_line(size = 1.1) +\n  facet_wrap(~season, ncol = 2) +\n  scale_x_continuous(breaks = 0:23) +\n  scale_color_manual(values = c(\"Weekday\" = \"darkblue\", \"Weekend\" = \"darkorange\")) +\n  labs(\n    title = \"Customer Rides by Hour, Faceted by Season (Non-Tourist Stations)\",\n    x = \"Hour of Day\",\n    y = \"Ride Count\",\n    color = \"Day Type\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n  \n\nMonthly distribution of customer rides at non-tourist stations, illustrating clear seasonality in usage patterns.\n\n\n\n\nThis bar chart displays the total number of rides initiated by customers (non-subscribers) at non-tourist stations, aggregated by calendar month. It shows clear seasonal patterns in ridership.\n\n\n\n\nX-Axis: Month (1 = January, 12 = December).\nY-Axis: Total ride count for each month.\nBars: Orange fill indicates the count of rides starting in each month.\n\n\n\n\nThis visualization is intended to illustrate seasonal variation in usage, excluding tourist-heavy locations to focus on local customer ridership.\n\n\n\n\nWinter (Dec–Feb): Lowest ridership, likely due to cold weather.\nSpring (Mar–May): Steady increase as temperatures rise.\nSummer Peak (June–August): Highest ridership, peaking in July.\nFall Decline (Sept–Nov): Gradual reduction in usage as temperatures cool.\n\n\n\n\n\nThe clear summer peak suggests that casual riders strongly prefer warm-weather months.\nThe exclusion of tourist stations reinforces that these are local usage patterns, not driven primarily by visitors.\nWinter ridership does not drop to zero, indicating some year-round demand.\n\n\n\n\n\n\n\nnon_tourist_customer_rides_df\nFiltered to include:\n\nuser_type == “customer”\nstart_station_id in the non-tourist station list\n\n\n\n\n\nggplot(non_tourist_customer_rides_df, aes(x = month)) +\n     geom_bar(fill = \"darkorange\") +\n     labs(\n         title = \"Non-Tourist Customer Rides by Month\",\n         x = \"Month\",\n         y = \"Number of Rides\"\n     ) +\n     theme_minimal()\n\n\n\n\n\n\n\n  \n\nTotal customer rides originating at non-tourist stations, aggregated by season. Summer shows the highest volume, with winter substantially lower.\n\n\n\n\nThis bar chart summarizes the total ride volume by season for customers using non-tourist stations. It helps illustrate seasonal variability in casual riding behavior.\n\n\n\n\nX-Axis: Season (Spring, Summer, Fall, Winter)\nY-Axis: Number of rides\nBar Fill: Solid dark orange\n\n\n\n\nThis chart highlights how seasonal factors influence casual ridership, such as weather and daylight availability, independent of tourist activity.\n\n\n\nSummer: Rides peak sharply, exceeding 600,000 rides. Reflecting warm weather and extended daylight hours.\nFall: Second-highest ridership, over 400,000 rides, showing sustained use into cooler months.\nSpring: More modest totals (~220,000 rides), likely reflecting a gradual ramp-up in riding.\nWinter: Lowest ridership (under 200,000), consistent with reduced bike use in cold conditions.\n\n\n\n\n\n\nThe strong seasonal trend underscores the importance of temperature and daylight in casual rider behavior.\nEven excluding tourist hotspots, ridership in summer triples or quadruples winter levels.\nThese patterns can inform resource allocation (e.g., rebalancing bikes) and maintenance scheduling.\n\n\n\n\n\n\nFiltered rides from the dataset:\n\nnon_tourist_customer_rides_df\nFilters Applied:\n\nuser_type = customer\nStart station ID in non-tourist stations list\n\n\n\n\n\nggplot(non_tourist_customer_rides_df, aes(x = season)) +\n     geom_bar(fill = \"darkorange\") +\n     labs(\n         title = \"Non-Tourist Customer Rides by Season\",\n         x = \"Season\",\n         y = \"Number of Rides\"\n     ) +\n     theme_minimal()\n\n\n\n\n\n\n\n  \n\nHourly ride counts at non-tourist stations, grouped by season and separated by weekday versus weekend, illustrating clear seasonal and temporal ridership patterns.\n\n\n\n\nThis multi-panel grouped bar chart compares hourly ride activity across the four seasons, separated into weekday and weekend usage, restricted to non-tourist stations. It provides a clear view of how both time of day and seasonality influence ridership behavior among casual users.\n\n\n\n\nX-Axis: Hour of Day (0–23 in 24-hour format).\nY-Axis: Number of Rides.\nBars:\n\nDark Blue: Weekday rides.\nDark Orange: Weekend rides.\n\nFacets:\n\nOne panel per season: Fall, Spring, Summer, and Winter.\n\nPosition: Bars are grouped side by side within each hour for comparison.\n\n\n\n\nThe visualization aims to:\n\nQuantify the impact of seasonal changes on ridership volume.\nIdentify daily commute-like patterns even among non-subscribers.\nHighlight how weekends differ from weekdays in temporal distribution.\n\n\n\n\n\nSummer and Fall:\n\nPronounced weekday peaks around 17:00, likely related to commuting or end-of-day activities.\nWeekend ridership is elevated but spread more evenly across midday hours.\n\nSpring:\n\nSimilar but slightly lower weekday afternoon peaks.\n\nWinter:\n\nOverall volume sharply reduced.\nFlatter distribution throughout the day with only a mild afternoon increase on weekdays.\n\n\n\n\n\n\nStrong weekday afternoon peaks in warm months support the idea of commuting or routine trips by casual riders.\nWeekend rides remain relatively stable across seasons, indicating recreation and errands.\nWinter conditions significantly suppress all ride activity.\n\n\n\n\n\nAll rides are filtered to exclude tourist stations.\nOnly rides by customer (non-subscriber) users are included.\nLocal Chicago time used for hourly binning.\nSeason assigned based on ride start date.\n\n\n\n\n\n\n\nnon_tourist_customer_rides_df\n\nFiltered for user_type = 1.\nFiltered to non-tourist station IDs.\n\n\n\n\n\nggplot(rides_by_hour_season, aes(x = hour, y = ride_count, fill = week_part)) +\n  geom_col(position = \"dodge\") +\n  facet_wrap(~season, ncol = 2) +\n  scale_x_continuous(breaks = 0:23) +\n  scale_fill_manual(values = c(\"Weekday\" = \"darkblue\", \"Weekend\" = \"darkorange\")) +\n  labs(\n    title = \"Hourly Ride Patterns by Season and Day Type (Non-Tourist Stations)\",\n    x = \"Hour of Day\",\n    y = \"Number of Rides\",\n    fill = \"Day Type\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n  \n\nProportion of daily non-tourist rides by hour of day and day type (weekday vs. weekend). Weekdays show a clear peak in the late afternoon commute hours, while weekends have a more uniform midday distribution.\n\n\n\n\nThis heatmap shows the hourly share of total daily rides for non-tourist customer rides, split by day type (Weekday vs. Weekend). Darker colors indicate higher proportions of each day’s total rides occurring in that hour.\n\n\n\n\nX-Axis (Hour of Day):\n\nRanges from 0 to 23.\nRepresents the ride start hour in local time.\n\nY-Axis (Day Type):\n\nTwo categories: Weekday and Weekend.\n\nFill Color (Proportion):\n\nGradient from white (low) to dark orange (high).\nIndicates the fraction of the day’s total rides occurring in each hour.\n\n\n\n\n\n\nWeekdays:\n\nClear late afternoon peak around 17:00–18:00, consistent with evening commute patterns.\nLower activity in early morning and late evening.\n\nWeekends:\n\nMore even distribution across 10:00–16:00, suggesting recreational or discretionary use.\nNo strong commute-style spike.\n\n\n\n\n\n\nThe contrast between weekday and weekend timing supports the hypothesis that weekday rides are more likely commuting or errands, while weekend rides are more leisurely.\nOperators could align staffing, bike redistribution, or promotions to these temporal patterns.\n\n\n\n\nThis chart can help\n\nModel hourly demand by day type.\nOptimize fleet distribution and availability during peak periods.\nInform marketing or pricing strategies aligned to usage timing.\n\n\n\n\n\nRide Records: Filtered for non-tourist customer rides (excluding stations flagged as tourist destinations).\nDerived Columns: Hour extracted from local start time; day type assigned as Weekday or Weekend.\nAggregation: Hourly counts normalized to proportions of each day’s total rides.\n\n\n\nggplot(ride_props, aes(x = hour, y = week_part, fill = prop)) +\n  geom_tile() +\n  scale_fill_gradient(low = \"white\", high = \"darkorange\") +\n  labs(\n    title = \"Non-Tourist Proportion of Daily Rides by Hour and Day Type\",\n    x = \"Hour of Day\",\n    y = \"Day Type\",\n    fill = \"Ride Proportion\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n  \n\nHourly difference in ride proportions: Weekday minus Weekend. Red tones highlight hours where weekday rides are more frequent proportionally; blue tones highlight hours dominated by weekend activity.\n\n\n\n\nThis heatmap shows the proportional difference in ride volume by hour of the day between weekdays and weekends. It normalizes each group separately so the visualization highlights relative time-of-day preference, independent of the total ride volume.\n\n\n\n\nX-Axis: Hour of Day (0–23)\nY-Axis: Dummy axis to create a horizontal heatmap band (no intrinsic meaning)\nColor Scale:\n\nRed: Hours with proportionally higher weekday usage\nBlue: Hours with proportionally higher weekend usage\nWhite: No significant difference\n\n\n\n\n\n\nWeekday-dominant hours:\n\nStrong peaks in the morning (7–9 AM) and late afternoon (4–6 PM).\nConsistent with commuter patterns among customers using non-tourist stations.\n\nWeekend-dominant hours:\n\nMidday and early afternoon (10 AM–3 PM) show higher weekend share, likely indicating recreational or leisure use.\n\nEvenings:\n\nSome residual weekday preference persists into the evening, but less pronounced.\n\n\n\n\n\n\nThis chart highlights the behavioral shift between weekdays and weekends.\nEven when weekends have high total ride volume, customers distribute their rides more evenly across midday hours.\nWeekdays concentrate ridership in commute-related time blocks.\n\n\n\n\n\nrides table filtered for:\n\nuser_type = 1 (customer)\nNon-tourist stations (start and end)\nRides after 2023-01-01\n\nDerived tables:\n\nrides_by_hour_weekpart: Hourly counts by weekday/weekend\nride_props: Proportions normalized within each week part\nprop_wide: Wide-format table for computing differences\n\n\n\n\n\nggplot(prop_wide, aes(x = hour, y = 1, fill = diff)) +\n     geom_tile() +\n     scale_fill_gradient2(low = \"blue\", high = \"red\", mid = \"white\", midpoint = 0) +\n     labs(\n         title = \"Difference in Ride Proportions: Weekday - Weekend\",\n         x = \"Hour of Day\",\n         y = NULL,\n         fill = \"Weekday &gt; Weekend\"\n     ) +\n     theme_minimal()\n\n\n\n\n\nRide behavior as it relates to temperature (and optionally precipitation).\n\n\n\n  \n\nHourly ride counts by temperature bin, with separate curves for Total, Subscriber, and Customer rides. Warmer temperatures strongly correlate with increased bike usage, especially among Customers.\n\n\nThis chart illustrates the relationship between ambient temperature (°C) and the number of rides starting at that temperature. Data is grouped into 2°C bins to smooth short-term fluctuations and reveal broader trends.\n\n\n\nX-Axis: Temperature in degrees Celsius.\nY-Axis: Total number of rides per bin, formatted with metric suffixes (e.g., 1k, 1M).\nGrid lines and a legend outside the plot area improve readability.\nThree ride categories are plotted:\n\nTotal Rides (black line)\nSubscribers (dark blue line)\nCustomers (dark orange line)\n\n\n\n\n\n\nBike usage increases steadily with warmer weather, peaking for both Subscribers and Customers around 26°C (78.8°F), after which it falls off sharply.\nCustomers display a steeper increase in usage with temperature, suggesting stronger sensitivity to warm conditions.\nSubscribers maintain higher baseline usage in cooler temperatures but follow a similar bell-shaped curve overall.\n\n\n\n\n\nThese trends highlight temperature as a powerful predictor of ridership.\nThe steeper response among Customers may reflect their recreational or discretionary usage.\nInsights from this pattern can inform:\n\nOperations (e.g., fleet redistribution, maintenance scheduling)\nMarketing campaigns (e.g., promoting rides during optimal weather windows)\n\n\n\n\n\n\nHourly Weather Data: Chicago Midway Airport hourly weather observations (temperature, precipitation, etc.)\nRide Data: Aggregated hourly ride counts joined to weather records by timestamp.\nPeriod: All available data between 2013 and 2025.\n\n\n\n\nBelow is the SQL command used to prepare the dataset:\n.headers off\n.mode tabs\n.output temp_vs_rides.tsv\n\nWITH binned AS (                          -- 2 °C comfort‑oriented buckets\n    SELECT\n        CAST(temp / 2.0 AS INT) * 2              AS temp_bin,         -- –10,‑8,…,34\n        r.user_type,\n        SUM(r.rides)                             AS rides\n    FROM rides_per_hour_tbl   AS r\n    JOIN hourly_weather       AS w  ON w.epoch = r.epoch\n    GROUP BY temp_bin, r.user_type\n), pivot AS (                             -- turn rows into columns\n    SELECT\n        temp_bin,\n        SUM(rides)                                  AS total,\n        SUM(CASE WHEN user_type='subscriber' THEN rides END) AS subs,\n        SUM(CASE WHEN user_type='customer'   THEN rides END) AS cust\n    FROM binned\n    GROUP BY temp_bin\n    ORDER BY temp_bin\n)\nSELECT temp_bin, total, subs, cust\nFROM pivot;\n\n.output stdout\n\n\n\nset format y \"%.0s%c\"\nset term wxt           \nset title \"Hourly Rides vs. Temperature\"\nset xlabel \"Temperature (°C)\"\nset ylabel \"Rides per hour\"\nset grid\nset datafile separator '\\t'   \nset key outside\nplot \\\n    \"temp_vs_rides.tsv\" every ::1::34 using 1:2 with lines lw 2 lc rgb \"black\" title \"Total\", \\\n    \"\"      every ::1::34 using 1:3 with lines lw 2 lc rgb \"dark-blue\" title \"Subscribers\", \\\n    \"\"      every ::1::34 using 1:4 with lines lw 2 lc rgb \"dark-orange\" title \"Customers\"\n\n\n\n\n\n  \n\nLOESS-smoothed hourly ride volume as a function of temperature, comparing customers and subscribers. Patterns remain elevated at higher temperatures due to the smoothing method.\n\n\n\n\nLOESS-smoothed hourly ride volume as a function of temperature, comparing customers and subscribers. Patterns remain elevated at higher temperatures due to the smoothing method.\n\nX-Axis: Air temperature in °C.\nY-Axis: Number of rides per hour.\nLines: LOESS smooth for each user type.\n\nBlue: Subscribers.\nRed: Customers.\n\n\n\n\n\n\nRide counts rise with temperature from below 0°C through the 20s.\nUnlike binned histograms, no clear decline is visible above ~30°C.\nCustomer volume grows faster with temperature than subscriber volume.\n\n\n\n\nThe continuous LOESS smoothing aggregates all hours (including some without rides), potentially obscuring the decline at extreme temperatures seen in binned charts. This chart reflects the overall association between hourly temperatures and ridership, rather than the distribution of rides alone.\n\n\n\n\nTrip Data: Divvy trip records from:\n\n2013–2019 (S3 archive)\n2023–2025 (City of Chicago Data Portal)\n\nWeather Data: Chicago Midway Airport hourly observations via Meteostat.\n\n\n\n\n\nRides aggregated per hour and user type (COUNT(*) AS rides).\nWeather joined on hourly epoch timestamp (start_time / 3600 * 3600).\nNo filter applied to exclude zero-ride hours (i.e., hours with no rides are included as 0).\nUsed as input to (../glossary.qmd#glossary-LOESS) smoothing, resulting in a different trend shape compared to temperature bin summaries.\n\n\n\n\nggplot(rides_weather_df, aes(x = temp, y = rides, color = user_type)) +\n  geom_smooth(method = \"loess\", se = FALSE) +\n  scale_y_continuous(labels = label_number(scale_cut = cut_short_scale())) +\n  scale_color_manual(values = c(\"subscriber\" = \"blue\", \"customer\" = \"red\")) +\n  labs(\n    title = \"Hourly Ride Volume vs Temperature\",\n    x = \"Temperature (°C)\",\n    y = \"Hourly Ride Volume\",\n    color = \"User Type\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n  \n\nFrequency distribution of hourly temperature observations during the analysis period, illustrating data coverage across temperature ranges.\n\n\n\n\nThis histogram shows how often each 2°C temperature range occurred in the underlying weather dataset. It helps contextualize the density of data points used in other temperature-related analyses, particularly the scarcity of very hot or very cold hours.\n\n\n\n\nX-Axis: Temperature Bin (°C), grouped in 2-degree intervals.\nY-Axis: Number of hourly records falling within each bin.\nBars: Height proportional to frequency of observations per bin.\n\n\n\n\n\nThe majority of observations cluster between ~5°C and ~25°C.\nVery few hours fall below -10°C or above 30°C.\nThis uneven distribution explains why temperature-related charts show more stable trends in mid-range temperatures but can become volatile at extremes.\n\n\n\n\nThe chart demonstrates that the dataset’s coverage is concentrated in moderate temperatures, suggesting caution when interpreting trends at temperature extremes due to sparse data.\n\n\n\n\nWeather Data: Hourly observations from Chicago Midway Airport via Meteostat Bulk Hourly Dataset.\n\nIncludes air temperature, dewpoint, humidity, precipitation, and other weather variables.\n\nTimeframe: Coverage aligned to available trip data (2013–2019 and 2023–2025), although this chart includes all available hourly weather records regardless of whether rides occurred.\n\n\n\n\n\nHourly temperature records loaded into SQLite.\nTemperature rounded down to nearest 2°C bin (floor(temp / 2) * 2).\nCounts aggregated per bin using dplyr in R.\n\n\n\n\n# Create temperature bins and count occurrences\ntemp_bins &lt;- hourly_weather_df %&gt;%\n  mutate(temp_bin = floor(temp / 2) * 2) %&gt;%\n  group_by(temp_bin) %&gt;%\n  summarise(count = n())\n\n# Plot histogram\nggplot(temp_bins, aes(x = temp_bin, y = count)) +\n  geom_col(fill = \"steelblue\") +\n  labs(\n    title = \"Frequency of Temperature Bins\",\n    x = \"Temperature Bin (°C)\",\n    y = \"Number of Hours\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n  \n\nRide Volume by Temperature and Rain Condition This panel chart shows total ride volume for subscribers and customers, grouped by dry, wet, and unknown precipitation conditions. Most rides occur in dry weather at temperatures between 20–25°C. Wet conditions significantly suppress ridership for both user types, revealing clear sensitivity to rain.\n\n\n\n\nThis line chart panel shows the total ride volume across 2°C temperature bins, broken down by user type (Customer vs. Subscriber) and grouped by rain condition (Dry, Wet, No data). Each panel represents a different precipitation category, allowing direct comparison of behavior under different weather conditions.\n\n\n\n\nX-Axis (Temperature Bin °C):\n\nTemperature ranges from -30°C to +30°C.\nBinned in 2°C increments.\n\nY-Axis (Total Rides):\n\nNumber of rides recorded within each temperature bin.\n\nFacets (Panels):\n\nDry: Rides that occurred with no recorded rain.\nNo data: Weather data was missing.\nWet: Rides that occurred during rain conditions.\n\nLines:\n\nRed: Customer ride volume.\nCyan: Subscriber ride volume.\n\n\n\n\n\n\n\n\nMost ride volume occurs here, peaking between 20–26°C.\nSubscribers consistently log more rides than customers across all temperature bins.\nClear bell-shaped distribution centered around optimal riding weather (20–25°C).\n\n\n\n\n\nVery little volume, but patterns still mirror the dry curve.\nCould include times where weather data was not collected for some reason (hardware failure, etc) or corrupted weather records.\n\n\n\n\n\nDramatic decrease in ride volume for both user types.\nSubscriber and customer patterns flatten and converge, showing less variance in behavior when it’s raining.\n\n\n\n\n\n\nTemperature strongly influences ridership, with optimal weather (20–25°C) showing the highest activity.\nPrecipitation is a major deterrent, suppressing ride volume across all temperatures.\nSubscribers ride more often and in a wider temperature range than customers, especially when conditions are dry.\n\n\n\n\nThis visualization helps:\n\nQuantify the impact of weather on bike share demand.\nSupport decisions around dynamic pricing, rebalancing, or user alerts based on forecasted weather.\nSegment usage patterns based on environmental conditions, without requiring detailed user data beyond type.\n\n\n\n\n\nTrip Data: Divvy trip records from:\n\n2013–2019 (S3 archive)\n2023–2025 (City of Chicago Data Portal)\n\nWeather Data: Chicago Midway Airport hourly observations via Meteostat.\n\n\n\n\n\nRides aggregated per hour and user type (COUNT(*) AS rides).\nWeather joined on hourly epoch timestamp (start_time / 3600 * 3600).\nTemperature binned using floor(temp / 2) * 2.\nPrecipitation labeled:\n\nDry = 0 mm precipitation.\nWet = &gt;0 mm precipitation.\nNo Data = missing precipitation.\n\nSummed rides per combination of bin, user type, and precipitation label.\n\n\n\n\ngroup_by(temp_bin, user_type, precip_label) %&gt;%\n     summarise(rides = sum(rides), .groups = \"drop\") %&gt;%\n     ggplot(aes(x = temp_bin, y = rides, color = user_type)) +\n     geom_line(size = 1) +\n     facet_wrap(~ precip_label, nrow = 1) +\n     labs(\n         title = \"Ride Volume by Temperature and Precipitation\",\n         subtitle = \"2°C temperature bins grouped by rain condition\",\n         x = \"Temperature Bin (°C)\",\n         y = \"Total Rides\",\n         color = \"User Type\"\n     ) +\n     scale_x_continuous(breaks = seq(-30, 40, by = 10)) +\n     theme_minimal(base_size = 14)\n\n\n\n\n\n  \n\nHourly ride volume by temperature, faceted by user type. Warmer temperatures correlate strongly with increased ride volume for both customers and subscribers, with subscriber volume remaining higher across all temperatures.\n\n\n\n\nThis dual-panel line plot compares hourly ride volume to temperature (°C) for each user type separately. It illustrates how customers and subscribers respond differently to temperature changes.\n\n\n\n\nX-Axis: Temperature in °C.\nY-Axis: Hourly ride count.\nFacets:\n\nLeft: Customers.\nRight: Subscribers.\n\nLine: LOESS smooth showing trend across all hourly observations.\n\n\n\n\n\nRide volume is lowest below freezing, rising quickly as temperatures warm.\nSubscribers consistently have higher hourly volume across the entire temperature range.\nBoth user types show a smooth, nonlinear increase, with no clear plateau in the observed temperatures.\nThe upward trend becomes especially pronounced above ~20°C.\n\n\n\n\nThese patterns suggest that temperature strongly influences ridership among both groups, but subscribers are more resilient to cold and maintain more consistent usage. The continuous rise highlights that moderate and warm weather significantly increase demand.\n\n\n\n\nTrip Data: Divvy trip records from:\n\n2013–2019 (S3 archive)\n2023–2025 (City of Chicago Data Portal)\n\nWeather Data: Chicago Midway Airport hourly observations via Meteostat.\n\n\n\n\nRides aggregated per hour and user type (COUNT(*) AS rides).\nWeather joined on hourly epoch timestamp (start_time / 3600 * 3600).\nNo filtering by precipitation.\nLOESS smoothing applied within each user type facet.\n\n\n\n\nggplot(rides_weather_df, aes(x = temp, y = rides)) +\n     geom_smooth(method = \"loess\", se = FALSE, color = \"darkgreen\") +\n     scale_y_continuous(labels = label_number(scale_cut = cut_short_scale())) +\n     facet_wrap(~ user_type) +\n     labs(\n         title = \"Temperature vs Ride Volume by User Type\",\n         x = \"Temperature (°C)\",\n         y = \"Hourly Ride Volume\"\n     ) +\n     theme_minimal()\n\n\n\n\n\n\n  \n\nTotal hourly rides by temperature bucket (2°C), separated by user type. Subscriber activity peaks more sharply in moderate to warm temperatures, while Customer rides increase more steadily with temperature. Data aggregated across all non-loop rides.\n\n\n\n\nThis chart shows how total rides vary with temperature, split between Subscribers and Customers. Ride counts are aggregated by temperature buckets, offering a side-by-side view of weather sensitivity by user group.\n\n\n\n\nX-Axis: Temperature in degrees Celsius, grouped into 2°C buckets.\nY-Axis: Total number of rides aggregated per hourly bin across the dataset.\nLines:\n\nSubscribers: Typically exhibit a sharper peak in moderate temperature ranges.\nCustomers: Show a more gradual increase in ride volume as temperatures rise.\n\n\n\n\n\nThe visualization helps compare how different user types respond to temperature changes. It reveals behavioral distinctions between Subscribers and Customers.\n\n\n\n\nSubscribers:\n\nLow ride volume below 10°C.\nSharp peak near 25°C, suggesting strong commuting patterns tied to comfort.\nRapid decline above 30°C, possibly due to heat discomfort.\n\nCustomers:\n\nMore gradual increase in ride volume with rising temperatures.\nPeak also around 25–30°C, but less steep rise and fall.\nGreater relative tolerance for warmer temperatures.\n\n\n\n\n\n\nSubscriber behavior is more concentrated and sensitive to moderate temperatures, likely tied to commuting habits.\nCustomer rides are more distributed across a range of temperatures, aligning with recreational or discretionary use.\nThe divergence in curve shapes supports the hypothesis of different underlying motivations between user groups.\n\n\n\n\n\nTemperatures are binned into 2°C increments based on conditions at the start of each ride.\nRides were grouped and summed by user type for each temperature bin, then aggregated hourly.\n\n\n\n\n\n\n\n  \n\nAverage hourly rides by temperature bucket and user type. Both subscribers and customers take more rides as temperatures increase, but customer ride volume rises more sharply in warmer weather, indicating greater temperature sensitivity among casual riders.\n\n\n\n\nThis chart presents the average number of hourly bike rides as a function of temperature (°C). The data is aggregated across all users, without distinguishing between subscriber or casual rider types.\n\n\n\n\nX-Axis: Temperature in degrees Celsius, ranging from below -10°C to above 35°C.\nY-Axis: Average hourly ride count.\nLine: A single curve showing average ride volume across all users, bucketed by temperature.\n\n\n\n\nThis visualization is intended to illustrate how temperature alone affects overall ridership behavior, independent of time of day, day of week, or rider category.\n\n\n\n\nSub-zero temperatures (&lt; 0°C): Very low ridership, close to zero, as expected.\nGradual increase: Ride volume increases steadily with temperature from around 0°C to the low 20s.\nPeak ridership: Occurs near 25°C, representing the optimal weather for riding.\nDrop-off above 30°C: Suggests decreased willingness to ride in high heat, likely due to discomfort or health concerns.\n\n\n\n\n\nThe chart suggests a strong correlation between temperature and total ride volume.\nThe symmetric, bell-shaped curve implies that moderate temperatures are ideal for cycling.\nExtremes on either end (cold or hot) sharply reduce bike usage.\n\n\n\n\n\nRides are put into bucked with 2°C increments based on the temperature at ride start times.\nThe “2-bucket” term refers to the fact that the temperatures readings were grouped into bins of 2°C. Binning is a form of data smoothing applied to reduce noise.\n\n.headers off          -- we only want raw numbers\n.mode tabs            -- gnuplot likes tab‑ or space‑separated columns\n.output temp_vs_rides.dat\nWITH t AS (\n  SELECT\n    CAST(temp / 2.0 AS INT)*2  AS temp_bin,   -- 2 °C buckets: …, 14, 16, 18 …\n    AVG(rides)                 AS avg_rides\n  FROM rides_weather\n  GROUP BY temp_bin\n  ORDER BY temp_bin\n)\nSELECT temp_bin, avg_rides\nFROM t;\n.output stdout         -- restore console\n\n\n\nset title \"Average hourly rides vs. temperature\"\nset xlabel \"Temperature (°C)\"\nset ylabel \"Average rides per hour\"\nset grid\nset key off\n\n# Simple connected line\nplot \"temp_vs_rides.dat\" using 1:2 with linespoints lw 2 pt 7\n\n\n\n\n\n  \n\nAverage hourly ride volume by temperature (2°C buckets) with cubic spline interpolation to highlight overall trends in ridership as temperatures rise and fall.\n\n\n\n\nThis chart presents the average number of hourly bike rides as a function of temperature (°C). The data is aggregated across all users, without distinguishing between subscriber or casual rider types.\n\n\n\n\nX-Axis: Temperature in degrees Celsius, ranging from below -10°C to above 35°C.\nY-Axis: Average hourly ride count.\nLine: A single curve showing average ride volume across all users, smoothed with cubic spline interpolation and bucketed by temperature.\n\n\n\n\nThis visualization illustrates how temperature alone affects overall ridership behavior, independent of time of day, day of week, or rider category.\n\n\n\n\nSub-zero temperatures (&lt; 0°C): Very low ridership, close to zero, as expected.\nGradual increase: Ride volume increases steadily with temperature from around 0°C to the low 20s.\nPeak ridership: Occurs near 25°C, representing the optimal weather for riding.\nDrop-off above 30°C: Suggests decreased willingness to ride in high heat, likely due to discomfort or health concerns.\n\n\n\n\n\nThe chart suggests a strong correlation between temperature and total ride volume.\nThe symmetric, bell-shaped curve implies that moderate temperatures are ideal for cycling.\nExtremes on either end (cold or hot) sharply reduce bike usage.\n\n\n\n\n\nRides were grouped into 2°C increments based on the temperature at ride start times.\nThe “2-bucket” term refers to this binning, which reduces noise by aggregating similar readings.\nThe curve was further smoothed using cubic spline interpolation, creating a continuous line that passes through the averaged data points.\n\n\n\n\n\nRide Data: Hourly aggregated ride counts from the rides_weather table, binned by temperature.\nWeather Data: Hourly temperature records associated to ride start timestamps.\n\n\n\n\n.headers off          -- we only want raw numbers\n.mode tabs            -- gnuplot likes tab‑ or space‑separated columns\n.output temp_vs_rides.dat\nWITH t AS (\n  SELECT\n    CAST(temp / 2.0 AS INT)*2  AS temp_bin,   -- 2 °C buckets: …, 14, 16, 18 …\n    AVG(rides)                 AS avg_rides\n  FROM rides_weather\n  GROUP BY temp_bin\n  ORDER BY temp_bin\n)\nSELECT temp_bin, avg_rides\nFROM t;\n.output stdout         -- restore console\n\n\n\nset title \"Average hourly rides vs. temperature\"\nset xlabel \"Temperature (°C)\"\nset ylabel \"Average rides per hour\"\nset grid\nset key off\n\n\n# smoothed curve (Cubic Spline)\nplot \"temp_vs_rides.dat\" using 1:2 smooth csplines lw 2\n\n\n\n\n\n  \n\nNormalized average hourly rides by temperature (°C), showing subscriber, customer, and total ride volume peaking near 25°C.\n\n\n\n\nThis line chart displays how bike ride frequency varies with temperature, separated by user type. Data is normalized, meaning each series is scaled between 0 and 1 to emphasize trend shape rather than absolute counts.\n\n\n\n\nX-Axis (Temperature °C):\n\nRanges approximately -10°C to +35°C.\n\nY-Axis (Normalized Average Hourly Rides):\n\nScaled 0–1 within each series.\n\nLines:\n\nDark blue: Subscribers.\nDark orange: Customers.\nBlack: Combined total average.\n\n\n\n\n\n\nAll series follow a bell-shaped curve, peaking near 25°C (~77°F).\nBelow 5°C:\n\nAll ride volume is very low.\n\n5–25°C:\n\nSharp increase in ridership, especially among customers.\n\n&gt;30°C:\n\nSlight decline in rides, more pronounced for customers.\n\n\n\n\n\n\nSubscribers: More consistent usage, reflecting commuting or necessity.\nCustomers: More sensitive to temperature, showing higher warm-weather peaks and steeper hot/cold drop-offs.\nThe normalized pattern confirms temperature is a primary driver for all user types.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTemperature Range\nCustomer Behavior\nSubscriber Behavior\nInterpretation\n\n\n\n\n&lt;5°C\nVery low ridership\nModerately low\nCold strongly suppresses casual rides\n\n\n5–25°C\nSteep increase\nModerate increase\nWarmer weather encourages use\n\n\n~25°C\nPeak ridership\nNear-peak\nIdeal riding conditions\n\n\n30-25°C\nDecline\nSlight increase\nHeat discourages casual trips\n\n\n&gt;35°C\nSharp Decline\nSharp Decline\nExtreme heat discourages all trips\n\n\n\n\n\n\nThis visualization is useful for:\n\nUnderstanding seasonal ride patterns.\nModeling demand sensitivity to weather.\nDesigning promotions and fleet strategies.\n\n\n\n\n\nRide Counts: Aggregated hourly ride counts per user type.\nTemperature: Hourly observations joined on timestamp.\nNormalization: Each series scaled to [0–1].\n\n\n\n\nggplot(normalized_df, aes(x = temp_bin, y = normalized_rides, color = user_type)) +\n  geom_line(size = 1.2) +\n  labs(\n    title = \"Normalized Avg Hourly Rides vs Temperature\",\n    x = \"Temperature (°C)\",\n    y = \"Normalized Avg Hourly Rides\",\n    color = \"User Type\"\n  ) +\n  scale_color_manual(values = c(\"subs\" = \"darkblue\", \"cust\" = \"darkorange\", \"avg\" = \"black\")) +\n  theme_minimal()\n\n\n\n\n\nFocused on duration, distance, and their distributions by user type or cluster.\n\n\n\n  \n\nRide duration distribution for customers and subscribers. Subscriber rides tend to be shorter and more consistent, while customer rides show a broader range.\n\n\n\n\nThis histogram shows how ride durations differ between Subscribers and Customers. The distribution is plotted as a count of rides by duration (in minutes), revealing distinct usage patterns between user types.\n\n\n\n\nX-Axis: Ride duration in minutes, from 0 to 200 minutes.\nY-Axis: Count of rides in each duration bin.\nBars:\n\nBlue (Subscribers): Rides tightly clustered around shorter durations.\nOrange (Customers): Rides more spread out, with a longer tail.\n\nBin Width: 2 minutes per bar.\n\n\n\n\nThis visualization compares usage patterns between customers and subscribers, showing that the two groups engage with the bike share system very differently in terms of how long they ride.\n\n\n\n\nSubscribers:\n\nMajority of rides are under 30 minutes.\nStrong peak around 10–15 minutes.\nRapid drop-off after 30 minutes, suggesting time-constrained rides (possibly to avoid overage fees).\n\nCustomers:\n\nRide duration distribution is flatter and broader.\nSignificant number of rides extend beyond 30 minutes.\nTail extends beyond 100 minutes, though with diminishing frequency.\n\n\n\n\n\n\nSubscriber rides are likely more utilitarian in nature, for example commutes or quick errands, further shaped by pricing plans that encourage shorter trips.\nCustomer rides are more exploratory or recreational, often longer and less time-sensitive.\nThe chart highlights a fundamental behavioral difference in how the system is used by each group.\n\n\n\n\n\nDuration is measured from ride start to ride end.\nRides over 200 minutes are excluded for scale clarity.\nThe bin width used here is 2 minutes, offering good resolution of short trips.\n\n\n\n\nggplot(ride_durations, aes(x = duration_min, fill = user_type)) +\n  geom_histogram(binwidth = 2, position = \"identity\", alpha = 0.6) +\n  labs(\n    title = \"Ride Duration Distribution\",\n    x = \"Duration (minutes)\",\n    y = \"Ride Count\"\n  ) +\n  scale_fill_manual(values = c(\"subscriber\" = \"#1f77b4\", \"customer\" = \"#ff7f0e\")) +\n  scale_y_continuous(labels = label_number(scale_cut = cut_short_scale())) +\n  theme_minimal()\n\n\n\n\n\n  \n\nDensity plot of ride durations by user type. Subscribers tend to take shorter trips, while customers have more varied and longer rides.\n\n\n\n\nThis density plot visualizes the distribution of ride durations for customers and subscribers, providing a smoothed alternative to histograms for easier comparison of patterns.\n\n\n\n\nX-Axis: Ride duration in minutes (0–60 min).\nY-Axis: Density estimate of ride frequency.\nLines/Areas:\n\nBlue (Subscribers): High, narrow peak at short durations.\nOrange (Customers): Flatter, broader distribution extending to longer rides.\n\nSmoothing: Kernel density estimation applied with default bandwidth.\n\n\n\n\n\nSubscribers:\n\nStrong peak centered around ~10–15 minutes.\nRapid decline beyond ~20 minutes.\nIndicates trips optimized for commuting or quick errands.\n\nCustomers:\n\nLess pronounced peak.\nLong tail extending to ~60 minutes.\nReflects more recreational or exploratory rides.\n\n\n\n\n\nThe contrasting shapes highlight different usage patterns:\n\nSubscribers prioritize efficiency and short trips, likely influenced by pricing incentives and commute needs.\nCustomers are more likely to take longer rides with varied trip purposes.\n\n\n\n\n\nTrip Data: Divvy ride records from:\n\n2013–2019 (S3 archive)\n2023–2025 (City of Chicago Data Portal)\n\n\n\n\n\n\nSelected rides where:\n\nuser_type is 0 (subscriber) or 1 (customer).\nend_time &gt; start_time.\nDuration &lt; 200 minutes.\n\nDuration computed as (end_time - start_time) / 60.\nNo filtering by station type.\n\n\n\nggplot(ride_durations, aes(x = duration_min, color = user_type, fill = user_type)) +\n     geom_density(alpha = 0.3) +\n     labs(title = \"Ride Duration Density\", x = \"Duration (minutes)\", y = \"Density\") +\n     scale_color_manual(values = c(\"subscriber\" = \"#1f77b4\", \"customer\" = \"#ff7f0e\")) +\n     scale_fill_manual(values = c(\"subscriber\" = \"#1f77b4\", \"customer\" = \"#ff7f0e\")) +\n     theme_minimal()\n\n\n\n\n\n\n  \n\nBox plot of ride durations by user type. Subscribers have shorter, more consistent trips, while customers exhibit longer and more variable ride times.\n\n\n\n\nThis box plot compares the distribution of ride durations between subscribers and customers, emphasizing differences in median, spread, and outliers.\n\n\n\n\nX-Axis: User Type (Subscriber, Customer).\nY-Axis: Ride Duration in Minutes (0–200 min).\nBoxes:\n\nShow interquartile range (25th–75th percentile).\nCentral line indicates the median ride duration.\n\nWhiskers and Outliers:\n\nWhiskers extend to ~1.5× interquartile range (IQR).\nOutliers plotted with low opacity for clarity.\n\n\n\n\n\n\nSubscribers:\n\nMedian ride duration is substantially lower.\nTight interquartile range, indicating consistent short trips.\nFewer extreme outliers.\n\nCustomers:\n\nHigher median ride duration.\nWide interquartile range, reflecting greater variability.\nSubstantial number of longer-duration outliers.\n\n\n\n\n\nThe data reinforces prior findings that:\n\nSubscribers ride mainly for commuting or quick tasks, resulting in shorter, predictable durations.\nCustomers tend to use bikes more recreationally, leading to longer, less consistent trips.\n\n\n\n\n\nTrip Data: Divvy rides from:\n\n2013–2019 (S3 archive)\n2023–2025 (City of Chicago Data Portal)\n\n\n\n\nSQL Query Used to Retrieve Data:\n# Connect to the SQLite database\ncon &lt;- dbConnect(RSQLite::SQLite(), \"caseStudy.db\")\n\n# Pull ride durations for valid subscriber/customer rides under 60 min\nride_durations &lt;- dbGetQuery(con, \"\n  SELECT\n    CASE user_type\n      WHEN 0 THEN 'subscriber'\n      WHEN 1 THEN 'customer'\n    END AS user_type,\n    (end_time - start_time) / 60.0 AS duration_min\n  FROM rides\n  WHERE user_type IN (0, 1)\n    AND end_time &gt; start_time\n    AND (end_time - start_time) &lt; 12000\n\")\n\n# Disconnect\n dbDisconnect(con)\n\n\n\nggplot(ride_durations, aes(x = user_type, y = duration_min, fill = user_type)) +\n     geom_boxplot(outlier.alpha = 0.1) +\n     labs(title = \"Ride Duration by User Type\", x = \"\", y = \"Duration (minutes)\") +\n     scale_fill_manual(values = c(\"subscriber\" = \"#1f77b4\", \"customer\" = \"#ff7f0e\")) +\n     theme_minimal()\n\n\n\n\n\n\n  \n\nRide Duration Distribution by Day Type (Customer Rides Only). This density plot shows the distribution of ride durations in minutes for non-tourist customer rides, separated by weekdays and weekends. Weekday rides tend to peak slightly earlier and higher than weekend rides, indicating a stronger presence of short utility trips during the work week.\n\n\n\n\nThis kernel density plot compares ride durations (in minutes) for non-tourist customer bike rides, distinguishing between weekday and weekend behavior. It focuses exclusively on non-subscriber riders whose trips did not start or end near tourist destinations.\n\n\n\n\nX-Axis: Ride Length (minutes), ranging from 0 to 150.\nY-Axis: Density (smoothed kernel estimation).\nColors:\n\nWeekday (Blue): Tighter concentration at shorter durations.\nWeekend (Orange): Broader peak, more long-duration variability.\n\nPlot Type: Density plot with alpha blending to show overlap.\n\n\n\n\n\nWeekday rides are shorter on average, peaking around 6–8 minutes, suggesting quick trips.\nWeekend rides peak later (~8–10 minutes) and show a longer tail.\nBoth distributions are right-skewed, confirming the majority of rides are under ~15 minutes.\n\n\n\n\n\nWeekday trips are likely task-focused (errands, commuting).\nWeekend trips are more discretionary and potentially recreational.\nThe consistent shape across days supports the idea of habitual short-distance usage among non-tourist customers.\n\n\n\n\nThis chart can be applied to:\n\nDemand modeling and pricing strategies sensitive to day type.\nUser segmentation based on duration patterns.\nPlanning operational resources around expected trip lengths.\n\n\n\n\n\nData Filtering:\n\nuser_type = customer\nExcluded known tourist stations.\n\nDuration: Calculated as (end_time - start_time) / 60.\nKernel Bandwidth: Automatically selected by ggplot2.\nRides over 150 minutes excluded to improve interpretability.\n\n\n\n\n\nData Frame: non_tourist_customer_rides_df\n\nDerived from the rides table filtered for customer trips, start/end station IDs, and date range.\nPreprocessed with timezone adjustment to Chicago local time.\n\n\n\n\n\nggplot(non_tourist_customer_rides_df, aes(x = ride_length_min, fill = week_part)) +\n  geom_density(alpha = 0.4) +\n  scale_fill_manual(values = c(\"Weekday\" = \"darkblue\", \"Weekend\" = \"darkorange\")) +\n  labs(\n    title = \"Non-Tourist Customer Ride Duration by Weekday vs Weekend\",\n    x = \"Ride Length (minutes)\",\n    fill = \"Day Type\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n  \n\nRide Duration Density for Non-Tourist Customer Trips. This smoothed density plot shows how ride lengths are distributed among customer (non-subscriber) rides that do not involve tourist stations.\n\n\n\n\nThis density plot illustrates the distribution of ride durations (in minutes) for trips taken by non-tourist customers. The visualization focuses on how frequently different ride lengths occur, highlighting the most common trip durations.\n\n\n\n\nX-Axis: Ride Length (minutes), typically ranging from 0 to ~150.\nY-Axis: Density (smoothed probability density).\nPlot Style: Single density curve filled in orange to show concentration of rides.\n\n\n\n\n\nThe distribution is sharply right-skewed, with most rides lasting under ~15 minutes.\nA clear peak appears between ~6–10 minutes, reflecting short urban trips.\nThe long tail shows occasional longer rides, although these are much less frequent.\n\n\n\n\n\nShort rides dominate customer usage patterns, consistent with quick errands or intra-neighborhood trips.\nThe lack of a secondary peak suggests relatively uniform short-duration behavior among these riders.\nLonger rides may represent recreational trips or exploratory use.\n\n\n\n\nThis visualization is useful for:\n\nUnderstanding the central tendency and spread of ride lengths.\nSupporting decisions about pricing (e.g., time-based fees).\nTailoring operational planning for short-trip dominance among customer riders.\n\n\n\n\n\nData Filtering:\n\nOnly includes customer rides.\nExcludes trips starting or ending at tourist stations.\n\nRide Length Calculation:\n\n(end_time - start_time) / 60.\n\nKernel Bandwidth: Auto-selected by ggplot2.\n\n\n\n\n\nData Frame: non_tourist_customer_rides_df\n\nCreated by filtering the rides table to include only customer trips with relevant station IDs.\nConverted timestamps to local time for consistency.\n\n\n\n\n\nggplot(non_tourist_customer_rides_df, aes(x = ride_length_min)) +\n  geom_density(fill = \"darkorange\") +\n  labs(\n    title = \"Non-Tourist Customer Ride Duration Density\",\n    x = \"Ride Length (minutes)\",\n    y = \"Density\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n  \n\nRide duration density for non-tourist loop rides taken by customers. The strong concentration of short rides suggests quick, casual trips returning to the same station.\n\n\n\n\nThis density plot shows the distribution of ride lengths (in minutes) for customer rides that start and end at the same station. Known as loop rides. Also trips involving tourist stations are excluded.\n\n\n\n\nX-Axis: Ride Length (minutes), ranging from 0 to 150.\nY-Axis: Density (area under curve sums to 1).\nFill Color: Orange shading under the curve.\n\n\n\n\n\nClear peak between 3–7 minutes, indicating many short loop trips.\nSteady decline in frequency as ride durations increase.\nVery long rides (over ~60 minutes) are rare but do exist.\n\n\n\n\n\nThe strong skew toward short rides reinforces the idea that many loop trips are quick, casual uses, possibly for errands or brief leisure.\nThe lack of a secondary peak suggests there is not a distinct long-ride group among non-tourist customers.\n\n\n\n\n\nThis subset was filtered to include only loop rides (start_station_id == end_station_id) and to exclude known tourist stations.\nDurations are calculated as ride end time minus start time, expressed in minutes.\nSmoothed density estimation was applied rather than a histogram.\n\n\n\n\nUnfortunately, the exact R code could not be recovered.\nHowever, it likely resembled:\nggplot(loop_rides_non_tourist_df, aes(x = ride_length_min)) +\n  geom_density(fill = \"orange\", alpha = 0.6) +\n  labs(\n    title = \"Non-Tourist Customer Ride Duration for Loop Rides\",\n    x = \"Ride Length (minutes)\",\n    y = \"Density\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n  \n\nRide Duration vs. Station Distance (Non-Tourist Customer Rides) This scatterplot displays the relationship between ride length and distance between stations. While longer distances generally correspond to longer durations, many short-distance rides also exhibit long durations, suggesting varied usage patterns. A linear reference line highlights the lower boundary of likely direct trips.\n\n\n\n\nThis scatterplot shows the relationship between ride duration and station-to-station distance for non-tourist customer rides. A linear reference line illustrates the general trend.\n\n\n\n\nX-Axis: Distance Between Stations (km), 0–30.\nY-Axis: Ride Duration (minutes), 0–150.\nPoints: Green dots for individual rides.\nLine: Blue linear fit (least squares).\n\n\n\n\n\nDense cluster of short rides with low durations.\nHigh variance: many short trips took long times.\nSparse long-distance trips with a broad range of durations.\nBlue line suggests the fastest plausible rides for a given distance.\n\n\n\n\n\nClear positive correlation between distance and time.\nWide variability suggests many rides included stops, detours, or leisurely pacing.\n\n\n\n\n\nIdentify outlier usage patterns.\nUnderstand trip efficiency and routing behavior.\nInform operational planning for short vs. long trips.\n\n\n\n\n\nRide Data: Non-tourist customer rides filtered to exclude trips that start and end at the same station.\nStation Coordinates: Merged from cleaned station dataset(s).\nTime Frame: 2023 onward, as defined in the project scope.\n\n\n\n\nlibrary(ggplot2)\nggplot(non_loop_rides_df, aes(x = distance_km, y = ride_length_min)) +\n  geom_point(alpha = 0.05, color = \"darkgreen\") +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"blue\") +\n  labs(\n    title = \"Ride Duration vs. Station Distance\",\n    x = \"Distance Between Stations (km)\",\n    y = \"Ride Length (minutes)\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n  \n\nDistribution of ride durations for non-tourist customer trips. The histogram shows that the vast majority of trips are short in duration, tapering off beyond 20 minutes.\n\n\n\n\nThis histogram depicts the distribution of ride durations (in minutes) for casual rides that start and end outside tourist areas. Each bar represents the count of trips falling within a 5-minute interval.\n\n\n\n\nX-Axis: Ride Length (minutes), binned in 5-minute increments.\nY-Axis: Number of rides in each duration bin.\nBars: Filled in dark orange with white borders for clarity.\n\n\n\n\n\nThe distribution is heavily right-skewed, with most rides lasting under ~15–20 minutes.\nA clear peak appears in the 0–5 minute bin, highlighting frequent short trips.\nFrequency decreases rapidly as duration increases.\nOccasional longer trips are visible in the long tail.\n\n\n\n\n\nCasual riders overwhelmingly use the system for short trips.\nThe lack of secondary peaks suggests uniform trip purposes, likely errands or last-mile transport.\nLonger rides may reflect recreational or exploratory use, but they are relatively rare.\n\n\n\n\nThis chart is helpful for:\n\nInforming policies about time-based pricing tiers.\nUnderstanding baseline trip durations among casual riders.\nSupporting planning of rebalancing or maintenance cycles.\n\n\n\n\n\nData Filtering:\n\nIncludes only customer rides.\nExcludes tourist station trips.\n\nRide Length Calculation:\n\n(end_time - start_time) / 60.\n\nBin Width:\n\n5 minutes.\n\n\n\n\n\n\nData Frame: non_tourist_customer_rides_df\n\nFiltered from the rides table by user type and station criteria.\n\n\n\n\n\nggplot(non_tourist_customer_rides_df, aes(x = ride_length_min)) +\n  geom_histogram(binwidth = 5, fill = \"darkorange\", color = \"white\") +\n  labs(\n    title = \"Non-Tourist Customer Ride Duration Distribution\",\n    x = \"Ride Length (minutes)\",\n    y = \"Number of Rides\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n  \n\nRide count by station-to-station distance for non-tourist customer trips, highlighting common trip lengths in the 0–2 km range.\n\n\n\n\nThis bar chart shows the number of non-tourist customer rides grouped by the straight-line distance between the starting and ending stations. The visualization makes clear which distance ranges are most commonly traveled.\n\n\n\n\nX-Axis: Distance between stations (km), from 0 to 10 km.\nY-Axis: Number of rides in each distance bin (up to ~60,000 rides).\nBars:\n\nFilled in dark orange.\nLabeled at notable peaks for emphasis.\n\n\n\n\n\n\nPrimary Peaks:\n\n~0.85 km: 58,268 rides.\n~1.35 km: 54,563 rides.\n\nSharp drop-off beyond 2 km, with very few rides exceeding 5 km.\nThe shape strongly suggests most casual rides occur within a short radius.\n\n\n\n\n\nShort trips dominate non-subscriber usage, likely reflecting quick local errands or last-mile transit.\nPeaks may correspond to popular station pairs located 3–8 blocks apart.\nThe pattern mirrors the density distribution of unique station-to-station distances, but here each ride contributes equally to counts.\n\n\n\n\n\nRide Records: Non-subscriber rides starting after 2023-01-01.\nFilters Applied:\n\nExcluded loop rides (start station = end station).\nLimited to non-tourist stations.\nCalculated distance using Haversine formula between station coordinates.\nIncluded only trips with distances ≤10 km.\n\n\n\n\n# Bin and count rides by distance\nride_counts_by_distance &lt;- non_loop_rides_df %&gt;%\n  filter(distance_km &lt;= 10) %&gt;%\n  mutate(distance_bin = round(distance_km / 0.1) * 0.1) %&gt;%\n  count(distance_bin)\n\n# Plot\nggplot(ride_counts_by_distance, aes(x = distance_bin, y = n)) +\n  geom_col(fill = \"darkorange\", width = 0.08) +\n  geom_text(\n    data = filter(ride_counts_by_distance, distance_bin %in% c(0.85, 1.35)),\n    aes(label = paste0(\"Peak: \", distance_bin, \" km\\n\", scales::comma(n))),\n    vjust = -0.5,\n    size = 3.5\n  ) +\n  labs(\n    title = \"Non-Tourist Customer Ride Count by Station-to-Station Distance\",\n    x = \"Distance Between Stations (km)\",\n    y = \"Number of Rides\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n  \n\nDistribution of station-to-station distances for non-tourist customer rides. Most trips are under 5 km, confirming primarily short-distance usage.\n\n\n\n\nThis density plot visualizes the distribution of station-to-station distances for rides taken by customer (non-subscriber) riders that do not involve tourist stations. The x-axis represents the distance in kilometers, and the y-axis shows the relative density of rides occurring at each distance.\n\n\n\n\nX-Axis: Distance Between Stations (km), ranging from 0 to ~30 km\n\nY-Axis: Relative probability density of rides at each distance\n\nPlot Style: Smoothed density plot (not a histogram), area under the curve normalized to 1\n\n\n\n\nThis chart highlights the typical distance casual riders travel between stations when tourist hotspots are excluded, revealing patterns in local, everyday bike-share use.\n\n\n\n\nPeak around 1 km: Most rides are short hops between closely spaced stations.\nSteep decline: Density drops quickly after ~5 km.\nLong tail: A small number of rides extend past 10 km.\nVery few extreme values: Rides over 20 km are rare outliers.\n\n\n\n\n\nThe pronounced twin peaks around 1 km suggests short-distance, utility-oriented trips, like errands or first-/last-mile commuting.\nThe long but thin tail implies that while occasional longer rides occur, they are uncommon among non-tourist customer riders.\nThe lack of a multiple wide spaced peaks differentiates this distribution from tourist-heavy patterns, which often show multiple modes due to popular routes.\n\n\n\n\n\nDistance Calculation: Great-circle distance (Haversine formula) computed between station coordinates.\nFiltering: Tourist stations excluded via station ID filtering.\nDensity Scaling: The y-axis shows density, not raw counts. The area under the curve sums to 1.\n\n\n\n\nggplot(non_loop_rides_df, aes(x = distance_km)) +\n  geom_density(fill = \"darkorange\", alpha = 0.6) +\n  labs(\n    title = \"Non-Tourist Customer Distribution of Station-to-Station Distances\",\n    x = \"Distance Between Stations (km)\",\n    y = \"Density\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n  \n\nRide Distance Distribution by Duration Cluster (Customer Rides Only) This density plot compares ride distances for non-tourist, non-loop customer rides, grouped into clusters based on ride duration. Short-duration rides are tightly concentrated around 1–2 km, medium-duration rides cover a broader 2–6 km range, and long-duration rides extend further, reflecting distinct usage behaviors within the same user group.\n\n\n\n\nThis kernel density plot illustrates the distribution of ride distances (in kilometers) for non-tourist, non-loop customer rides, broken out by ride duration clusters labeled Short, Medium, and Long. Clustering these customer rides by duration helps uncover distinct usage patterns, such as short errand-like trips versus longer recreational journeys, without needing to segment riders further or rely on additional metadata.\n\n\n\n\nX-Axis (Distance in km):\n\nRanges from 0 to 10 km.\nRepresents the straight-line distance between start and end stations (minimum possible distance). Note: this is not actual path distance.\n\nY-Axis (Density):\n\nProbability density of ride distances within each cluster.\nHigher peaks = more common distances.\n\nCluster Colors:\n\nShort (Blue) – sharp peak around 1–2 km.\nMedium (Green) – broad distribution across ~2.5–6 km.\nLong (Red/Pink) – flatter spread across 3–10 km.\n\n\n\n\n\n\nShort rides:\n\nHighest density overall.\nStrong preference for distances under 3 km.\n\nMedium rides:\n\nBroadest range of distances.\nTransitional usage pattern overlapping short and long rides.\n\nLong rides:\n\nLess frequent but cover widest distance range.\n\n\n\n\n\n\nShort-duration trips are likely local, last-mile or neighborhood errands.\nMedium rides reflect mixed use: commuting and recreation.\nLong rides are more destination-focused or leisurely.\n\n\n\n\nThis chart helps:\n\nUnderstand non-tourist customer ride behavior segmented by trip duration.\nSupport targeted strategies for operations and pricing.\nInform planning of infrastructure, such as dock placement or service areas.\n\n\n\n\n\nRide Records: Filtered to exclude subscriber rides, tourist stations, and loop rides (rides that start and end at the same station).\nDistance Calculation: Haversine distance between station coordinates.\n\n\n\nggplot(non_loop_rides_df, aes(x = distance_km, fill = duration_cluster)) +\n  geom_density(alpha = 0.5) +\n  scale_fill_manual(values = c(\n    \"Short\" = \"blue\",\n    \"Medium\" = \"green\",\n    \"Long\" = \"red\"\n  )) +\n  labs(\n    title = \"Non-Tourist, Non-Loop Customers Ride Distance (km) Distribution by Ride Duration Cluster\",\n    x = \"Distance (km)\",\n    y = \"Density\",\n    fill = \"Duration Cluster\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n  \n\nLoop ride durations among non-tourist customers show a consistently skewed distribution, regardless of time of day or whether the ride occurred on a weekday or weekend.\n\n\n\n\nThis visualization shows how loop ride durations vary by hour of day and by whether the ride occurred on a weekday or weekend. Each subplot represents a single hour of the day, illustrating patterns of ride duration frequency across time.\n\n\n\n\nX-Axis: Ride Length (minutes)\nY-Axis: Ride Count\nFaceting: 24 panels, each corresponding to an hour of day (0–23)\nColor Encoding: Fill colors differentiate combinations of weekday/weekend and hour\nPlot Type: Histogram with bin width = 1 minute\n\n\n\n\n\nRides are heavily skewed toward short durations in all panels.\nMost rides fall under 10–15 minutes, regardless of hour.\nMidday and afternoon periods show slightly higher total counts.\nNo clear hour shows a major deviation in distribution shape.\n\n\n\n\n\nLoop rides are generally short-duration recreational trips, rather than commutes.\nThe lack of time-of-day variation suggests consistent rider behavior.\nThe similarity between weekday and weekend distributions reinforces this interpretation.\n\n\n\n\nThis chart supports:\n\nService planning: anticipating typical ride lengths for rebalancing.\nUser engagement strategies: targeting short-trip promotions.\nOperational decisions: confirming the limited variability in loop ride duration.\n\n\n\n\n\nData limited to rides starting and ending at the same station (loop rides).\nOnly non-tourist stations were included.\nBin width of 1 minute chosen for granularity.\nDuration computed as end_time - start_time in minutes.\n\n\n\n\n\nDatabase Table: rides\nFiltering Criteria:\n\nstart_station_id = end_station_id\nuser_type = customer\nExcluded known tourist stations\n\nTime Zone: Converted to Chicago local time\n\n\n\n\nggplot(loop_rides_non_tourist, aes(x = ride_length_min, fill = interaction(week_part, hour_local))) +\n  geom_histogram(binwidth = 1, position = \"identity\", alpha = 0.5) +\n  facet_wrap(~ hour_local, ncol = 4) +\n  labs(\n    title = \"Loop Ride Length Distribution by Week Part and Time of Day\",\n    x = \"Ride Length (minutes)\",\n    y = \"Ride Count\",\n    fill = \"Week/Time\"\n  ) +\n  theme_minimal()\n\n\n\n\n\nThis section presents spatial insights into non-tourist customer rides, highlighting both where trips originate and terminate (station popularity) and how far riders typically travel between stations. Together, these views illustrate usage density and trip distances across the system.\n\n\n\n  \n\nTop 25 stations (excluding tourist locations) ranked by total customer ride volume. Bars highlight the most frequently used start locations among casual riders.\n\n\n\n\nThis horizontal bar chart displays the 25 non-tourist stations with the highest number of customer rides. Each bar represents a single station, ranked from lowest to highest.\n\n\n\n\nX-Axis: Station names (rotated vertically by using coord_flip()).\nY-Axis: Number of customer rides originating at each station.\nBars:\n\nColored steel blue.\nSorted so that the most-used stations appear at the top of the chart.\n\n\n\n\n\n\nThe highest-ranking stations have significantly more rides than those near the bottom of the top 25.\nUsage distribution shows a steep drop-off after the first few most popular stations.\nThis pattern suggests localized hubs of casual rider activity outside major tourist zones.\n\n\n\n\n\nNon-tourist stations can still accumulate large ride volumes, likely reflecting:\n\nProximity to residential neighborhoods.\nAccess to transit nodes or commercial areas.\nPopularity among local users for short trips and errands.\n\n\n\n\n\n\nInput Table: Rides table in caseStudy.db.\nFilters Applied:\n\nOnly rides with user_type = 1 (customers).\nStart stations excluding predefined tourist station IDs.\nGrouped and aggregated ride counts by start station.\nJoined with station metadata to retrieve station names.\n\n\n\n\n\nggplot(top_non_tourist_stations_named, aes(\n   x = reorder(name, customer_ride_count),\n   y = customer_ride_count\n   )) +\n   geom_col(fill = \"steelblue\") +\n   coord_flip() +\n   labs(\n     title = \"Top 25 Non-Tourist Stations by Customer Ride Count\",\n     x = \"Station\",\n     y = \"Customer Rides\"\n) +\ntheme_minimal()\n\n\n\n\n\n  \n\nDistribution of station-to-station distances for non-tourist customer rides under 10 km. Distinct peaks highlight preferred trip lengths for local travel.\n\n\n\n\nThis density plot visualizes the distribution of station-to-station distances under 10 km for rides taken by customer (non-subscriber) riders that did not involve tourist stations. The focus on shorter trips reveals finer patterns in local travel behavior.\n\n\n\n\nX-Axis: Distance Between Stations (km), ranging from 0 to 10 km\n\nY-Axis: Relative probability density of rides occurring at each distance\n\nPlot Style: Smoothed density plot with area normalized to 1\n\nAnnotations: Peaks labeled to highlight the most common trip lengths\n\n\n\n\nBy excluding longer trips (&gt;10 km), this chart provides a clearer view of the most typical ride distances, supporting planning and operational decisions about station placement and bike redistribution.\n\n\n\n\nPrimary Peak (0.86 km): The most common ride length, suggesting very short intra-neighborhood trips.\nSecondary Peak (1.29 km): Another frequently observed trip length, likely representing local errands or commutes between adjacent districts.\nSteep Decline: Density decreases sharply beyond 4–5 km.\nAbsence of Long Tail: Filtering out longer rides eliminates noise from infrequent long-distance trips.\n\n\n\n\n\nShort-Distance Focus: The dual peaks reinforce that casual users primarily rely on the system for short urban journeys.\nPotential Trip Typologies:\n\n~1 km: Last-mile or neighborhood-scale trips.\n~2–3 km: Short errands or transit connections.\n\nThe low density beyond 5 km indicates that even non-tourist customers rarely use the bikes for longer travel.\n\n\n\n\n\nDistance Calculation: Computed with the Haversine formula between station coordinates.\nFiltering: Only trips with distance ≤10 km are included.\nAnnotations: Peaks were identified programmatically and labeled on the chart.\nDensity Scaling: Y-axis reflects probability density, not counts.\n\n\n\n\nggplot(non_loop_rides_df %&gt;% filter(distance_km &lt;= 10), aes(x = distance_km)) +\n  geom_density(fill = \"darkorange\", alpha = 0.6) +\n  geom_point(data = top_peaks, aes(x = x, y = y), color = \"gray\", size = 2) +\n  geom_text(\n    data = top_peaks,\n    aes(x = x, y = y, label = paste0(\" \", round(x, 2), \" km\")),\n    angle = 25,\n    vjust = 0,\n    hjust = 0,\n    size = 3.5,\n    color = \"black\"\n  ) +\n  labs(\n    title = \"Non-Tourist Customer Distribution of Station-to-Station Distances (≤10 km)\",\n    x = \"Distance Between Stations (km)\",\n    y = \"Density\"\n  ) +\n  theme_minimal()\n\n\n\n\n\nInsights about bikes themselves and system-level metrics.\n\n\n\n  \n\nAverage daily rides by bike type and user type after the introduction of electric bikes and scooters. Classic bikes remain dominant among subscribers, while electric modes see substantial adoption by both user groups.\n\n\n\n\nThis bar chart displays the average number of daily rides by bike type, grouped by user type (Subscriber vs. Customer), for the period after the introduction of electric bikes and scooters.\n\n\n\n\nX-Axis (Bike Type):\n\nclassic_bike\ndocked_bike\nelectric_bike\nelectric_scooter\n\nY-Axis (Average Rides per Day):\n\nRanges from 0 to over 4,500 rides per day.\n\nColor Legend:\n\nRed = Subscriber\nTeal = Customer\n\n\n\n\n\n\nClassic Bikes:\n\nMost used overall.\nSubscribers (red) significantly outnumber Customers in ride volume.\n\nDocked Bikes:\n\nVery low usage overall.\nOnly Customers use docked bikes in this dataset. Subscribers appear not to use docked bikes.\n\nElectric Bikes:\n\nPopular among both user types.\nSubscribers still dominate, but the Customer share is substantial.\n\nElectric Scooters:\n\nSlightly more popular with Customers than Subscribers.\nTotal volume is lower than bikes but non-trivial.\n\n\n\n\n\n\nSubscriber Preference:\n\nStrongly favors classic and electric bikes.\nLikely reflects commuting and utilitarian travel patterns.\n\nCustomer Preference:\n\nMore evenly spread across bike types.\nHigher share of docked bike and scooter usage, suggesting casual or occasional use.\n\nModal Shift:\n\nThe presence of electric modes (bike and scooter) introduces significant usage from both user groups, possibly pulling some traffic away from classic bikes.\n\n\n\n\n\nThis visualization supports:\n\nInfrastructure planning (e.g., expansion of electric charging or docking stations),\nMarketing strategy (targeting modal preferences by user type),\nEvaluating post-launch success of electric mobility options.\n\n\n\n\n\nQuery to Load Data into R:\n\npost_electric_rides_df &lt;- dbGetQuery(con, \"SELECT\n   DATE(start_time, 'unixepoch') AS ride_date,\n   user_type,\n   bike_type,\n   COUNT(*) AS ride_count,\n   AVG((end_time - start_time) / 60.0) AS avg_duration_minutes\nFROM rides\nWHERE start_time &gt;= strftime('%s', '2023-01-01') -- first e-bike appeared\nGROUP BY ride_date, user_type, bike_type;\")\n\n- **Data Transformation in R:**\n\ndaily_avg_df &lt;- post_electric_rides_df %&gt;%\n  group_by(user_type, bike_type) %&gt;%\n  summarise(\n    avg_rides_per_day = mean(ride_count),\n    .groups = \"drop\"\n  )\n\nR Code Used to Generate Chart:\n\nggplot(daily_avg_df, aes(\n     x = bike_type,\n     y = avg_rides_per_day,\n     fill = fct_recode(as.factor(user_type),\n                       \"Subscriber\" = \"0\",\n                       \"Customer\" = \"1\")\n )) +\n     geom_bar(stat = \"identity\", position = \"dodge\") +\n     labs(\n         title = \"Average Daily Rides by Bike Type and User Type (Post-Electric Launch)\",\n         x = \"Bike Type\",\n         y = \"Average Rides per Day\",\n         fill = \"User Type\"\n     ) +\n     theme_minimal()\n\n\n\n\n\n  \n\nDistribution of total ride counts per bike across the fleet, highlighting underused outliers and high-mileage bikes.\n\n\n\n\nThis histogram visualizes the distribution of total ride counts per bike, grouped into buckets of 100 rides each. It provides insight into how evenly or unevenly individual bikes are used over the dataset’s timespan.\n\n\n\n\nX-Axis (Ride Count Range):\n\nLabeled in bins of 100 rides (e.g., 0-99, 100-199, …, 5500-5599).\nRepresents the total number of rides associated with each bike.\n\nY-Axis (Number of Bikes):\n\nIndicates how many bikes fall within each ride count range.\nPeaks near 300 bikes in the most frequently occurring bins.\n\n\n\n\n\n\nBars:\n\nColored purple with black borders.\nUniform width, covering each 100-ride range.\nDistribution forms a roughly symmetric bell-shaped curve centered around the 2700–3499 range.\n\n\n\n\n\n\nLow-end Outliers:\n\nA noticeable spike in the 0–99 bin (~130 bikes), suggesting a set of bikes with extremely limited or no use.\nMay include stolen, damaged, or new bikes added near the end of the data collection period.\n\nCore Distribution:\n\nThe majority of bikes (~200–280 per bin) fall between 2200–3999 rides.\nIndicates typical usage patterns and operational consistency.\n\nHigh-end Tail:\n\nUsage drops off steadily after ~4000 rides per bike.\nVery few bikes exceed 5000 rides.\n\n\n\n\n\n\nThe chart implies a relatively well-utilized fleet with a normal distribution centered around ~3000 rides per bike.\nThe left-side spike at 0–99 highlights potential outliers worth investigating:\n\nUnderused bikes,\nPossible malfunctions,\nSeasonal deployments,\nRecent fleet additions.\n\nThe right tail shows some high-mileage bikes that may be candidates for maintenance or replacement soon.\n\n\n\n\nThis visualization is valuable for:\n\nFleet maintenance planning (identify overused/underused bikes),\nLifecycle analysis (detect uneven distribution of wear),\nDeployment strategy (optimize rotation or redistribution).\n\n\n\n\nrides table in SQLite, queried for bike usage counts grouped by bike_id.\n\n\n.headers on\n.mode csv\n.output bike_ride_buckets.csv\nWITH bucketed AS (\n  SELECT\n    (ride_count / 100) * 100 AS bucket_start,\n    COUNT(*) AS bike_count\n  FROM (\n    SELECT bike_id, COUNT(*) AS ride_count\n    FROM rides\n    WHERE bike_id IS NOT NULL\n    GROUP BY bike_id\n  )\n  GROUP BY bucket_start\n  ORDER BY bucket_start\n)\nSELECT\n  bucket_start,\n  bucket_start + 99 AS bucket_end,\n  bike_count\nFROM bucketed;\n.output stdout\n\n\n\nset datafile separator \",\"\nset terminal pngcairo size 1000,600 enhanced font 'Verdana,10'\nset output 'bike_ride_bucket_histogram.png'\n\nset title \"Distribution of Ride Counts per Bike\"\nset xlabel \"Ride Count Range\"\nset ylabel \"Number of Bikes\"\nset style fill solid 1.0 border -1\nset boxwidth 0.9\nset grid ytics\nunset key\nset xtics rotate by -45\n\n# Format x-tics with the bucket label, like \"0–99\"\nplot 'bike_ride_buckets.csv' using ($0):3:xtic(strcol(1).\"-\".strcol(2)) with boxes\n\n\n\n\n\n\nWhere paths are not balanced in both directions by user type.\n\n\n\n  \n\nTop 20 most asymmetric ride paths by user type. Asymmetry ratio is calculated as the proportion of rides taken in one direction relative to the total rides between two stations. Distinct path preferences emerge between customers and subscribers.\n\n\n\n\nThis side-by-side horizontal bar chart displays the 20 most directionally imbalanced station pairs for each user type: customers and subscribers. These paths have the highest asymmetry ratios, indicating strong one-way usage patterns.\n\n\n\n\nX-Axis: Asymmetry Ratio (ranging up to ~1.0).\nY-Axis: Station pair labels (listed within each bar).\nPanels:\n\nLeft: Top asymmetric paths for Customers.\nRight: Top asymmetric paths for Subscribers.\n\n\n\n\n\n\nCustomers:\n\nTop asymmetric paths often involve major downtown locations such as Canal St, Clinton St, and Wacker Dr.\nPatterns likely reflect tourism, drop-offs, or infrequent return trips.\n\nSubscribers:\n\nAsymmetries cluster around recreational and waterfront areas such as Columbus Dr, Streeter Dr, Lake Shore Dr, Millennium Park, and McCormick Place.\nPatterns suggest consistent commuting or recreational flows.\n\n\n\n\n\n\nAsymmetry Ratio:\n\nDefined as: &gt; rides in one direction / total rides between the two stations.\nValues close to 1.0 mean most trips occur in a single direction.\n\nBehavioral Insight:\n\nCustomer asymmetry is oriented toward downtown ad hoc travel.\nSubscriber asymmetry is more tied to commuting and lakefront destinations.\n\nComparison:\n\nEven when overlapping in geography, the dominant flow directions and endpoints differ between user groups.\n\n\n\n\n\nThis visualization supports:\n\nIdentifying rebalancing needs.\nTargeting incentive programs to encourage return trips.\nUnderstanding travel patterns for infrastructure planning and operational improvements.\n\n\n\n\n\n\n  \n\nTop 20 bike-share station pairs with the most directional imbalance by user type. Customers show high asymmetry around central business district hubs, while subscriber asymmetries often reflect lakefront access or commuter endpoint behavior.\n\n\n\n\nThis chart shows the 20 most directionally imbalanced station pairs for customers and subscribers, ranked by asymmetry ratio. Each bar represents a station-to-station path where trips predominantly flow in one direction.\n\n\n\n\nX-Axis: Asymmetry Ratio (0.0 to ~0.7)\n\nA higher value indicates more strongly one-way flows.\n\nY-Axis: Station pairs, labeled inside the bars.\nPanels:\n\nOne for each user type (Customer and Subscriber).\n\n\n\n\n\n\nCustomers:\n\nHigh asymmetry centered around central business district stations and transit hubs.\n\nSubscribers:\n\nStrong asymmetry toward lakefront or edge-of-network destinations.\n\nContrast:\n\nCustomer asymmetry is urban-core focused.\nSubscriber asymmetry suggests recreation or commute endpoints.\n\n\n\n\n\n\nAsymmetry highlights operational imbalances and user behavior patterns.\nPaths with high one-way traffic often require rebalancing or targeted incentives.\n\n\n\n\nSupports:\n\nRebalancing plans.\nInfrastructure decisions.\nTargeted marketing to address directional demand.\n\n\n\n\nggplot(asym_top, aes(x = asymmetry_ratio, y = reorder(path_label, asymmetry_ratio))) +\n    geom_col(fill = \"darkblue\") +\n    geom_text(\n        aes(label = path_label),\n        x = 0.01,                   \n        hjust = 0,                  \n        color = \"white\",\n        size = 2.7,\n        fontface = \"plain\"\n    ) +\n    facet_wrap(~ user_type_label, scales = \"free_y\") +\n    labs(\n        title = paste(\"Top\", top_n, \"Most Asymmetric Paths by User Type\"),\n        x = \"Asymmetry Ratio\", \n        y = NULL\n    ) +\n    coord_cartesian(xlim = c(0, max(asym_top$asymmetry_ratio) + 0.10)) +\n    theme_minimal(base_size = 11) +\n    theme(\n        plot.title = element_text(hjust = 0.1),\n        axis.text.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        panel.grid.major.y = element_blank()\n    )\n\n\n\n\n\n  \n\nTop 20 bike-share station pairs with the most directional imbalance by user type. Customers show high asymmetry around central business district hubs, while subscriber asymmetries often reflect lakefront access or commuter endpoint behavior.\n\n\n\n\nTitle: Top 20 Most Asymmetric Paths by User Type X-Axis: Asymmetry Ratio (from 0.0 to ~0.7) Panels: Two side-by-side bar charts\n\nLeft panel: Top asymmetric paths for Customers\nRight panel: Top asymmetric paths for Subscribers\n\n\n\n\n\nAsymmetry Ratio\n\nA value approaching 1 indicates heavy one-way usage between a pair of stations. Rides commonly occur in one direction but rarely the other.\n\nCustomer Patterns\n\nConcentrated near transit stations and central business districts. Reflect unidirectional use, possibly due to nearby public transit hubs, tourism drop-offs, or lack of return trips.\n\nSubscriber Patterns\n\nFocus on lakefront access (e.g., Streeter Dr, Lake Shore Dr) and commuter endpoints. Suggest consistent commuting flows where riders may use other transportation methods for return trips (e.g., walking or transit).\n\nContrast\n\nWhile customers show asymmetry in the urban core, subscribers show it around recreational or edge areas."
  },
  {
    "objectID": "viz/visualizations.html#screenshots",
    "href": "viz/visualizations.html#screenshots",
    "title": "Visualizations",
    "section": "",
    "text": "Divvy Stations in QGIS\n\n\nThis is a screen shot of the Divvy Stations plotted in QGIS. This was found in Divvy_Stations_2013.shp.zip which was included in the Divvy_Stations_Trips_2013.zip file.\nThis plot was not used as part of the case study.\n\n\n\n\n\n  \n\nQGIS screenshot\n\n\nThis is a screenshot of the Divvy_Stations_2013 table taken from QGIS\nThis screenshot was not used in the case study it is included only for completeness and to support narrative details."
  },
  {
    "objectID": "side-quest/prj-grammar.html",
    "href": "side-quest/prj-grammar.html",
    "title": ".prj Grammar",
    "section": "",
    "text": "Is there a grammar for these .prj files?\nYes, there is a formal grammar for the Well-Known Text (WKT) that forms the content of ESRI .prj files. It’s a structured, machine-readable, and human-readable text markup language.\nThe WKT format was originally defined by the Open Geospatial Consortium (OGC), and these specifications often include a formal grammar, typically in Extended Backus-Naur Form (EBNF). ESRI’s implementation, while largely adhering to these OGC standards (specifically WKT 1 for most .prj files), has had some minor variations or stricter interpretations.\n\nThe OGC WKT Standard and its Grammar\nThe definitive grammar for WKT (both WKT 1 and the newer WKT 2) comes from the OGC.\n\nWKT 1 (OGC Abstract Specification Topic 2: Spatial Reference Systems, 1999/2001): This is the version most commonly found in older .prj files. The specification details the syntax using a formal grammar (often expressed in EBNF). It defines keywords like GEOGCS, PROJCS, DATUM, SPHEROID, PRIMEM, UNIT, and PARAMETER, along with the rules for nesting them and their arguments.\nWKT 2 (ISO 19162:2015 and ISO 19162:2019): This is the more recent standard, aiming to be more robust, less ambiguous, and to fully align with the ISO 19111 conceptual model for Coordinate Reference Systems. It introduces new keywords (e.g., GEODCRS, PROJCRS) and a more explicit structure for elements like units and coordinate operations. Many modern GIS software and libraries are moving towards WKT 2.\n\n\n\nHow to Find the Grammar\nYou can typically find the formal grammar (EBNF) within the official OGC specifications themselves. These documents are publicly available from the OGC website. For instance, searching for “OGC WKT grammar EBNF” or “ISO 19162 EBNF” will lead you to relevant parts of these standards.\n###Key Aspects of the WKT Grammar\nThe grammar defines:\n\nKeywords: Specific capitalized terms (e.g., PROJCS, GEOGCS, DATUM, SPHEROID, UNIT, PARAMETER).\nStructure: How these keywords are nested using parentheses () or square brackets [] (historically, some implementations were flexible with these).\nParameters/Arguments: The types of values associated with each keyword (e.g., string names in double quotes ““, floating-point numbers for values like semi-major axis, inverse flattening, parameter values, or angular/linear unit conversion factors).\nSeparators: Commas , are used to separate elements within a keyword’s definition.\nOrder: The order of elements within a keyword’s definition is strictly defined by the grammar (e.g., for SPHEROID, the name comes first, then the semi-major axis, then inverse flattening).\n\n\n\nESRI’s Interpretation\nESRI’s software (like ArcGIS Pro, ArcMap) reads and writes .prj files that adhere to a specific WKT syntax. While it largely matches OGC WKT 1, there have been historical nuances:\n\nCase Sensitivity: ESRI’s WKT is generally case-sensitive for keywords.\nWhitespace: While the OGC standard technically allows for minimal whitespace, ESRI .prj files are typically written as a single, continuous string without line breaks for maximum compatibility, though parsing software is often forgiving.\nNames: ESRI often uses specific naming conventions for internal identifiers within the WKT string (e.g., GCS_WGS_1984 instead of just WGS 84 for the GCS name).\nTOWGS84 Clause: As mentioned before, this clause was sometimes used in ESRI WKT 1 to embed datum transformation parameters. However, ESRI’s projection engine usually handles transformations dynamically rather than solely relying on this embedded information.\n\nIn essence, while ESRI .prj files adhere to a WKT grammar, it’s best to consider them as following the OGC WKT 1 specification, with ESRI’s specific naming conventions and occasional minor deviations. When dealing with WKT from different sources, it’s always good practice to use a robust geospatial library (like GDAL/PROJ) that can parse various WKT flavors and perform transformations accurately."
  },
  {
    "objectID": "side-quest/NAD83andGRS1980.html",
    "href": "side-quest/NAD83andGRS1980.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "You’re diving into the fundamental concepts of geodesy, which are crucial for understanding how GIS data accurately represents locations on Earth!\nLet’s break down NAD83 and the GRS 1980 spheroid.\n\nNAD83 (North American Datum of 1983)\nNAD83 is a horizontal and geometric control datum for the United States, Canada, Mexico, and Central America. In simpler terms, it’s a reference system that defines the latitude and longitude coordinates of points on the Earth’s surface within North America.\nHere’s what that means:\n\nDatum: A datum is a defined reference surface (like a spheroid) and a set of precisely measured points that are used to establish a coordinate system. It provides a fixed, known base from which all other points are measured.\nHorizontal and Geometric: This refers to the measurement of positions in terms of latitude and longitude (horizontal) and also accounting for the three-dimensional geometry of the Earth.\nGeocentric Origin: Unlike its predecessor (NAD27), NAD83 has its origin (0,0,0 point) at the Earth’s center of mass. This makes it more compatible with satellite-based positioning systems like GPS.\nDevelopment: NAD83 was released in 1986, using both ground-based and satellite observations (including GPS) to create a more accurate and consistent network of control points across the continent. It superseded the North American Datum of 1927 (NAD27), which was based on older technologies and a different reference ellipsoid.\nRealizations: Over time, with improved technology and more observations, NAD83 has undergone several adjustments (or “realizations”) to improve its accuracy. Examples include NAD83(CORS96), NAD83(NSRS2007), and NAD83(2011). While these are adjustments, they are still considered part of the same NAD83 datum.\nRelation to WGS84: When first published, NAD83 and WGS84 (World Geodetic System of 1984, which GPS natively uses) were considered virtually identical. However, because WGS84 is a global datum tied to the Earth’s center of mass and dynamic with respect to plate tectonics, while NAD83 is generally fixed to the North American tectonic plate, they have slowly drifted apart over time (typically by 1-2 meters). For most everyday mapping and GIS at larger scales, the differences might be negligible, but for high-precision surveying, transformations between them are necessary.\n\n\n\nGRS 1980 Spheroid (Geodetic Reference System 1980)\nThe GRS 1980 spheroid (often referred to as GRS80) is a mathematical model of the Earth’s shape that is used as the reference ellipsoid for the NAD83 datum.\nHere’s what that means:\n\nSpheroid (or Ellipsoid): The Earth is not a perfect sphere; it bulges slightly at the equator and is flattened at the poles, resembling an oblate spheroid. A spheroid is a mathematically defined, smooth surface that approximates the Earth’s actual shape.\nParameters: Spheroids are defined by two key parameters:\n\nSemi-major axis (equatorial radius): The radius from the center to the equator. For GRS 1980, this is 6,378,137 meters.\nInverse flattening: A value that describes how much the spheroid is flattened at the poles. For GRS 1980, this is approximately 1/298.257222101.\n\nGlobal Standard: GRS 1980 was adopted by the International Union of Geodesy and Geophysics (IUGG) in 1979 as a global standard.\nAccuracy: It is a modern, satellite-determined spheroid that provides a more accurate representation of the Earth’s shape compared to older, ground-measured ellipsoids (like the Clarke 1866 spheroid used by NAD27).\nNear Identical to WGS84 Ellipsoid: The GRS 1980 spheroid is very nearly identical in its dimensions to the WGS 1984 ellipsoid, which is why NAD83 and WGS84 were initially considered equivalent.\n\nIn essence, NAD83 is the system of coordinates used in North America, and the GRS 1980 spheroid is the mathematical model of the Earth’s shape that serves as the foundation for those coordinates. The datum (NAD83) tells you where the coordinate system starts and how it’s oriented, while the spheroid (GRS 1980) defines the shape of the Earth that the coordinates are mapped onto."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Case Study",
    "section": "",
    "text": "🚧 This case study is currently under construction.\nPlease check back soon for a complete walk-through, analysis, and visualizations."
  },
  {
    "objectID": "index.html#project-context",
    "href": "index.html#project-context",
    "title": "Case Study",
    "section": "Project Context",
    "text": "Project Context\nThis project satisfies the requirements of the Google Data Analytics capstone while also serving as a portfolio piece demonstrating:\n\nIndependent sourcing and integration of multi-year real-world data\nUse of tools beyond the course scope (e.g., SQLite, Leaflet, Quarto, shell scripting, Python)\nRealistic data cleaning, transformation, and exploratory analysis\n\nThe fictional business challenge of Cyclistic is explored through the lens of actual Divvy usage patterns."
  },
  {
    "objectID": "index.html#business-task",
    "href": "index.html#business-task",
    "title": "Case Study",
    "section": "Business Task",
    "text": "Business Task\nHow do Customers (casual riders and annual members use Divvy bikes differently, and how can that inform marketing strategies?"
  },
  {
    "objectID": "index.html#data-sources",
    "href": "index.html#data-sources",
    "title": "Case Study",
    "section": "Data Sources",
    "text": "Data Sources\nThe analysis is based on the following datasets:\n\nDivvy Bike Trip Data (2013–2025)1 : This dataset includes anonymized ride-level data from Chicago’s Divvy bike sharing system. The bulk of the data (June 2013 through Sep 2019) (Divvy_Trips_20250501.csv) was obtained from the City of Chicago Data Portal. The rest (Oct 2019 through Jan 23 2020 and Jun 2023 – April 30 225) was downloaded from Divvy’s S3 archive . Please note, rides from the time period of the COVID-19 Pandemic are not included.\nChicago Weather Data (Hourly): Hourly weather data for Midway International Airport (station ID: 72534) was downloaded from the Metostat bulk archive. The dataset includes temperature, wind speed, precipitation, and other key weather indicators for correlation with bike usage patterns.\nTourist Attractions Dataset (Custom): A manually curated dataset of key tourist attractions in Chicago (e.g., Navy Pier, Millennium Park, Lincoln Park Zoo) was created to identify rides likely associated with tourism. Latitude and longitude coordinates were obtained using Google Maps for educational use and spatial filtering.\n\n\nAttribution\n\nCity of Chicago. (2025). Divvy Trips Dataset. https://data.cityofchicago.org/Transportation/Divvy-Trips/fg6s-gzvg/about_data\nLyft. (2025). Divvy Trip Data Archive. https://divvy-tripdata.s3.amazonaws.com/index.html\nMeteostat (https://meteostat.net). (2025). Hourly Weather Data – Midway Airport (72534). https://bulk.meteostat.net/v2/hourly/72534.csv.gz Provided under the terms of the Creative Commons Attribution-NonCommercial 4.0 International Public License (CC BY-NC 4.0)\nTourist location coordinates obtained via Google Maps (maps.google.com) for educational and analytical purposes."
  },
  {
    "objectID": "index.html#key-metrics-and-analysis",
    "href": "index.html#key-metrics-and-analysis",
    "title": "Case Study",
    "section": "Key Metrics and Analysis",
    "text": "Key Metrics and Analysis"
  },
  {
    "objectID": "index.html#summary-of-findings",
    "href": "index.html#summary-of-findings",
    "title": "Case Study",
    "section": "Summary of Findings",
    "text": "Summary of Findings\nHigh level overview;\nTwo types of recommendations 1 Actions to take based on the limited information we have now. 2 Actions to enhance the information collection system\nHere’s an example of the first case. The main goal is to get more subscribers, one way (presumably) is targeted advertising, but with the de-identified information we have now that’s difficult, we don’t have contact info, we don’t have demographics, what we do have is some knowledge about where people who use the system are. They are at the stations. We know which stations have a high number of subscriber and a high number of customers. Sense the customers are viewed as the pool from which most new subscribers will come it makes sense to spend our limit advertising budget where there are a high number of customer. There are stations that are very popular with subscribers (more than 90% of the rides from those stations are by subscribers) but those are not a good target as there are not enough customers to see the adds and subscribe to make it worthwhile. There are currently stations with a very high percentage of customer rides, but perhaps there is a good reason subscribe rides are low there (tourism perhaps). Which means it not worthwhile to try and recruit subscribers there either. So we concentrate on the most popular combined use stations, not sure if that means putting up fliers there, signage, or boots on the ground trying to sign up customers.\nHere is the second case. If we got access to actual identifying information for customers we could identify customers who’s usage pattern already demonstrates activity that identifies them as likely subscribers (perhaps it might even save them money). So the collection of identifying information should begin immediately because with it all kind of options for analysis and advertising open up that are currently unavailable.\nThere are of course lots of other things which I’ll just briefly list; Bike tracking - currently we have only a start and end station where the bike actually goes is unknown. Tracking devices are getting cheaper ever day. Lunch and Ride - There are a lot of rides midday. Is that office workers looking for a quick ride for exercise on there lunch break? Let’s find out, no let’s encourage it. Last mile commuters - All the big commuter terminals should be viewed as a recruiting ground for subscribers. Why walk the rest of the way to work when you could ride. Save your cab money for when the weather is bad.\nMaybe this is enough to get the ball rolling."
  },
  {
    "objectID": "index.html#implications-and-recommendations",
    "href": "index.html#implications-and-recommendations",
    "title": "Case Study",
    "section": "Implications and Recommendations",
    "text": "Implications and Recommendations\n\nRecommendations\n\n\nRider Differentiation\nCurrently, with the available data, there is no way to differentiate individual riders. So there is no way to compile the following information; - Frequency and Recency - Do riders ride daily, weekly, or sporadically? - How does frequency change over seasons or years? - What sort of usage pattern leads to churns (stops riding) and when?\n\nRider Lifecycle\n\nTime between rides.\nHow patterns evolve (e.g., do weekend riders turn into commuters).\n\nRetention and Cohort Analysis\n\nHow long do riders stay active?\nHow do retention curves differ by membership type, or initial riding habits?\n\nRide type Segmentation\n\nDetect mixed behaviors (someone commuting and recreating).\nCluster riders based on temporal patterns (e.g., M-F rush hour vs. weekends).\nTrack how these patterns shift (do weekend riders become weekday commuters?).\n\n\nSo getting access to information to identify individual riders will allow for a much clearer model of the system to be built.\n\n\nRider Identification\nLike with rider differentiation there is currently no way to identify individual riders, so there is now way to do any of the following (presumably, identity would include some contact info);\n\nPricing and Subscription Impact\n\nSee how price changes affect the riding frequency of individual users\nWho downgrades or upgrades memberships?\nSee how free-ride promotions or loyalty rewards affect long-term behavior?\n\nEquity and Demographics (if linked to identity)\n\nDemographic usage patterns (age, gender) across time.\nDisparities in access (income, neighborhood).\nTailoring outreach to underrepresented groups.\n\nRider Safety and Risk Profiling\n\nIndividuals involved in repeat incidents (e.g., crashes).\nCorrelation between riding style (speed, trip length) and safety events.\nCustom interventions for high-risk riders.\n\nChurn Prediction and Proactive Retention\n\nBuild predictive models: “Which users are at high risk of quitting?”\nTrigger targeted interventions before churn happens.\nQuantify which factors (weather, pricing, station closures) drive individuals away."
  },
  {
    "objectID": "index.html#next-steps",
    "href": "index.html#next-steps",
    "title": "Case Study",
    "section": "Next Steps",
    "text": "Next Steps"
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "Case Study",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nDivvy Bikes ride data from June 13th 2013 to April 30th 2025 with the exception of the COVID-19 Pandemic, as that data is not representative of normal bike usage.↩︎"
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "📦 Data Sources and Cleaning",
    "section": "",
    "text": "🚧 This project is currently a work in progress.\nI’m actively building out my case study as part of the Google Data Analytics Capstone.\nFull write-up, code, and visualizations will be available soon!"
  },
  {
    "objectID": "data.html#overview",
    "href": "data.html#overview",
    "title": "📦 Data Sources and Cleaning",
    "section": "🗂️ Overview",
    "text": "🗂️ Overview\nThis project integrates and analyzes Divvy bike-share trip data, station data, and Chicago weather data. The cleaning steps below describe the transformations, filters, and fixes applied to ensure high-quality, analysis-ready data."
  },
  {
    "objectID": "data.html#data-sources",
    "href": "data.html#data-sources",
    "title": "📦 Data Sources and Cleaning",
    "section": "📦 Data Sources",
    "text": "📦 Data Sources\n\nDivvy Trip Data: Divvy Trip Archive and City of Chicago Data Portal\nWeather Data: Meteostat Hourly Bulk Data\nTourist Stations: Custom dataset created from Google Maps lat/Long queries\n\nSee the 📦 Data Sources page for more details and attribution."
  },
  {
    "objectID": "data.html#ride-data-cleaning",
    "href": "data.html#ride-data-cleaning",
    "title": "📦 Data Sources and Cleaning",
    "section": "🚟️ Ride Data Cleaning",
    "text": "🚟️ Ride Data Cleaning\n\nRemoved pandemic-period rides:\n\nDropped all rides with start_time &gt; Jan 1, 2020 to avoid skew due to COVID-19 lockdown.\nAlso removed one late outlier from April 2020.\n\nRemoved zero-duration loop rides:\n\nFiltered out rides where start_time == end_time and start_station_id == end_station_id.\n\nRemoved “teleportation” rides:\n\nRides with start_time == end_time but different start and end stations were eliminated.\n\nEliminated negative-duration rides (“time travelers”):\n\nRides where start_time &gt; end_time were removed.\n\nDropped long-duration rides:\n\nExcluded rides longer than 24 hours (duration &gt; 86400 seconds).\nThese were excluded from analysis but retained in the database.\n\nFiltered rides missing user type:\n\nRemoved 194 rides with user_type IS NULL.\n\nDeduplicated rides:\n\nRemoved ~2,767 duplicate records where bike_id, start_time, and end_time were identical.\n\nFiltered overlapping rides per bike:\n\nFor bikes with multiple overlapping rides, kept the ride with the lowest ride_id."
  },
  {
    "objectID": "data.html#station-data-cleaning",
    "href": "data.html#station-data-cleaning",
    "title": "📦 Data Sources and Cleaning",
    "section": "📍 Station Data Cleaning",
    "text": "📍 Station Data Cleaning\n\nAllowed stations with same name but different coordinates:\n\nReplaced unique constraint on name with composite index:\nCREATE UNIQUE INDEX uniq_vector ON stations(name, lat, long);\nCREATE INDEX idx_name ON stations(name);\n\nRenamed ambiguous duplicates:\n\nManually added suffixes like ” II” to disambiguate repeated station names at different coordinates.\n\nNormalized source formats:\n\nSome station data was manually extracted from Excel, then converted to CSV for uniform processing."
  },
  {
    "objectID": "data.html#weather-data-cleaning",
    "href": "data.html#weather-data-cleaning",
    "title": "📦 Data Sources and Cleaning",
    "section": "☁️ Weather Data Cleaning",
    "text": "☁️ Weather Data Cleaning\n\nSelected Midway Airport station (72534):\n\nChosen for completeness and consistency across years.\n\nDropped unused or missing columns:\n\nsnow, wpgt, tsun, pres, and datetime were excluded from final dataset.\n\nCreated epoch column for joins:\n\nCombined date and hour fields into datetime, then converted to UNIX epoch to align with ride timestamps."
  },
  {
    "objectID": "data.html#notes",
    "href": "data.html#notes",
    "title": "📦 Data Sources and Cleaning",
    "section": "💡 Notes",
    "text": "💡 Notes\n\nAll transformations were tracked in versioned scripts and logged in logs/workLog.md.\nWeather data cleaning steps were scripted in src/load_weather.R.\nStation and ride data were validated and transformed via shell scripts and SQLite."
  },
  {
    "objectID": "data.html#license",
    "href": "data.html#license",
    "title": "📦 Data Sources and Cleaning",
    "section": "📋 License",
    "text": "📋 License\nDivvy and City of Chicago data is subject to the City of Chicago Terms of Use.\n\n\nSource: Meteostat  (opens new window)\n\n\nThis case study is © 2025 Scott Sesher and provided under the MIT License. See LICENSE for details."
  },
  {
    "objectID": "glossary.html",
    "href": "glossary.html",
    "title": "Glossary",
    "section": "",
    "text": "Glossary of Terms\nThis glossary defines key terms used throughout the case study.\n\n\n\nAverage Daily Rides\n\nThe total number of rides for a specific category (e.g., bike type or user type), divided by the number of days in the analysis period. This metric normalizes ride volume to allow comparisons across bike types or groups.\n\n\n\n\n\nBucket\n\nA predefined range used to group continuous data, such as ride counts or temperatures, for aggregation or visualization. For example, ride counts per bike may be grouped into 100-ride buckets.\n\n\n\n\n\nCluster (Ride Duration Cluster)\n\nA grouping of rides based on their duration using a clustering algorithm or predefined thresholds. In this study, rides are grouped into Short, Medium, and Long clusters to distinguish different usage behaviors.\n\n\n\n\n\nCustomer\n\nA user who does not have an annual or recurring membership. Customers include Day Pass riders, single-ride users, and other casual or pay-per-use riders. All non-subscriber users are classified as customers. The term casual rider might also be used for customers, but for this case study only the term customer is used.\n\n\n\n\n\nDensity Plot (Kernel Density Plot)\n\nA smoothed visualization of the distribution of a continuous variable, such as ride distance. It estimates the probability density function and often provides clearer insight than a histogram by reducing noise through smoothing.\n\n\n\n\n\nHaversine formula\n\nA mathematical formula used to cacluate the distance between any two points on a sphere along the great-arc going through both points.\n\n\n\n\n\nInterquartile Range (IQR)\n\nThe interquartile range (IQR) is a measure of variability describing the spread of the middle 50% of values in a dataset. It is calculated as: &gt; IQR = Q3 − Q1 where: - Q1 (25th percentile) is the value below which 25% of observations fall. - Q3 (75th percentile) is the value below which 75% of observations fall. Why It’s Important: IQR is a robust measure of statistical dispersion and is less sensitive to extreme values (outliers) than the standard deviation.\n\n\n\n\n\nKernel\n\nA mathematical function (usually bell-shaped) used in kernel density estimation to create a smooth curve over individual data points. The width and shape of the kernel affect how smoothed the resulting density plot is.\n\n\n\n\n\nLOESS\n\nLOESS (Locally Estimated Scatterplot Smoothing) is a nonparametric regression technique used to create a smooth curve through a scatterplot to help visualize relationships between variables. It fits simple models (usually low-degree polynomials) to localized subsets of the data, weighting points by their distance from the target point. This approach allows the fitted curve to follow complex patterns in the data without assuming a specific global model.\n\n\n\n\n\nLoop Ride\n\nA bike ride that starts and ends at the same station. Often used as a proxy for recreational or tourist behavior. These rides are excluded from this analysis.\n\n\n\n\n\nMaximum Simultaneous Rides\n\nThe maximum number of rides that were active at the same time during a given period (e.g., a year). Calculated by tracking ride start and end events, computing a running total of concurrent rides, and taking the peak value. This metric is used to assess fleet load and system demand during peak usage periods. Also know as peak concurrency\n\n\n\n\n\nNon-Tourist Ride\n\nA ride that does not start or end near designated tourist destinations. These rides are considered more likely to reflect routine or local travel behavior.\n\n\n\n\n\nNon-Tourist Station\n\nA station not in or near a designated tourist destinations. These stations are considered to be more frequented by commuters.\n\n\n\n\n\nNormalization (Normalized Ride Volume)\n\nThe process of scaling data, typically between 0 and 1, to allow for comparisons across categories with different absolute values. For example, normalized ride volume allows temperature-based comparisons regardless of the overall number of rides.\n\n\n\n\n\nPeak Concurrency\n\nThe highest number of bike rides occurring simultaneously within a given time window (e.g., a day, month, or year). In this study, peak concurrency is equivalent to the maximum number of bikes in use at the same time, calculated using ride start and end times. Also referred to as max simultaneous rides. This metric helps assess system load, infrastructure limits, and usage spikes.\n\n\n\n\n\nRide Count per Bike\n\nThe total number of rides recorded for an individual bike over the dataset’s time span. Used to evaluate fleet utilization and wear.\n\n\n\n\n\nRide Distance (km)\n\nThe distance between start and end stations, caclulated using the Haversine formula, and measured in kilometers. Used as a proxy for trip length and user intent.\n\n\n\n\n\nRide Duration\n\nThe difference between ride end_time and start_time.\n\n\n\n\n\nStation\n\nA docking location where bikes or scooters can be picked up or returned. Used in geographic and behavioral analyses.\n\n\n\n\n\nSubscriber\n\nA user who holds an annual or annual-billed-monthly membership with the bike-sharing service. Subscribers might also be know as members, but for the purpose of this case study only the term Subscriber is used.\n\n\n\n\n\nUser Type\n\nA classification of users based on their relationship with the bike-share system, for the purpose of this case study the are devided into two groups, Subscribers or Customers.\n\n\n\n\n\nVisualization\n\nA graphical representation of data, such as bar charts, histograms, or density plots, used to communicate patterns and insights from the dataset."
  },
  {
    "objectID": "lessons.html",
    "href": "lessons.html",
    "title": "Lessons Learned",
    "section": "",
    "text": "Looking back after completing a project there are always things you wished you done differently and choices you made you wish you hadn’t. It’s always good to reflect back on these and record them so that perhaps other can avoid them in the future. After all don’t they deserve to have their own set of issues."
  },
  {
    "objectID": "lessons.html#regrets",
    "href": "lessons.html#regrets",
    "title": "Lessons Learned",
    "section": "Regrets",
    "text": "Regrets\n\nSQLite - I chose SQLite because I wanted something light weight and thought it would be a good opportunity to learn another database that seems to be a fairly popular choice. Overall I’m impressed with SQLite, it couldn’t be easier to setup and the performance was impressive. There were however two main issue I had with SQLite;\n\n1 Locks - When attempting to do my initial import I ran into a locking issue (Parse error: database is locked (5)) around 20K records. A single process inserting into the database, with no other process accessing the database really shouldn’t run into locking issues. I ended up doing the inserts in batches of 10K records and didn’t run into any more lock issues. 2 Missing functions - SQLite’s built‑in SQL dialect does not include STDDEV() or SQRT() and other functions I’m accustom to using in Oracle’s PL/SQL or MySQL’s SQL dialect. I didn’t know that until I tried using STDDEV() the first time. It is possible to add these functions with the extension‑functions add‑on. I compiled it with a little effort and was able to load it without error, but for some reason it still seemed to not recognize the added functions. It would have been more work to install MySQL but I’ve done that enough times that it would be easy and worth the work. You mileage my vary.\n\nLogging - You think to yourself, I’ll just cut and paste stuff from the console in RStudio that I’ll need later when I start writing this section up. Then you try and use library foo and it’s not there and without even think you install.packages(“foo”) and you know instantly your screwed as the voluminous output fills the buffer and the stuff you meant to cut and paste is gone. It’s just R though it could be SQL or your terminals buffer. I had RStudio crash more than one (in it’s defense I was working with a very large dataset for the amount of memory I had to work with). You need pedantic logging of everything.\nVersion Control - If you don’t do this already, get everything you can into the revision control system of your choice. Make it a habit. It’s too easy to start working on something you expect to be short and simple and it turns into something quite involved and you make some changes and they don’t work so you reverse them (or at least you think you do) but it still doesn’t work. git diff is your friend."
  },
  {
    "objectID": "side-quest/Understanding_.prj_Files.html",
    "href": "side-quest/Understanding_.prj_Files.html",
    "title": "Understanding .prj Files in GIS: Your Geospatial Data’s Silent Interpreter",
    "section": "",
    "text": "In the world of Geographic Information Systems (GIS), data isn’t just about points, lines, and polygons; it’s also about where those features exist on Earth. This is where the .prj file comes in. A .prj file is a fundamental component of many geospatial datasets, particularly ESRI Shapefiles. It’s a plain text file that acts as the essential blueprint, defining the coordinate system and projection information for the accompanying spatial data.\n\nWhat’s Inside a .prj File?\nThe .prj file contains a precise, machine-readable description of the spatial reference system. This description is typically formatted in Well-Known Text (WKT), a standardized string that details how the data’s coordinates relate to a real-world location and how they are displayed on a flat map.\nA WKT string can specify both Geographic Coordinate Systems (GCS) and Projected Coordinate Systems (PCS):\n\nGeographic Coordinate System (GCS): This defines the global, spherical coordinate system. It includes:\n\nDatum: The model of the Earth’s shape (an ellipsoid or spheroid) and its position relative to the Earth’s center (e.g., WGS84, NAD83).\nSpheroid/Ellipsoid: The specific mathematical model of the Earth’s shape used by the datum.\nPrime Meridian: The reference longitude (usually Greenwich).\nAngular Unit: The unit for latitude and longitude (e.g., degrees).\n\nProjected Coordinate System (PCS): This defines how the 3D GCS coordinates are transformed onto a 2D flat plane, enabling measurement and mapping on a flat surface. It includes:\n\nProjection Type: The mathematical method used for the transformation (e.g., Transverse Mercator, Lambert Conformal Conic, Universal Transverse Mercator (UTM)).\nProjection Parameters: Specific values needed by the chosen projection, such as False Easting, False Northing, Central Meridian, Scale Factor, and Latitude of Origin.\nLinear Unit: The unit of measurement for the projected coordinates (e.g., meters, US survey feet).\n\nAuthority: Often includes an EPSG code (e.g., AUTHORITY[“EPSG”,“4326”] for WGS84 Geographic Coordinate System), which is a standardized code for a specific coordinate system definition.\n\n.prj files often also include an EPSG code, which is a standardized identifier for a specific coordinate system definition, allowing software to easily recognize and apply it.\nExample of a (simplified) .prj file content:\nPROJCS[\"NAD_1983_StatePlane_Washington_South_FIPS_4602_Ft_US\",GEOGCS[\"GCS_NAD_1983\",DATUM[\"D_NAD_1983\",SPHEROID[\"GRS_1980\",6378137.0,298.257222101]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Lambert_Conformal_Conic\"],PARAMETER[\"False_Easting\",1640416.666666667],PARAMETER[\"False_Northing\",0.0],PARAMETER[\"Central_Meridian\",-120.5833333333333],PARAMETER[\"Standard_Parallel_1\",45.83333333333334],PARAMETER[\"Standard_Parallel_2\",47.33333333333334],PARAMETER[\"Latitude_Of_Origin\",45.33333333333334],UNIT[\"Foot_US\",0.3048006096012192]]\n(Note: In actual files, this is often a single, very long line with no extra spaces for compactness.)\n\n\nWhy is a .prj File Important in GIS?\nThe .prj file is critically important because it provides the necessary context for GIS software to correctly interpret, display, and analyze your spatial data. Without it, the software lacks the crucial information needed to understand where on Earth your data is located or how it should be presented.\nHere’s why it’s so vital:\n\nAccurate Display and Alignment: Without the .prj file, GIS software cannot correctly position your data on a map. Data might appear in the wrong location, be severely stretched or compressed, or even be completely invisible when overlaid with other layers.\nReliable Analysis: All spatial analysis operations (like calculating areas, distances, buffers, or performing overlays) depend on accurate coordinate system information. An incorrect or missing .prj file will lead to erroneous analytical results.\nInteroperability: GIS involves combining datasets from many sources. The .prj file enables “on-the-fly” projection, allowing GIS software to transform data from different coordinate systems into a common system for seamless integration and comparison.\nData Integrity: It ensures that your data retains its spatial meaning and integrity as it’s moved between different systems or shared with other users.\n\nWhile some older GIS software or workflows might allow you to work without a .prj file (by making assumptions), this is highly discouraged. A missing or incorrect .prj file is a common source of error and frustration in GIS.\n\n\nHow .prj Files are Typically Used\n\nCompanion File: For formats like the ESRI Shapefile, the .prj file is a companion file that carries the same base filename as the main data files (e.g., rivers.shp, rivers.dbf, rivers.shx, and rivers.prj) and resides in the same directory. GIS software automatically looks for it when loading the dataset.\nMetadata: It serves as vital metadata, explicitly defining the spatial reference properties that are not stored within the primary data file itself.\nProgrammatic Use: GIS software and libraries (like GDAL/OGR or ArcPy) can read, parse, and generate .prj files to ensure proper data handling and transformations.\n\nIn essence, the .prj file is the unsung hero of GIS data, providing the crucial spatial context that allows your maps to be accurate, your analyses to be valid, and your data to be truly meaningful in the real world.\n\n\nSources\n\nWhat is Data Mapping? Definition and Examples | Talend\nWhat is Data Mapping? | Informatica\nWhat is Data Mapping? The Ultimate Guide | Amplitude\nData mapping - Wikipedia\nPRJ Definition | GIS Dictionary - Esri Support\nESRI PRJ File\nWhat the prj-file stands for? - GIS StackExchange\n\nAttribution: Generated by Gemini (as your AI assistant)"
  },
  {
    "objectID": "side-quest/prj-quest.html",
    "href": "side-quest/prj-quest.html",
    "title": ".PRJ Side Quest",
    "section": "",
    "text": "Introduction\nThe soft hum of your GPU fans is a soothing backdrop as you monitor a complex data extraction, a mountain of zipped archives, purportedly filled with nothing but clean CSVs, is steadily being processed. You’ve automated most of it, trusting your script fu to handle the grunt work. But then, a subtle deviation,\nFile not found: Divvy_Stations_2013.shp.csv\nthat wasn’t expected. You curse yourself for not having better error handling, but these files were suppose to all follow the same naming convention. “Dot-s-h-p-dot-c-s-v” you mumble. What the hell is that? So you go looking for Divvy_Stations_2013.shp.zip, as that’s what would have been needed for it to be looking for Divvy_Stations_2013.shp.csv, to see what’s up.\nYou find it and it looks like it’s contents have been extracted into a directory named Divvy_Stations_2013.shp\nYou lean closer, a frown creasing your brow. Not a log, not a CSV file in site and a bunch of files with extensions do recognize. You call upon your most reliable digital ally, the venerable file command, for its infallible wisdom.\nYou (to yourself, a quiet murmur): “Alright, file, old friend. Time to shed some light on this mystery.”\n(You type the command, the bytes of the file streaming through your discerning companion.)\n$ file *\nThe response appears, but it’s not the confident classification you expected. Instead, the file command’s output seems to be a slightly perplexed, glowing text on your screen, its usual stoic confidence replaced by a rare flicker of uncertainty.\nDivvy_Stations_2013.dbf: FoxBase+/dBase III DBF, 300 records * 319, update-date 114-2-6, codepage ID=0x57, at offset 193 1st record \"        5.000000State St & Harrison St                                                                                         \"\nDivvy_Stations_2013.prj: ASCII text, with no line terminators\nDivvy_Stations_2013.sbn: ESRI Shapefile version 738263040 length 1598\nDivvy_Stations_2013.sbx: ESRI Shapefile version 738263040 length 170\nDivvy_Stations_2013.shp: ESRI Shapefile version 1000 length 4250 type Point\nDivvy_Stations_2013.shx: ESRI Shapefile version 1000 length 1250 type Point\n“ASCII text, with no line terminators”, file didn’t know what it was, I think to myself.\nUNIX file Command (its glowing text box pulsing faintly): “Hmph. Divvy_Stations_2013.prj: ASCII text. That’s all I’ve got. I pride myself on recognizing the very soul of a file, its intrinsic nature, regardless of its flimsy namesake suffix. I know what a .csv is by its comma-separated heart, a .json by its curly-bracketed spirit, even a .tar.gz by its compressed archiveyness. But this… this .prj file. Its contents whisper of structure, of a world’s placement, of coordinates and projections… yet, my internal knowledge base, vast as it is, draws a blank when I analyze its raw essence alone. I can only infer it’s ‘ASCII text’ But it feels like so much more.”\nThe file command’s manifestation seems to sigh, its light dimming slightly in digital frustration. Suddenly, a new option pops up on your screen, a prompt for a deeper interaction: “Help file Recognize .prj?”\nUNIX file Command (its glow returning with renewed purpose): “If you, astute data wrangler, could delve into its depths and help me understand this .prj type – not merely by its extension, but by its very content, its internal patterns, its Well-Known Text signature… it would be an invaluable addition to my wisdom. It would empower me to instantly classify such files for all your future data extractions, making me truly complete in the realm of geospatial information. Will you embark on this small, yet intellectually profound, Quest for .prj Enlightenment?”\nThis quest will challenge you to apply your knowledge of GIS data structures and delve into the specifics of .prj files to enhance your trusted command-line companion’s capabilities.\nYou of course accept the quest as your always up for a challenge, but where to start. Well file said it was ASCII so let’s have a look at it with cat. Wait first we should see how big it is.\n$ ls -l Divvy_Stations_2013.prj \n-rw-rw-r-- 1 sas sas 145 Feb  6  2014 Divvy_Stations_2013.prj\nIt’s small so …\n$ cat Divvy_Stations_2013.prj\nGEOGCS[\"GCS_WGS_1984\",DATUM[\"D_WGS_1984\",SPHEROID[\"WGS_1984\",6378137.0,298.257223563]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]]\nThat looks a little bit like GIS stuff, I don’t know much about that (if that’s what it is). Let’s consult one of the modern day oracles. So a quick trip on the Internet takes us to the Temple of OpenAI where we ask the oracle ChatGPT. Together with an offering of tokens you submit this prompt to the oracle.\nwhat does this look like, it's in a filename with the .prj extension?\nGEOGCS[\"GCS_WGS_1984\",DATUM[\"D_WGS_1984\",SPHEROID[\"WGS_1984\",6378137.0,298.257223563]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]]\nAfter what seems like a long time the oracle responds\n\nThat .prj file is simply the Well-Known Text (WKT) definition of the dataset’s coordinate reference system. In your &gt; case it tells you that everything is in plain latitude/longitude on the WGS 84 datum. Here’s what each bit means:\n\n**GEOGCS[“GCS_WGS_1984”] This declares a Geographic Coordinate System called “WGS 1984” (i.e. not a projected system).\nDATUM[“D_WGS_1984”,SPHEROID[“WGS_1984”,6378137.0,298.257223563]] Defines the datum** (“D_WGS_1984”) and its reference ellipsoid (“WGS_1984”) with\nSemi-major axis = 6 378 137.0 m\n\nInverse flattening = 298.257223563\n\nPRIMEM[“Greenwich”,0.0] Sets the prime meridian at Greenwich (0° longitude).\nUNIT[“Degree”,0.0174532925199433] Says coordinates are measured in degrees, where 1 degree = 0.01745… radians.\n\nIn practice: any GIS or mapping tool reading that .prj will know your data’s points are in un-projected WGS84 lat/long. If you need to display or analyze it alongside data in another CRS (say UTM or Web Mercator), you’d re-project using that definition as the source.\n\n“Oracles speak in riddles because the gods do not tell plain truths to mortals.” Well, it confirms my hunch that this is GIS related, but now we have more questions and how can we possible tell file he didn’t know what something that was “Well-Known Text” was. The shame would be too much.\nMy tokens exhausted I leave the temple to find more answers, since now I have more questions now.\nWalking along wonder how to proceed, I mentally kick myself even getting into the thing. Then it hits me I don’t need to know all this GIS stuff, I just need to know enough to help file out. I might not have any more tokens but I do have a digital assistant at my disposal.\nSo I ask my digital assistant Gemini to find out what the hell “WGS 84 datum” means. while I get to work restating my purpose, because I’m getting off track and I want to knock this out and get back to importing those CSV files.\n\n\n🎯 Purpose\nEnable the UNIX file utility to recognize ESRI .prj projection files based on their content (not file extension), which follow a Well-Known Text (WKT) format. I don’t need to know everything about GIS, just enough to give file the info it needs.\n\n\n🔷 Gemini Returns\nWell Gemini what did you find out?\n\nThe World Geodetic System 1984 (WGS 84) is the global standard for defining the Earth’s size and shape and for precisely locating positions on its surface. It’s much more than just a coordinate system; it’s a comprehensive geodetic datum that serves as the fundamental reference for almost all modern geospatial applications, most notably the Global Positioning System (GPS).\nHere’s a breakdown of what WGS 84 encompasses and its key characteristics:\nWhat is a Geodetic Datum?\nBefore diving into WGS 84, it’s helpful to understand what a “geodetic datum” is. A geodetic datum is a reference system that defines how positions are represented on the Earth. It includes:\n\nA Coordinate System: A framework (like latitude, longitude, and height) for specifying locations.\nA Reference Ellipsoid (or Spheroid): A smooth, mathematical model of the Earth’s shape, which is an oblate spheroid (a sphere flattened at the poles and bulging at the equator). This ellipsoid is used as the surface on which latitude and longitude are defined.\nAn Origin and Orientation: Defines where the coordinate system starts and how it’s aligned in space relative to the Earth.\n\nKey Characteristics of WGS 84\nWGS 84 is defined and maintained by the United States National Geospatial-Intelligence Agency (NGA) and has several important characteristics:\n1 Earth-Centered, Earth-Fixed (ECEF): * Its origin (0,0,0) is located at the Earth’s geometric center of mass, including oceans and atmosphere.\n\nIts axes are fixed relative to the Earth’s crust, meaning they rotate with the Earth. This makes it ideal for global positioning as it provides a consistent reference frame for points on the moving Earth.\n\n2 Global Coverage:\n\nUnlike older, local datums (which were optimized for specific regions and could have significant discrepancies when moving across boundaries), WGS 84 provides a seamless, consistent reference frame for the entire globe.\n\n3 Reference Ellipsoid:\n\nWGS 84 uses its own specific reference ellipsoid (also called WGS 84 ellipsoid) with defined semi-major and semi-minor axes, and a flattening factor. This ellipsoid provides the mathematical surface for defining latitude and longitude.\n\n4 Reference for GPS:\n\nWGS 84 is the primary geodetic datum used by the Global Positioning System (GPS). All GPS receivers output coordinates in WGS 84 latitude, longitude, and ellipsoidal height by default. This makes it universally compatible with GPS devices and applications worldwide.\n\n5 Dynamic Nature (with Realizations):\n\nWhile WGS 84 is defined by a fixed set of parameters, the Earth’s surface is constantly changing due to tectonic plate movement, post-glacial rebound, and other geological processes.\nTo maintain high accuracy, WGS 84 is periodically updated through “realizations” (e.g., WGS 84 (G1762) being a more recent realization). These updates align WGS 84 with the International Terrestrial Reference Frame (ITRF), which incorporates global geodetic observations with very high precision. For most common uses, the differences between WGS 84 realizations are negligible, but for very high-precision applications, the specific realization used is important.\n\n6 Components: WGS 84 technically comprises:\n\nAn ellipsoid\nA horizontal datum (for latitude and longitude)\nA vertical datum (for ellipsoidal height)\nA coordinate system\n\n7 Associated Models: WGS 84 also includes associated models like the Earth Gravitational Model (EGM) and the World Magnetic Model (WMM), which describe Earth’s gravity and magnetic fields, respectively.\nPurpose and Importance\nThe main purposes of WGS 84 are:\n\nStandardization: To provide a single, consistent, and globally applicable reference system for geospatial information, enabling seamless data exchange and interoperability across different countries, organizations, and applications.\nNavigation: To serve as the foundation for satellite navigation systems like GPS, allowing accurate positioning and navigation worldwide. Mapping and GIS: To provide a fundamental framework for creating maps, charts, and Geographic Information Systems (GIS) data that are globally consistent.\nScientific Research: To support various geoscientific studies, including monitoring Earth’s gravity field, sea level changes, and tectonic plate movements.\n\nIn essence, WGS 84 is the invisible framework that underpins much of our modern world’s location-based technologies and understanding of the Earth.\n\nWell, I think I’m starting to understand that this GIS stuff is a little complicated. We need to hone in on the info we need a little more. Can you create a report for me about .prj files in the context of GIS? While I figure out what has to be done to get file to recognize these files once we have the information. I’ll ask my friend man, he knows about almost all the commands.\n\n\n📄 Custom magic File Snippet\nFilename: .magic or magic.local\n0   string  GEOGCS[        ESRI WKT projection file (geographic)\n0   string  PROJCS[        ESRI WKT projection file (projected)\n0   string  LOCAL_CS[      ESRI WKT projection file (local coordinate system)\n&gt;0  string  DATUM[         (with DATUM)\n&gt;0  string  SPHEROID[      (with SPHEROID)\n\n0   search/20   DATUM[     ESRI WKT projection file (WKT with DATUM)\n0   search/20   SPHEROID[  ESRI WKT projection file (WKT with SPHEROID)\n\n!:mime  text/plain\nUsage:\nfile -m ~/.magic somefile\nSupports detection even if the file has no .prj extension."
  },
  {
    "objectID": "data/duration_by_type.html",
    "href": "data/duration_by_type.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Data Sources\nData Source:\nduration_by_type &lt;- post_electric_rides_df %&gt;%\n    group_by(user_type, bike_type) %&gt;%\n    summarise(\n        avg_duration = mean(avg_duration_minutes, na.rm = TRUE),\n        sd_duration = sd(avg_duration_minutes, na.rm = TRUE),\n        .groups = \"drop\"\n    )\n\nData Transformation in R:\n\nduration_by_type$user_type &lt;- fct_recode(as.factor(duration_by_type$user_type),\n                                         \"Subscriber\" = \"0\",\n                                         \"Customer\" = \"1\")"
  },
  {
    "objectID": "data/non_loop_rides_df.html",
    "href": "data/non_loop_rides_df.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "** Source Table:** 1 Start with non_tourist_customer_rides_df\n\nThis already had:\n\nOnly customer rides\nOnly non-tourist stations (presumably filtered upstream)\n\n\n2 Filter out loop rides\nnon_loop_rides_df &lt;- non_tourist_customer_rides_df %&gt;% filter(start_station_id != end_station_id)\nResult:\nOnly rides starting and ending at different stations\n3 Attach start and end station coordinates from stations_df\nnon_loop_rides_df &lt;- non_loop_rides_df %&gt;% left_join( stations_df %&gt;% rename( start_station_id = station_id, start_lat = lat, start_long = long ), by = “start_station_id” ) %&gt;% left_join( stations_df %&gt;% rename( end_station_id = station_id, end_lat = lat, end_long = long ), by = “end_station_id” )\nResult:\nAdded start and end lat/lon\nComputed haversine distance\n4 Recompute distance\nnon_loop_rides_df &lt;- non_loop_rides_df %&gt;% mutate( distance_m = distHaversine( matrix(c(start_long, start_lat), ncol = 2), matrix(c(end_long, end_lat), ncol = 2) ), distance_km = distance_m / 1000 )\nResult:\nRecomputed distance_m and distance_km using (start_long, start_lat)"
  },
  {
    "objectID": "data/non_loop_rides_df.html#provenance-for-non_loop_rides_df",
    "href": "data/non_loop_rides_df.html#provenance-for-non_loop_rides_df",
    "title": "Bike share case-study",
    "section": "",
    "text": "** Source Table:** 1 Start with non_tourist_customer_rides_df\n\nThis already had:\n\nOnly customer rides\nOnly non-tourist stations (presumably filtered upstream)\n\n\n2 Filter out loop rides\nnon_loop_rides_df &lt;- non_tourist_customer_rides_df %&gt;% filter(start_station_id != end_station_id)\nResult:\nOnly rides starting and ending at different stations\n3 Attach start and end station coordinates from stations_df\nnon_loop_rides_df &lt;- non_loop_rides_df %&gt;% left_join( stations_df %&gt;% rename( start_station_id = station_id, start_lat = lat, start_long = long ), by = “start_station_id” ) %&gt;% left_join( stations_df %&gt;% rename( end_station_id = station_id, end_lat = lat, end_long = long ), by = “end_station_id” )\nResult:\nAdded start and end lat/lon\nComputed haversine distance\n4 Recompute distance\nnon_loop_rides_df &lt;- non_loop_rides_df %&gt;% mutate( distance_m = distHaversine( matrix(c(start_long, start_lat), ncol = 2), matrix(c(end_long, end_lat), ncol = 2) ), distance_km = distance_m / 1000 )\nResult:\nRecomputed distance_m and distance_km using (start_long, start_lat)"
  },
  {
    "objectID": "data/normalized_df.html",
    "href": "data/normalized_df.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "avg_df  &lt;- readr::read_csv(\"/data/temp_vs_rides_avg.csv\")\n# Normalize each column to 0-1\nnormalized_df &lt;- avg_df %&gt;%\n  mutate(across(c(subs, cust, avg), ~ (. - min(.)) / (max(.) - min(.)))) %&gt;%\n  pivot_longer(cols = c(subs, cust, avg), names_to = \"user_type\", values_to = \"normalized_rides\")"
  },
  {
    "objectID": "data/normalized_df.html#provenance-of-normalized_df",
    "href": "data/normalized_df.html#provenance-of-normalized_df",
    "title": "Bike share case-study",
    "section": "",
    "text": "avg_df  &lt;- readr::read_csv(\"/data/temp_vs_rides_avg.csv\")\n# Normalize each column to 0-1\nnormalized_df &lt;- avg_df %&gt;%\n  mutate(across(c(subs, cust, avg), ~ (. - min(.)) / (max(.) - min(.)))) %&gt;%\n  pivot_longer(cols = c(subs, cust, avg), names_to = \"user_type\", values_to = \"normalized_rides\")"
  },
  {
    "objectID": "data/rides_durations.html",
    "href": "data/rides_durations.html",
    "title": "Pull ride durations for valid subscriber/customer rides under 200 min",
    "section": "",
    "text": "```R # Connect to the SQLite database con &lt;- dbConnect(RSQLite::SQLite(), “caseStudy.db”)\n\nPull ride durations for valid subscriber/customer rides under 200 min\nride_durations &lt;- dbGetQuery(con, ” SELECT CASE user_type WHEN 0 THEN ‘subscriber’ WHEN 1 THEN ‘customer’ END AS user_type, (end_time - start_time) / 60.0 AS duration_min FROM rides WHERE user_type IN (0, 1) AND end_time &gt; start_time AND (end_time - start_time) &lt; 12000 “)"
  },
  {
    "objectID": "data/rides_weather_df.html",
    "href": "data/rides_weather_df.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "rides_weather_df %&gt;% + mutate( + temp_bin = floor(temp / 2) * 2, + precip_label = case_when( + is.na(prcp) ~ “No data”, + prcp == 0 ~ “Dry”, + prcp &gt; 0 ~ “Wet” + ) + ) %&gt;% + group_by(temp_bin, user_type, precip_label) %&gt;% + summarise(rides = sum(rides), .groups = “drop”) %&gt;% + ggplot(aes(x = temp_bin, y = rides, color = user_type)) + + geom_line(size = 1) + + facet_wrap(~ precip_label, nrow = 1) + + labs( + title = “Ride Volume by Temperature and Precipitation”, + subtitle = “2°C temperature bins grouped by rain condition”, + x = “Temperature Bin (°C)”, + y = “Total Rides”, + color = “User Type” + ) + + scale_x_continuous(breaks = seq(-30, 40, by = 10)) + + theme_minimal(base_size = 14)"
  },
  {
    "objectID": "viz/Avg_Daily_Rides_by_Bike_and_User_Type_post_elec.html",
    "href": "viz/Avg_Daily_Rides_by_Bike_and_User_Type_post_elec.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Average Daily Rides by Bike Type and User Type (Post-Electric Launch)\n\n  \n\nAverage daily rides by bike type and user type after the introduction of electric bikes and scooters. Classic bikes remain dominant among subscribers, while electric modes see substantial adoption by both user groups.\n\n\n\nOverview\nThis bar chart displays the average number of daily rides by bike type, grouped by user type (Subscriber vs. Customer), for the period after the introduction of electric bikes and scooters.\n\n\nAxes and Groupings\n\nX-Axis (Bike Type):\n\nclassic_bike\ndocked_bike\nelectric_bike\nelectric_scooter\n\nY-Axis (Average Rides per Day):\n\nRanges from 0 to over 4,500 rides per day.\n\nColor Legend:\n\nRed = Subscriber\nTeal = Customer\n\n\n\n\nObservations\n\nClassic Bikes:\n\nMost used overall.\nSubscribers (red) significantly outnumber Customers in ride volume.\n\nDocked Bikes:\n\nVery low usage overall.\nOnly Customers use docked bikes in this dataset. Subscribers appear not to use docked bikes.\n\nElectric Bikes:\n\nPopular among both user types.\nSubscribers still dominate, but the Customer share is substantial.\n\nElectric Scooters:\n\nSlightly more popular with Customers than Subscribers.\nTotal volume is lower than bikes but non-trivial.\n\n\n\n\nInterpretation\n\nSubscriber Preference:\n\nStrongly favors classic and electric bikes.\nLikely reflects commuting and utilitarian travel patterns.\n\nCustomer Preference:\n\nMore evenly spread across bike types.\nHigher share of docked bike and scooter usage, suggesting casual or occasional use.\n\nModal Shift:\n\nThe presence of electric modes (bike and scooter) introduces significant usage from both user groups, possibly pulling some traffic away from classic bikes.\n\n\n\n\nUse Case\nThis visualization supports:\n\nInfrastructure planning (e.g., expansion of electric charging or docking stations),\nMarketing strategy (targeting modal preferences by user type),\nEvaluating post-launch success of electric mobility options.\n\n\n\nData Sources\n\nQuery to Load Data into R:\n\npost_electric_rides_df &lt;- dbGetQuery(con, \"SELECT\n   DATE(start_time, 'unixepoch') AS ride_date,\n   user_type,\n   bike_type,\n   COUNT(*) AS ride_count,\n   AVG((end_time - start_time) / 60.0) AS avg_duration_minutes\nFROM rides\nWHERE start_time &gt;= strftime('%s', '2023-01-01') -- first e-bike appeared\nGROUP BY ride_date, user_type, bike_type;\")\n\n- **Data Transformation in R:**\n\ndaily_avg_df &lt;- post_electric_rides_df %&gt;%\n  group_by(user_type, bike_type) %&gt;%\n  summarise(\n    avg_rides_per_day = mean(ride_count),\n    .groups = \"drop\"\n  )\n\nR Code Used to Generate Chart:\n\nggplot(daily_avg_df, aes(\n     x = bike_type,\n     y = avg_rides_per_day,\n     fill = fct_recode(as.factor(user_type),\n                       \"Subscriber\" = \"0\",\n                       \"Customer\" = \"1\")\n )) +\n     geom_bar(stat = \"identity\", position = \"dodge\") +\n     labs(\n         title = \"Average Daily Rides by Bike Type and User Type (Post-Electric Launch)\",\n         x = \"Bike Type\",\n         y = \"Average Rides per Day\",\n         fill = \"User Type\"\n     ) +\n     theme_minimal()"
  },
  {
    "objectID": "viz/Avg_Ride_Duration_by_Bike_and_User_type_post_elec.html",
    "href": "viz/Avg_Ride_Duration_by_Bike_and_User_type_post_elec.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Average Ride Duration by Bike Type and User Type\n\n  \n\nAverage ride duration by bike type and user type. Customers show much longer rides on docked bikes, while subscribers tend to have shorter, more consistent durations.\n\n\n\nOverview\nThis bar chart visualizes the average ride duration (in minutes) for each bike type, segmented by user type (Subscriber vs Customer), covering the period after electric bikes and scooters were introduced.\n\n\nAxes and Groupings\n\nX-Axis (Bike Type):\n\nclassic_bike\ndocked_bike\nelectric_bike\nelectric_scooter\n\nY-Axis (Average Ride Duration in Minutes):\n\nRanges up to 250 minutes for docked bikes.\n\nColor Legend:\n\nRed = Subscriber\nTeal = Customer\n\n\n\n\nObservations\n\nDocked Bikes:\n\nCustomers have the highest average ride duration (&gt;200 minutes).\nSubscribers do not appear to use docked bikes (no bar present).\n\nClassic Bikes:\n\nCustomers average ~30–40 minutes per ride.\nSubscribers average ~15 minutes.\n\nElectric Bikes and Scooters:\n\nBoth user groups show similar, shorter average durations (~10–15 minutes).\nCustomers have slightly longer rides than subscribers.\n\nVariability:\n\nDocked bike rides by customers have large error bars, indicating substantial variation in trip lengths.\n\n\n\n\nInterpretation\n\nCustomer Behavior:\n\nNon-subscribers take significantly longer trips on docked bikes, possibly reflecting more casual or exploratory riding.\nFor all bike types, customers tend to ride longer than subscribers.\n\nSubscriber Behavior:\n\nSubscribers’ ride durations are generally shorter and more consistent, likely due to commuting or time-sensitive trips.\n\nOperational Insight:\n\nThe high variability of docked bike ride times suggests a need to further investigate usage patterns and pricing impacts.\n\n\n\n\nData Sources\n\n****:\n\nduration_by_type &lt;- post_electric_rides_df %&gt;%\n    group_by(user_type, bike_type) %&gt;%\n    summarise(\n        avg_duration = mean(avg_duration_minutes, na.rm = TRUE),\n        sd_duration = sd(avg_duration_minutes, na.rm = TRUE),\n        .groups = \"drop\"\n    )\n\nData Transformation in R:\n\nduration_by_type$user_type &lt;- fct_recode(as.factor(duration_by_type$user_type),\n                                         \"Subscriber\" = \"0\",\n                                         \"Customer\" = \"1\")\n\nR Code Used to Generate Chart:\n\nggplot(duration_by_type, aes(\n+     x = bike_type,\n+     y = avg_duration,\n+     fill = user_type\n+ )) +\n+     geom_bar(stat = \"identity\", position = position_dodge(width = 0.9)) +\n+     geom_errorbar(aes(\n+         ymin = avg_duration - sd_duration,\n+         ymax = avg_duration + sd_duration\n+     ), position = position_dodge(width = 0.9), width = 0.3) +\n+     labs(\n+         title = \"Average Ride Duration by Bike Type and User Type\",\n+         x = \"Bike Type\",\n+         y = \"Avg Duration (minutes)\",\n+         fill = \"User Type\"\n+     ) +\n+     theme_minimal()"
  },
  {
    "objectID": "viz/Divvy_Stations_in_QGIS.html",
    "href": "viz/Divvy_Stations_in_QGIS.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Divvy Stations in QGIS\n\n  \n\nDivvy Stations in QGIS\n\n\nThis is a screen shot of the Divvy Stations plotted in QGIS. This was found in Divvy_Stations_2013.shp.zip which was included in the Divvy_Stations_Trips_2013.zip file.\nThis plot was not used as part of the case study."
  },
  {
    "objectID": "viz/Frequency_of_Temp_bins.html",
    "href": "viz/Frequency_of_Temp_bins.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Frequency of Temperature Bins\n\n  \n\nFrequency distribution of hourly temperature observations during the analysis period, illustrating data coverage across temperature ranges.\n\n\n\nOverview\nThis histogram shows how often each 2°C temperature range occurred in the underlying weather dataset. It helps contextualize the density of data points used in other temperature-related analyses, particularly the scarcity of very hot or very cold hours.\n\n\nChart Details\n\nX-Axis: Temperature Bin (°C), grouped in 2-degree intervals.\nY-Axis: Number of hourly records falling within each bin.\nBars: Height proportional to frequency of observations per bin.\n\n\n\nObservations\n\nThe majority of observations cluster between ~5°C and ~25°C.\nVery few hours fall below -10°C or above 30°C.\nThis uneven distribution explains why temperature-related charts show more stable trends in mid-range temperatures but can become volatile at extremes.\n\n\n\nInterpretation\nThe chart demonstrates that the dataset’s coverage is concentrated in moderate temperatures, suggesting caution when interpreting trends at temperature extremes due to sparse data.\n\n\nData Sources\n\nWeather Data: Hourly observations from Chicago Midway Airport via Meteostat Bulk Hourly Dataset.\n\nIncludes air temperature, dewpoint, humidity, precipitation, and other weather variables.\n\nTimeframe: Coverage aligned to available trip data (2013–2019 and 2023–2025), although this chart includes all available hourly weather records regardless of whether rides occurred.\n\n\n\nData Preparation\n\nHourly temperature records loaded into SQLite.\nTemperature rounded down to nearest 2°C bin (floor(temp / 2) * 2).\nCounts aggregated per bin using dplyr in R.\n\n\n\nR Code Used to Generate Chart:\n# Create temperature bins and count occurrences\ntemp_bins &lt;- hourly_weather_df %&gt;%\n  mutate(temp_bin = floor(temp / 2) * 2) %&gt;%\n  group_by(temp_bin) %&gt;%\n  summarise(count = n())\n\n# Plot histogram\nggplot(temp_bins, aes(x = temp_bin, y = count)) +\n  geom_col(fill = \"steelblue\") +\n  labs(\n    title = \"Frequency of Temperature Bins\",\n    x = \"Temperature Bin (°C)\",\n    y = \"Number of Hours\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "viz/Hourly_Rides_vs_Temp.html",
    "href": "viz/Hourly_Rides_vs_Temp.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Hourly Rides vs. Temperature (2°C bins)\n\n  \n\nHourly ride counts by temperature bin, with separate curves for Total, Subscriber, and Customer rides. Warmer temperatures strongly correlate with increased bike usage, especially among Customers.\n\n\nThis chart illustrates the relationship between ambient temperature (°C) and the number of rides starting at that temperature. Data is grouped into 2°C bins to smooth short-term fluctuations and reveal broader trends.\n\nChart Details\n\nX-Axis: Temperature in degrees Celsius.\nY-Axis: Total number of rides per bin, formatted with metric suffixes (e.g., 1k, 1M).\nGrid lines and a legend outside the plot area improve readability.\nThree ride categories are plotted:\n\nTotal Rides (black line)\nSubscribers (dark blue line)\nCustomers (dark orange line)\n\n\n\n\nObservations\n\nBike usage increases steadily with warmer weather, peaking for both Subscribers and Customers around 26°C (78.8°F), after which it falls off sharply.\nCustomers display a steeper increase in usage with temperature, suggesting stronger sensitivity to warm conditions.\nSubscribers maintain higher baseline usage in cooler temperatures but follow a similar bell-shaped curve overall.\n\n\n\nInterpretation\n\nThese trends highlight temperature as a powerful predictor of ridership.\nThe steeper response among Customers may reflect their recreational or discretionary usage.\nInsights from this pattern can inform:\n\nOperations (e.g., fleet redistribution, maintenance scheduling)\nMarketing campaigns (e.g., promoting rides during optimal weather windows)\n\n\n\n\nData Sources\n\nHourly Weather Data: Chicago Midway Airport hourly weather observations (temperature, precipitation, etc.)\nRide Data: Aggregated hourly ride counts joined to weather records by timestamp.\nPeriod: All available data between 2013 and 2025.\n\n\n\nData Preparation\nBelow is the SQL command used to prepare the dataset:\n.headers off\n.mode tabs\n.output temp_vs_rides.tsv\n\nWITH binned AS (                          -- 2 °C comfort‑oriented buckets\n    SELECT\n        CAST(temp / 2.0 AS INT) * 2              AS temp_bin,         -- –10,‑8,…,34\n        r.user_type,\n        SUM(r.rides)                             AS rides\n    FROM rides_per_hour_tbl   AS r\n    JOIN hourly_weather       AS w  ON w.epoch = r.epoch\n    GROUP BY temp_bin, r.user_type\n), pivot AS (                             -- turn rows into columns\n    SELECT\n        temp_bin,\n        SUM(rides)                                  AS total,\n        SUM(CASE WHEN user_type='subscriber' THEN rides END) AS subs,\n        SUM(CASE WHEN user_type='customer'   THEN rides END) AS cust\n    FROM binned\n    GROUP BY temp_bin\n    ORDER BY temp_bin\n)\nSELECT temp_bin, total, subs, cust\nFROM pivot;\n\n.output stdout\n\n\nGnuplot Script Used to Generate Chart:\nset format y \"%.0s%c\"\nset term wxt           \nset title \"Hourly Rides vs. Temperature\"\nset xlabel \"Temperature (°C)\"\nset ylabel \"Rides per hour\"\nset grid\nset datafile separator '\\t'   \nset key outside\nplot \\\n    \"temp_vs_rides.tsv\" every ::1::34 using 1:2 with lines lw 2 lc rgb \"black\" title \"Total\", \\\n    \"\"      every ::1::34 using 1:3 with lines lw 2 lc rgb \"dark-blue\" title \"Subscribers\", \\\n    \"\"      every ::1::34 using 1:4 with lines lw 2 lc rgb \"dark-orange\" title \"Customers\""
  },
  {
    "objectID": "viz/Non-Tourist_Customer_Distribution_Station_to_Station_Distance_spatial.html",
    "href": "viz/Non-Tourist_Customer_Distribution_Station_to_Station_Distance_spatial.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Station-to-Station Distance Distribution (Non-Tourist Customers, ≤10 km)\n\n  \n\nDistribution of station-to-station distances for non-tourist customer rides under 10 km. Distinct peaks highlight preferred trip lengths for local travel.\n\n\n\nOverview\nThis density plot visualizes the distribution of station-to-station distances under 10 km for rides taken by customer (non-subscriber) riders that did not involve tourist stations. The focus on shorter trips reveals finer patterns in local travel behavior.\n\n\nChart Details\n\nX-Axis: Distance Between Stations (km), ranging from 0 to 10 km\n\nY-Axis: Relative probability density of rides occurring at each distance\n\nPlot Style: Smoothed density plot with area normalized to 1\n\nAnnotations: Peaks labeled to highlight the most common trip lengths\n\n\n\nPurpose\nBy excluding longer trips (&gt;10 km), this chart provides a clearer view of the most typical ride distances, supporting planning and operational decisions about station placement and bike redistribution.\n\n\nObservations\n\nPrimary Peak (0.86 km): The most common ride length, suggesting very short intra-neighborhood trips.\nSecondary Peak (1.29 km): Another frequently observed trip length, likely representing local errands or commutes between adjacent districts.\nSteep Decline: Density decreases sharply beyond 4–5 km.\nAbsence of Long Tail: Filtering out longer rides eliminates noise from infrequent long-distance trips.\n\n\n\nInterpretation\n\nShort-Distance Focus: The dual peaks reinforce that casual users primarily rely on the system for short urban journeys.\nPotential Trip Typologies:\n\n~1 km: Last-mile or neighborhood-scale trips.\n~2–3 km: Short errands or transit connections.\n\nThe low density beyond 5 km indicates that even non-tourist customers rarely use the bikes for longer travel.\n\n\n\nTechnical Notes\n\nDistance Calculation: Computed with the Haversine formula between station coordinates.\nFiltering: Only trips with distance ≤10 km are included.\nAnnotations: Peaks were identified programmatically and labeled on the chart.\nDensity Scaling: Y-axis reflects probability density, not counts.\n\n\n\nR Code Used to Generate Chart:\nggplot(non_loop_rides_df %&gt;% filter(distance_km &lt;= 10), aes(x = distance_km)) +\n  geom_density(fill = \"darkorange\", alpha = 0.6) +\n  geom_point(data = top_peaks, aes(x = x, y = y), color = \"gray\", size = 2) +\n  geom_text(\n    data = top_peaks,\n    aes(x = x, y = y, label = paste0(\" \", round(x, 2), \" km\")),\n    angle = 25,\n    vjust = 0,\n    hjust = 0,\n    size = 3.5,\n    color = \"black\"\n  ) +\n  labs(\n    title = \"Non-Tourist Customer Distribution of Station-to-Station Distances (≤10 km)\",\n    x = \"Distance Between Stations (km)\",\n    y = \"Density\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "viz/Non-Tourist_Customer_Loop_Ride_Length_Distribution.html",
    "href": "viz/Non-Tourist_Customer_Loop_Ride_Length_Distribution.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Loop Ride Length Distribution by Week Part and Time of Day\n\n  \n\nLoop ride durations among non-tourist customers show a consistently skewed distribution, regardless of time of day or whether the ride occurred on a weekday or weekend.\n\n\n\nOverview\nThis visualization shows how loop ride durations vary by hour of day and by whether the ride occurred on a weekday or weekend. Each subplot represents a single hour of the day, illustrating patterns of ride duration frequency across time.\n\n\nChart Details\n\nX-Axis: Ride Length (minutes)\nY-Axis: Ride Count\nFaceting: 24 panels, each corresponding to an hour of day (0–23)\nColor Encoding: Fill colors differentiate combinations of weekday/weekend and hour\nPlot Type: Histogram with bin width = 1 minute\n\n\n\nObservations\n\nRides are heavily skewed toward short durations in all panels.\nMost rides fall under 10–15 minutes, regardless of hour.\nMidday and afternoon periods show slightly higher total counts.\nNo clear hour shows a major deviation in distribution shape.\n\n\n\nInterpretation\n\nLoop rides are generally short-duration recreational trips, rather than commutes.\nThe lack of time-of-day variation suggests consistent rider behavior.\nThe similarity between weekday and weekend distributions reinforces this interpretation.\n\n\n\nUse Case\nThis chart supports:\n\nService planning: anticipating typical ride lengths for rebalancing.\nUser engagement strategies: targeting short-trip promotions.\nOperational decisions: confirming the limited variability in loop ride duration.\n\n\n\nTechnical Notes\n\nData limited to rides starting and ending at the same station (loop rides).\nOnly non-tourist stations were included.\nBin width of 1 minute chosen for granularity.\nDuration computed as end_time - start_time in minutes.\n\n\n\nData Sources\n\nDatabase Table: rides\nFiltering Criteria:\n\nstart_station_id = end_station_id\nuser_type = customer\nExcluded known tourist stations\n\nTime Zone: Converted to Chicago local time\n\n\n\nR Code Used to Generate Chart:\nggplot(loop_rides_non_tourist, aes(x = ride_length_min, fill = interaction(week_part, hour_local))) +\n  geom_histogram(binwidth = 1, position = \"identity\", alpha = 0.5) +\n  facet_wrap(~ hour_local, ncol = 4) +\n  labs(\n    title = \"Loop Ride Length Distribution by Week Part and Time of Day\",\n    x = \"Ride Length (minutes)\",\n    y = \"Ride Count\",\n    fill = \"Week/Time\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "viz/Non-Tourist_Customer_Ride_Duration_Density.html",
    "href": "viz/Non-Tourist_Customer_Ride_Duration_Density.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Non-Tourist Customer Ride Duration Density\n\n  \n\nRide Duration Density for Non-Tourist Customer Trips. This smoothed density plot shows how ride lengths are distributed among customer (non-subscriber) rides that do not involve tourist stations.\n\n\n\nOverview\nThis density plot illustrates the distribution of ride durations (in minutes) for trips taken by non-tourist customers. The visualization focuses on how frequently different ride lengths occur, highlighting the most common trip durations.\n\n\nChart Details\n\nX-Axis: Ride Length (minutes), typically ranging from 0 to ~150.\nY-Axis: Density (smoothed probability density).\nPlot Style: Single density curve filled in orange to show concentration of rides.\n\n\n\nObservations\n\nThe distribution is sharply right-skewed, with most rides lasting under ~15 minutes.\nA clear peak appears between ~6–10 minutes, reflecting short urban trips.\nThe long tail shows occasional longer rides, although these are much less frequent.\n\n\n\nInterpretation\n\nShort rides dominate customer usage patterns, consistent with quick errands or intra-neighborhood trips.\nThe lack of a secondary peak suggests relatively uniform short-duration behavior among these riders.\nLonger rides may represent recreational trips or exploratory use.\n\n\n\nUse Case\nThis visualization is useful for:\n\nUnderstanding the central tendency and spread of ride lengths.\nSupporting decisions about pricing (e.g., time-based fees).\nTailoring operational planning for short-trip dominance among customer riders.\n\n\n\nTechnical Notes\n\nData Filtering:\n\nOnly includes customer rides.\nExcludes trips starting or ending at tourist stations.\n\nRide Length Calculation:\n\n(end_time - start_time) / 60.\n\nKernel Bandwidth: Auto-selected by ggplot2.\n\n\n\nData Sources\n\nData Frame: non_tourist_customer_rides_df\n\nCreated by filtering the rides table to include only customer trips with relevant station IDs.\nConverted timestamps to local time for consistency.\n\n\n\n\nR Code Used to Generate Chart:\nggplot(non_tourist_customer_rides_df, aes(x = ride_length_min)) +\n  geom_density(fill = \"darkorange\") +\n  labs(\n    title = \"Non-Tourist Customer Ride Duration Density\",\n    x = \"Ride Length (minutes)\",\n    y = \"Density\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "viz/Non-Tourist_Customer_Ride_Duration_by_Weekday_vs_Weekend.html",
    "href": "viz/Non-Tourist_Customer_Ride_Duration_by_Weekday_vs_Weekend.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Ride Duration Distribution by Weekday vs Weekend (Non-Tourist Customers)\n\n  \n\nRide Duration Distribution by Day Type (Customer Rides Only). This density plot shows the distribution of ride durations in minutes for non-tourist customer rides, separated by weekdays and weekends. Weekday rides tend to peak slightly earlier and higher than weekend rides, indicating a stronger presence of short utility trips during the work week.\n\n\n\nOverview\nThis kernel density plot compares ride durations (in minutes) for non-tourist customer bike rides, distinguishing between weekday and weekend behavior. It focuses exclusively on non-subscriber riders whose trips did not start or end near tourist destinations.\n\n\nChart Details\n\nX-Axis: Ride Length (minutes), ranging from 0 to 150.\nY-Axis: Density (smoothed kernel estimation).\nColors:\n\nWeekday (Blue): Tighter concentration at shorter durations.\nWeekend (Orange): Broader peak, more long-duration variability.\n\nPlot Type: Density plot with alpha blending to show overlap.\n\n\n\nObservations\n\nWeekday rides are shorter on average, peaking around 6–8 minutes, suggesting quick trips.\nWeekend rides peak later (~8–10 minutes) and show a longer tail.\nBoth distributions are right-skewed, confirming the majority of rides are under ~15 minutes.\n\n\n\nInterpretation\n\nWeekday trips are likely task-focused (errands, commuting).\nWeekend trips are more discretionary and potentially recreational.\nThe consistent shape across days supports the idea of habitual short-distance usage among non-tourist customers.\n\n\n\nUse Case\nThis chart can be applied to:\n\nDemand modeling and pricing strategies sensitive to day type.\nUser segmentation based on duration patterns.\nPlanning operational resources around expected trip lengths.\n\n\n\nTechnical Notes\n\nData Filtering:\n\nuser_type = customer\nExcluded known tourist stations.\n\nDuration: Calculated as (end_time - start_time) / 60.\nKernel Bandwidth: Automatically selected by ggplot2.\nRides over 150 minutes excluded to improve interpretability.\n\n\n\nData Sources\n\nData Frame: non_tourist_customer_rides_df\n\nDerived from the rides table filtered for customer trips, start/end station IDs, and date range.\nPreprocessed with timezone adjustment to Chicago local time.\n\n\n\n\nR Code Used to Generate Chart:\nggplot(non_tourist_customer_rides_df, aes(x = ride_length_min, fill = week_part)) +\n  geom_density(alpha = 0.4) +\n  scale_fill_manual(values = c(\"Weekday\" = \"darkblue\", \"Weekend\" = \"darkorange\")) +\n  labs(\n    title = \"Non-Tourist Customer Ride Duration by Weekday vs Weekend\",\n    x = \"Ride Length (minutes)\",\n    fill = \"Day Type\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "viz/Non-Tourist_Customer_Ride_Duration_vs_Station_Distance.html",
    "href": "viz/Non-Tourist_Customer_Ride_Duration_vs_Station_Distance.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Ride Duration vs. Station Distance (Non-Tourist Customers)\n\n  \n\nRide Duration vs. Station Distance (Non-Tourist Customer Rides) This scatterplot displays the relationship between ride length and distance between stations. While longer distances generally correspond to longer durations, many short-distance rides also exhibit long durations, suggesting varied usage patterns. A linear reference line highlights the lower boundary of likely direct trips.\n\n\n\nOverview\nThis scatterplot shows the relationship between ride duration and station-to-station distance for non-tourist customer rides. A linear reference line illustrates the general trend.\n\n\nChart Details\n\nX-Axis: Distance Between Stations (km), 0–30.\nY-Axis: Ride Duration (minutes), 0–150.\nPoints: Green dots for individual rides.\nLine: Blue linear fit (least squares).\n\n\n\nObservations\n\nDense cluster of short rides with low durations.\nHigh variance: many short trips took long times.\nSparse long-distance trips with a broad range of durations.\nBlue line suggests the fastest plausible rides for a given distance.\n\n\n\nInterpretation\n\nClear positive correlation between distance and time.\nWide variability suggests many rides included stops, detours, or leisurely pacing.\n\n\n\nUse Case\n\nIdentify outlier usage patterns.\nUnderstand trip efficiency and routing behavior.\nInform operational planning for short vs. long trips.\n\n\n\nData Sources\n\nRide Data: Non-tourist customer rides filtered to exclude trips that start and end at the same station.\nStation Coordinates: Merged from cleaned station dataset(s).\nTime Frame: 2023 onward, as defined in the project scope.\n\n\n\nR Code Used to Generate the Chart\nlibrary(ggplot2)\nggplot(non_loop_rides_df, aes(x = distance_km, y = ride_length_min)) +\n  geom_point(alpha = 0.05, color = \"darkgreen\") +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"blue\") +\n  labs(\n    title = \"Ride Duration vs. Station Distance\",\n    x = \"Distance Between Stations (km)\",\n    y = \"Ride Length (minutes)\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "viz/Non-Tourist_Customer_Rides_by_Day_of_the_Week.html",
    "href": "viz/Non-Tourist_Customer_Rides_by_Day_of_the_Week.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Non-Tourist Customer Rides by Day of the Week\n\n  \n\nTotal customer rides per day of week at non-tourist stations, highlighting the clear weekend peaks in ridership.\n\n\n\nOverview\nThis bar chart displays the total number of customer rides at non-tourist stations, grouped by day of the week. By focusing on non-tourist stations, the visualization emphasizes local usage patterns rather than rides taken by visitors.\n\n\nChart Details\n\nX-Axis: Day of the week (Sunday through Saturday)\nY-Axis: Total ride count per day\nBars: Aggregate counts of rides initiated by customers at non-tourist stations\n\n\n\nPurpose\nTo illustrate weekly patterns in casual (customer) ridership among local users, highlighting which days see higher or lower activity.\n\n\nObservations\n\nWeekends (Saturday and Sunday): Highest ride volumes, indicating strong recreational or leisure usage.\nWeekdays (Monday–Friday): Lower and relatively consistent ride counts compared to weekends.\nPeak day: Saturday shows the most activity overall.\n\n\n\nInterpretation\n\nThe clear weekend peak suggests most customer rides are discretionary trips taken for leisure rather than routine commuting.\nThe relative uniformity of weekday rides indicates a stable but smaller base of casual usage during the workweek.\n\n\n\nTechnical Notes\n\nRides were filtered to:\n\ncustomer user type (not subscribers)\nExclude all tourist stations\n\nDay of week extracted from ride start timestamps (converted to local time)\n\n\n\nData & Methods\n\nData Source:\n\nPre-processed dataframe non_tourist_customer_rides_df\n\nFiltered by:\n\nNon-tourist station IDs\ncustomer user type\n\n\n\n\n\nR Code Used to Generate Chart:\nggplot(non_tourist_customer_rides_df, aes(x = day_of_week)) +\n     geom_bar(fill = \"steelblue\") +\n     labs(\n         title = \"Non-Tourist Customer Rides by Day of the Week\",\n         x = \"Day of the Week\",\n         y = \"Number of Rides\"\n     ) +\n     theme_minimal()"
  },
  {
    "objectID": "viz/Non-Tourist_Customer_Rides_by_Hour_of_Day.html",
    "href": "viz/Non-Tourist_Customer_Rides_by_Hour_of_Day.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Non-Tourist Customer Rides by Hour of Day\n\n  \n\nHourly distribution of customer rides originating from non-tourist stations, showing peak activity in the late afternoon.\n\n\n\nOverview\nThis bar chart shows how customer rides at non-tourist stations vary across the 24-hour day. By excluding rides from stations frequently used by tourists, this visualization highlights local usage patterns, such as commuting or neighborhood trips. Excluding sightseeing or visitor behavior as much as possible.\n\n\nChart Details\n\nX-Axis: Hour of day (0 = midnight, 23 = 11 PM)\nY-Axis: Number of rides started in each hour\nBars: Hourly ride counts by customer users at non-tourist stations\n\n\n\nPurpose\nTo identify when non-tourist customer rides occur most frequently and to reveal possible commuter or routine daily patterns among local riders.\n\n\nObservations\n\nEarly morning (0–5 AM): Minimal activity.\nMorning ramp-up (6–11 AM): Gradual increase as the day progresses.\nMidday plateau (12–15 PM): Consistent moderate ride volume.\nPeak period (16–18 PM): Pronounced spike with the highest volume around 17:00.\nEvening taper (19–23 PM): Gradual decline but still notable usage into the night.\n\n\n\nInterpretation\nThe clear peak around 5 PM suggests:\n\nAfter work recreation or errands.\nPossible casual commuting behavior.\n\nThe modest morning volume and sustained midday usage indicate that, while some rides may be utilitarian, many are likely discretionary trips by locals.\n\n\nTechnical Notes\n\nTourist stations were excluded based on a curated station ID list.\nRides filtered to customer user type.\nAll timestamps converted to Chicago local time.\nBin width: 1 hour per bar.\n\n\n\nData & Methods\n\nData Source:\n\nPre-processed dataframe rides_by_hour_weekpart\n\nFiltered by:\n\nNon-tourist station IDs\ncustomer user type\ntime converted to local time\n\n\n\n\n\nR Code Used to Generate Chart:\nggplot(rides_by_hour_weekpart, aes(x = hour, y = ride_count, fill = week_part)) +\n    geom_col(position = \"dodge\") +\n    labs(\n        title = \"Non-Tourist Customer Rides by Hour of Day\",\n        subtitle = \"Adjusted to Chicago Local Time\",\n        x = \"Hour of Day\",\n        y = \"Ride Count\",\n        fill = \"Day Type\"\n    ) +\n    scale_x_continuous(breaks = 0:23) +\n    theme_minimal()"
  },
  {
    "objectID": "viz/Non-Tourist_Customer_Rides_by_Season.html",
    "href": "viz/Non-Tourist_Customer_Rides_by_Season.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Non-Tourist Customer Rides by Season\n\n  \n\nTotal customer rides originating at non-tourist stations, aggregated by season. Summer shows the highest volume, with winter substantially lower.\n\n\n\nOverview\nThis bar chart summarizes the total ride volume by season for customers using non-tourist stations. It helps illustrate seasonal variability in casual riding behavior.\n\n\nChart Details\n\nX-Axis: Season (Spring, Summer, Fall, Winter)\nY-Axis: Number of rides\nBar Fill: Solid dark orange\n\n\n\nPurpose\nThis chart highlights how seasonal factors influence casual ridership, such as weather and daylight availability, independent of tourist activity.\n\nObservations\n\nSummer: Rides peak sharply, exceeding 600,000 rides. Reflecting warm weather and extended daylight hours.\nFall: Second-highest ridership, over 400,000 rides, showing sustained use into cooler months.\nSpring: More modest totals (~220,000 rides), likely reflecting a gradual ramp-up in riding.\nWinter: Lowest ridership (under 200,000), consistent with reduced bike use in cold conditions.\n\n\n\n\nInterpretation\n\nThe strong seasonal trend underscores the importance of temperature and daylight in casual rider behavior.\nEven excluding tourist hotspots, ridership in summer triples or quadruples winter levels.\nThese patterns can inform resource allocation (e.g., rebalancing bikes) and maintenance scheduling.\n\n\n\nData & Methods\n\nData Source:\nFiltered rides from the dataset:\n\nnon_tourist_customer_rides_df\nFilters Applied:\n\nuser_type = customer\nStart station ID in non-tourist stations list\n\n\n\n\nR Code Used to Generate Chart:\nggplot(non_tourist_customer_rides_df, aes(x = season)) +\n     geom_bar(fill = \"darkorange\") +\n     labs(\n         title = \"Non-Tourist Customer Rides by Season\",\n         x = \"Season\",\n         y = \"Number of Rides\"\n     ) +\n     theme_minimal()"
  },
  {
    "objectID": "viz/Non-Tourist_Non-Loop_Customer_Ride_Distance_Distribution_by_Ride_Duration_Cluster.html",
    "href": "viz/Non-Tourist_Non-Loop_Customer_Ride_Distance_Distribution_by_Ride_Duration_Cluster.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Ride Distance Distribution by Duration Cluster (Non-Tourist, Non-Loop, Customers)\n\n  \n\nRide Distance Distribution by Duration Cluster (Customer Rides Only) This density plot compares ride distances for non-tourist, non-loop customer rides, grouped into clusters based on ride duration. Short-duration rides are tightly concentrated around 1–2 km, medium-duration rides cover a broader 2–6 km range, and long-duration rides extend further, reflecting distinct usage behaviors within the same user group.\n\n\n\nOverview\nThis kernel density plot illustrates the distribution of ride distances (in kilometers) for non-tourist, non-loop customer rides, broken out by ride duration clusters labeled Short, Medium, and Long. Clustering these customer rides by duration helps uncover distinct usage patterns, such as short errand-like trips versus longer recreational journeys, without needing to segment riders further or rely on additional metadata.\n\n\nChart Details\n\nX-Axis (Distance in km):\n\nRanges from 0 to 10 km.\nRepresents the straight-line distance between start and end stations (minimum possible distance). Note: this is not actual path distance.\n\nY-Axis (Density):\n\nProbability density of ride distances within each cluster.\nHigher peaks = more common distances.\n\nCluster Colors:\n\nShort (Blue) – sharp peak around 1–2 km.\nMedium (Green) – broad distribution across ~2.5–6 km.\nLong (Red/Pink) – flatter spread across 3–10 km.\n\n\n\n\nObservations\n\nShort rides:\n\nHighest density overall.\nStrong preference for distances under 3 km.\n\nMedium rides:\n\nBroadest range of distances.\nTransitional usage pattern overlapping short and long rides.\n\nLong rides:\n\nLess frequent but cover widest distance range.\n\n\n\n\nInterpretation\n\nShort-duration trips are likely local, last-mile or neighborhood errands.\nMedium rides reflect mixed use: commuting and recreation.\nLong rides are more destination-focused or leisurely.\n\n\n\nUse Case\nThis chart helps:\n\nUnderstand non-tourist customer ride behavior segmented by trip duration.\nSupport targeted strategies for operations and pricing.\nInform planning of infrastructure, such as dock placement or service areas.\n\n\n\nData Sources\n\nRide Records: Filtered to exclude subscriber rides, tourist stations, and loop rides (rides that start and end at the same station).\nDistance Calculation: Haversine distance between station coordinates.\n\n\nR Code Used to Generate the Chart:\nggplot(non_loop_rides_df, aes(x = distance_km, fill = duration_cluster)) +\n  geom_density(alpha = 0.5) +\n  scale_fill_manual(values = c(\n    \"Short\" = \"blue\",\n    \"Medium\" = \"green\",\n    \"Long\" = \"red\"\n  )) +\n  labs(\n    title = \"Non-Tourist, Non-Loop Customers Ride Distance (km) Distribution by Ride Duration Cluster\",\n    x = \"Distance (km)\",\n    y = \"Density\",\n    fill = \"Duration Cluster\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "viz/Normalized_Avg_Hourly_Rides_vs_Temperature.html",
    "href": "viz/Normalized_Avg_Hourly_Rides_vs_Temperature.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Normalized Average Hourly Rides vs Temperature\n\n  \n\nNormalized average hourly rides by temperature (°C), showing subscriber, customer, and total ride volume peaking near 25°C.\n\n\n\nOverview\nThis line chart displays how bike ride frequency varies with temperature, separated by user type. Data is normalized, meaning each series is scaled between 0 and 1 to emphasize trend shape rather than absolute counts.\n\n\nChart Details\n\nX-Axis (Temperature °C):\n\nRanges approximately -10°C to +35°C.\n\nY-Axis (Normalized Average Hourly Rides):\n\nScaled 0–1 within each series.\n\nLines:\n\nDark blue: Subscribers.\nDark orange: Customers.\nBlack: Combined total average.\n\n\n\n\nObservations\n\nAll series follow a bell-shaped curve, peaking near 25°C (~77°F).\nBelow 5°C:\n\nAll ride volume is very low.\n\n5–25°C:\n\nSharp increase in ridership, especially among customers.\n\n&gt;30°C:\n\nSlight decline in rides, more pronounced for customers.\n\n\n\n\nInterpretation\n\nSubscribers: More consistent usage, reflecting commuting or necessity.\nCustomers: More sensitive to temperature, showing higher warm-weather peaks and steeper hot/cold drop-offs.\nThe normalized pattern confirms temperature is a primary driver for all user types.\n\n\n\nBehavioral Insights\n\n\n\n\n\n\n\n\n\nTemperature Range\nCustomer Behavior\nSubscriber Behavior\nInterpretation\n\n\n\n\n&lt;5°C\nVery low ridership\nModerately low\nCold strongly suppresses casual rides\n\n\n5–25°C\nSteep increase\nModerate increase\nWarmer weather encourages use\n\n\n~25°C\nPeak ridership\nNear-peak\nIdeal riding conditions\n\n\n30-25°C\nDecline\nSlight increase\nHeat discourages casual trips\n\n\n&gt;35°C\nSharp Decline\nSharp Decline\nExtreme heat discourages all trips\n\n\n\n\n\nUse Case\nThis visualization is useful for:\n\nUnderstanding seasonal ride patterns.\nModeling demand sensitivity to weather.\nDesigning promotions and fleet strategies.\n\n\n\nData Sources\n\nRide Counts: Aggregated hourly ride counts per user type.\nTemperature: Hourly observations joined on timestamp.\nNormalization: Each series scaled to [0–1].\n\n\n\nR Code Used to Generate the Chart:\nggplot(normalized_df, aes(x = temp_bin, y = normalized_rides, color = user_type)) +\n  geom_line(size = 1.2) +\n  labs(\n    title = \"Normalized Avg Hourly Rides vs Temperature\",\n    x = \"Temperature (°C)\",\n    y = \"Normalized Avg Hourly Rides\",\n    color = \"User Type\"\n  ) +\n  scale_color_manual(values = c(\"subs\" = \"darkblue\", \"cust\" = \"darkorange\", \"avg\" = \"black\")) +\n  theme_minimal()"
  },
  {
    "objectID": "viz/Ride_Duration_Distribution.html",
    "href": "viz/Ride_Duration_Distribution.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Ride Duration Distribution by User Type\n\n  \n\nRide duration distribution for customers and subscribers. Subscriber rides tend to be shorter and more consistent, while customer rides show a broader range.\n\n\n\nOverview\nThis histogram shows how ride durations differ between Subscribers and Customers. The distribution is plotted as a count of rides by duration (in minutes), revealing distinct usage patterns between user types.\n\n\nChart Details\n\nX-Axis: Ride duration in minutes, from 0 to 200 minutes.\nY-Axis: Count of rides in each duration bin.\nBars:\n\nBlue (Subscribers): Rides tightly clustered around shorter durations.\nOrange (Customers): Rides more spread out, with a longer tail.\n\nBin Width: 2 minutes per bar.\n\n\n\nPurpose\nThis visualization compares usage patterns between customers and subscribers, showing that the two groups engage with the bike share system very differently in terms of how long they ride.\n\n\nObservations\n\nSubscribers:\n\nMajority of rides are under 30 minutes.\nStrong peak around 10–15 minutes.\nRapid drop-off after 30 minutes, suggesting time-constrained rides (possibly to avoid overage fees).\n\nCustomers:\n\nRide duration distribution is flatter and broader.\nSignificant number of rides extend beyond 30 minutes.\nTail extends beyond 100 minutes, though with diminishing frequency.\n\n\n\n\nInterpretation\n\nSubscriber rides are likely more utilitarian in nature, for example commutes or quick errands, further shaped by pricing plans that encourage shorter trips.\nCustomer rides are more exploratory or recreational, often longer and less time-sensitive.\nThe chart highlights a fundamental behavioral difference in how the system is used by each group.\n\n\n\nTechnical Notes\n\nDuration is measured from ride start to ride end.\nRides over 200 minutes are excluded for scale clarity.\nThe bin width used here is 2 minutes, offering good resolution of short trips.\n\n\n\nR Code Used to Generate Chart\nggplot(ride_durations, aes(x = duration_min, fill = user_type)) +\n  geom_histogram(binwidth = 2, position = \"identity\", alpha = 0.6) +\n  labs(\n    title = \"Ride Duration Distribution\",\n    x = \"Duration (minutes)\",\n    y = \"Ride Count\"\n  ) +\n  scale_fill_manual(values = c(\"subscriber\" = \"#1f77b4\", \"customer\" = \"#ff7f0e\")) +\n  scale_y_continuous(labels = label_number(scale_cut = cut_short_scale())) +\n  theme_minimal()"
  },
  {
    "objectID": "viz/Ride_Volume_by_Temp_2_bin.html",
    "href": "viz/Ride_Volume_by_Temp_2_bin.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Ride Volume by Temperature (2°C Bins)\n\n  \n\nTotal ride volume across 2°C temperature bins, comparing Customers, Subscribers, and the overall total. Warmer temperatures strongly correlate with increased usage.\n\n\n\nOverview\nThis line chart shows the total number of rides grouped into 2°C temperature bins, with separate lines for Customer, Subscriber, and Total ride counts. It highlights how temperature influences ridership over the dataset period.\n\n\nChart Details\n\nX-Axis (Temperature in °C, binned):\n\nRanges from approximately –25°C to +35°C.\nEach point represents a 2-degree bucket of hourly temperatures.\n\nY-Axis (Total Rides):\n\nRanges from 0 to over 3 million rides per bin.\nShows the cumulative ride volume within each temperature range.\n\nLine Colors:\n\nRed – Customer rides.\nBlue – Subscriber rides.\nBlack – Total rides (sum of both).\n\n\n\n\nObservations\n\nRising Trend with Temperature:\n\nRides increase steadily from freezing upward.\nPeak usage occurs between ~18–25°C.\n\nPost-Peak Decline:\n\nRide volume drops sharply above ~25°C, suggesting heat discourages riding.\n\nSubscribers Dominate Overall Volume:\n\nAt all temperatures, Subscriber rides outnumber Customer rides by a wide margin.\nCustomer volume rises proportionally faster as temperatures warm but remains lower overall.\n\n\n\n\nInterpretation\n\nThe bell-shaped distribution demonstrates that mid-range temperatures are optimal for riding.\nBoth user types respond similarly to seasonal temperature shifts, though Customers show slightly more sensitivity to extremes.\n\n\n\nUse Case\nThis visualization can inform: - Seasonal fleet planning and rebalancing. - Targeted promotions or outreach during optimal riding weather. - Infrastructure readiness for peaks in demand.\n\n\nR Code Used to Generate Chart\nggplot(binned_rides, aes(x = temp_bin)) +\n    geom_line(aes(y = total, color = \"Total\")) +\n    geom_line(aes(y = subscriber, color = \"Subscriber\")) +\n    geom_line(aes(y = customer, color = \"Customer\")) +\n    scale_color_manual(values = c(\"Total\" = \"black\", \"Subscriber\" = \"blue\", \"Customer\" = \"red\")) +\n    labs(\n        title = \"Ride Volume by Temperature (2°C Bins)\",\n        x = \"Temperature (°C, binned)\",\n        y = \"Total Rides\",\n        color = \"User Type\"\n    ) +\n    scale_y_continuous(labels = label_number(scale_cut = cut_short_scale())) +\n    theme_minimal()"
  },
  {
    "objectID": "viz/Temp_vs_Ride_Volume_by_User_Type.html",
    "href": "viz/Temp_vs_Ride_Volume_by_User_Type.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Temperature vs Ride Volume by User Type\n\n  \n\nHourly ride volume by temperature, faceted by user type. Warmer temperatures correlate strongly with increased ride volume for both customers and subscribers, with subscriber volume remaining higher across all temperatures.\n\n\n\nOverview\nThis dual-panel line plot compares hourly ride volume to temperature (°C) for each user type separately. It illustrates how customers and subscribers respond differently to temperature changes.\n\n\nChart Details\n\nX-Axis: Temperature in °C.\nY-Axis: Hourly ride count.\nFacets:\n\nLeft: Customers.\nRight: Subscribers.\n\nLine: LOESS smooth showing trend across all hourly observations.\n\n\n\nObservations\n\nRide volume is lowest below freezing, rising quickly as temperatures warm.\nSubscribers consistently have higher hourly volume across the entire temperature range.\nBoth user types show a smooth, nonlinear increase, with no clear plateau in the observed temperatures.\nThe upward trend becomes especially pronounced above ~20°C.\n\n\n\nInterpretation\nThese patterns suggest that temperature strongly influences ridership among both groups, but subscribers are more resilient to cold and maintain more consistent usage. The continuous rise highlights that moderate and warm weather significantly increase demand.\n\n\nData Sources\n\nTrip Data: Divvy trip records from:\n\n2013–2019 (S3 archive)\n2023–2025 (City of Chicago Data Portal)\n\nWeather Data: Chicago Midway Airport hourly observations via Meteostat.\n\n\nData Preparation\n\nRides aggregated per hour and user type (COUNT(*) AS rides).\nWeather joined on hourly epoch timestamp (start_time / 3600 * 3600).\nNo filtering by precipitation.\nLOESS smoothing applied within each user type facet.\n\n\n\nR Code Used to Generate Chart:\nggplot(rides_weather_df, aes(x = temp, y = rides)) +\n     geom_smooth(method = \"loess\", se = FALSE, color = \"darkgreen\") +\n     scale_y_continuous(labels = label_number(scale_cut = cut_short_scale())) +\n     facet_wrap(~ user_type) +\n     labs(\n         title = \"Temperature vs Ride Volume by User Type\",\n         x = \"Temperature (°C)\",\n         y = \"Hourly Ride Volume\"\n     ) +\n     theme_minimal()"
  },
  {
    "objectID": "viz/Top_20_Most_Asymmetric_Paths_by_User_Type.html",
    "href": "viz/Top_20_Most_Asymmetric_Paths_by_User_Type.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Top 20 Most Asymmetric Paths by User Type\n\n  \n\nTop 20 bike-share station pairs with the most directional imbalance by user type. Customers show high asymmetry around central business district hubs, while subscriber asymmetries often reflect lakefront access or commuter endpoint behavior.\n\n\n\nOverview\nThis chart shows the 20 most directionally imbalanced station pairs for customers and subscribers, ranked by asymmetry ratio. Each bar represents a station-to-station path where trips predominantly flow in one direction.\n\n\nChart Details\n\nX-Axis: Asymmetry Ratio (0.0 to ~0.7)\n\nA higher value indicates more strongly one-way flows.\n\nY-Axis: Station pairs, labeled inside the bars.\nPanels:\n\nOne for each user type (Customer and Subscriber).\n\n\n\n\nObservations\n\nCustomers:\n\nHigh asymmetry centered around central business district stations and transit hubs.\n\nSubscribers:\n\nStrong asymmetry toward lakefront or edge-of-network destinations.\n\nContrast:\n\nCustomer asymmetry is urban-core focused.\nSubscriber asymmetry suggests recreation or commute endpoints.\n\n\n\n\nInterpretation\n\nAsymmetry highlights operational imbalances and user behavior patterns.\nPaths with high one-way traffic often require rebalancing or targeted incentives.\n\n\n\nUse Case\nSupports:\n\nRebalancing plans.\nInfrastructure decisions.\nTargeted marketing to address directional demand.\n\n\n\nR Code Used to Generate Chart\nggplot(asym_top, aes(x = asymmetry_ratio, y = reorder(path_label, asymmetry_ratio))) +\n    geom_col(fill = \"darkblue\") +\n    geom_text(\n        aes(label = path_label),\n        x = 0.01,                   \n        hjust = 0,                  \n        color = \"white\",\n        size = 2.7,\n        fontface = \"plain\"\n    ) +\n    facet_wrap(~ user_type_label, scales = \"free_y\") +\n    labs(\n        title = paste(\"Top\", top_n, \"Most Asymmetric Paths by User Type\"),\n        x = \"Asymmetry Ratio\", \n        y = NULL\n    ) +\n    coord_cartesian(xlim = c(0, max(asym_top$asymmetry_ratio) + 0.10)) +\n    theme_minimal(base_size = 11) +\n    theme(\n        plot.title = element_text(hjust = 0.1),\n        axis.text.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        panel.grid.major.y = element_blank()\n    )\n\n\n\nTop 20 Most Asymmetric Paths by User Type\n\n  \n\nTop 20 bike-share station pairs with the most directional imbalance by user type. Customers show high asymmetry around central business district hubs, while subscriber asymmetries often reflect lakefront access or commuter endpoint behavior.\n\n\n\n📝 Image Notes\nTitle: Top 20 Most Asymmetric Paths by User Type X-Axis: Asymmetry Ratio (from 0.0 to ~0.7) Panels: Two side-by-side bar charts\n\nLeft panel: Top asymmetric paths for Customers\nRight panel: Top asymmetric paths for Subscribers\n\n\n\nInterpretation\n\nAsymmetry Ratio\n\nA value approaching 1 indicates heavy one-way usage between a pair of stations. Rides commonly occur in one direction but rarely the other.\n\nCustomer Patterns\n\nConcentrated near transit stations and central business districts. Reflect unidirectional use, possibly due to nearby public transit hubs, tourism drop-offs, or lack of return trips.\n\nSubscriber Patterns\n\nFocus on lakefront access (e.g., Streeter Dr, Lake Shore Dr) and commuter endpoints. Suggest consistent commuting flows where riders may use other transportation methods for return trips (e.g., walking or transit).\n\nContrast\n\nWhile customers show asymmetry in the urban core, subscribers show it around recreational or edge areas."
  },
  {
    "objectID": "viz/Top_50_Stations_by_User_Type.html",
    "href": "viz/Top_50_Stations_by_User_Type.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Top 50 Stations by User Type\n\n  \n\nTop 50 stations for subscribers (blue) and customers (red). Dot size scales with ride count.\n\n\n\nOverview\nThis interactive map of the top 50 stations includes the top 50 stations by number of subscriber rides and the top 50 stations by number of customer rides. We break from the normal color scheme as more contrast was required due to the preexisting colors in the map. So the dots for subscriber stations rendered in blue and the dots for customer stations rendered in red. The dots for stations are offset slightly to avoid one dot obscuring the other for the cases where the station is in the top 50 for both subscribers and customers. This is accomplished by using a data frame where the location of the stations is offset. The size of the dots is scaled by the total number of rides (subscriber or customer as appropriate), so that stations with more rides are larger dots.\n\n\nChart Details\n\nBlue dots represent stations ranked in the top 50 for subscriber rides.\nRed dots represent stations ranked in the top 50 for customer rides.\nDots are offset slightly to avoid overlap in cases where a station ranks in the top 50 for both groups.\nCircle size is proportional to the total ride volume of each station.\nA pop-up displays station name, rank, user type, and formatted ride count.\n\n\n\nObservations\n\nSome stations appear prominently for both user types, indicating shared high-traffic locations.\nCertain clusters (particularly in tourist-heavy or commuter-focused areas) are strongly associated with one user group.\nA visual concentration of customer stations appears near popular attractions.\n\n\n\nInterpretation\nThe visualization underscores behavioral differences between subscribers (likely commuters or regular riders) and customers (potentially tourists or occasional users). Identifying these patterns supports targeted operational decisions, such as bike rebalancing and station expansion.\n\n\nUse Case\nThis map can be used by: - Transportation planners to prioritize infrastructure improvements. - Marketing teams to develop user-segmented promotions. - Operations teams to allocate resources efficiently based on demand hotspots by user type.\n\n\nTechnical Notes\n\nTo create the offset effect, longitude coordinates were shifted slightly in the data frame (long_offset).\nCircle radius was scaled using the square root of ride counts to moderate the impact of extreme outliers.\nA custom color palette was applied for improved contrast against the base map.\nThe visualization was generated using the leaflet R package.\n\n\n\nData Sources\n\nDivvy Trip Data: Chicago open data portal\nStation Metadata: Divvy station reference dataset\nData preprocessed and aggregated to compute ride counts per station and user type.\n\n\n\nR Code Used to Generate Chart:\nlibrary(leaflet)\nlibrary(RColorBrewer)\n\n# Color palette safer for colorblind accessibility\npal &lt;- colorFactor(\n    palette = c(\"#377eb8\", \"#e41a1c\"),\n    domain = top_stations_df_offset$user_type\n)\n\n# Scaling constant for circle radius\nscale_factor &lt;- 0.05\n\nleaflet(top_stations_df_offset) %&gt;%\n    addProviderTiles(providers$CartoDB.Positron) %&gt;%\n    addCircleMarkers(\n        lng = ~long_offset,\n        lat = ~lat,\n        color = ~pal(user_type),\n        radius = ~pmax(sqrt(ride_count) * scale_factor, 4),\n        stroke = TRUE,\n        weight = 1,\n        opacity = 1,\n        fillOpacity = 0.8,\n        popup = ~paste0(\n            \"&lt;b&gt;\", name, \"&lt;/b&gt;&lt;br&gt;\",\n            \"Rank: #\", rn, \"&lt;br&gt;\",\n            \"User Type: \", user_type, \"&lt;br&gt;\",\n            \"Ride Count: \", format(ride_count, big.mark = \",\")\n        )\n    ) %&gt;%\n    addLegend(\n        position = \"bottomright\",\n        pal = pal,\n        values = ~user_type,\n        title = \"User Type\",\n        opacity = 1\n    )"
  },
  {
    "objectID": "viz/average_hourly_rides_vs_temp_2_bucket_avg_sub_cust.html",
    "href": "viz/average_hourly_rides_vs_temp_2_bucket_avg_sub_cust.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Average Hourly Rides vs. Temperature by User Type\n\n  \n\nAverage hourly ride counts by temperature (°C), separated by user type. Temperature is binned in 2-degree increments, with data recorded hourly.\n\n\nOverview\nThis line chart shows the average number of rides per hour as a function of temperature, separated by subscribers and customers.\n\n\nChart Details\n\nX-Axis: Temperature in degrees Celsius (°C), binned in 2-degree increments.\nY-Axis: Average rides per hour.\nLines:\n\nSolid Line: Total rides across both user types.\nDashed Line: Subscriber rides.\nDotted Line: Customer rides.\n\n\n\n\nObservations\n\nRide volume increases steadily from sub-zero temperatures up to ~25 °C.\nSubscribers consistently have higher hourly ride counts at all temperatures.\nAbove 30 °C, total rides plateau rather than decline.\nThe temperature effect is strong, reinforcing the importance of weather in ride behavior.\n\n\n\nInterpretation\n\nThe consistent gap between subscriber and customer lines suggests subscribers are more temperature-resilient.\nThe plateau beyond 30 °C differs from some other plots where high heat reduced ridership. This could reflect aggregation smoothing or time-of-day confounding.\nOverall, this supports modeling temperature as a key driver of hourly ride volume.\n\n\n\nData Sources\n\nWeather Data: Hourly temperature records from Metostat.\nRide Data: Aggregated hourly ride counts by user type from the main rides table.\nData were pre-joined on hourly timestamp and grouped into 2 °C bins.\n\n\n\nGnuplot Code Used to Generate Chart:\nset title  \"Hourly rides vs. temperature\"\nset xlabel \"Temperature (°C)\"\nset ylabel \"Average rides per hour\"\nset grid\nplot \\\n    \"temp_vs_rides.tsv\" using 1:2 with lines lw 2 title \"Total\", \\\n    \"\"                   using 1:3 with lines lw 2 dt 2  title \"Subscribers\", \\\n    \"\"                   using 1:4 with lines lw 2 dt 3  title \"Customers\""
  },
  {
    "objectID": "viz/bike_ride_bucket_histogram.html",
    "href": "viz/bike_ride_bucket_histogram.html",
    "title": "Bike share case-study",
    "section": "",
    "text": "Distribution of Ride Counts per Bike\n\n  \n\nDistribution of total ride counts per bike across the fleet, highlighting underused outliers and high-mileage bikes.\n\n\n\nOverview\nThis histogram visualizes the distribution of total ride counts per bike, grouped into buckets of 100 rides each. It provides insight into how evenly or unevenly individual bikes are used over the dataset’s timespan.\n\n\nAxes\n\nX-Axis (Ride Count Range):\n\nLabeled in bins of 100 rides (e.g., 0-99, 100-199, …, 5500-5599).\nRepresents the total number of rides associated with each bike.\n\nY-Axis (Number of Bikes):\n\nIndicates how many bikes fall within each ride count range.\nPeaks near 300 bikes in the most frequently occurring bins.\n\n\n\n\nVisual Elements\n\nBars:\n\nColored purple with black borders.\nUniform width, covering each 100-ride range.\nDistribution forms a roughly symmetric bell-shaped curve centered around the 2700–3499 range.\n\n\n\n\nObservations\n\nLow-end Outliers:\n\nA noticeable spike in the 0–99 bin (~130 bikes), suggesting a set of bikes with extremely limited or no use.\nMay include stolen, damaged, or new bikes added near the end of the data collection period.\n\nCore Distribution:\n\nThe majority of bikes (~200–280 per bin) fall between 2200–3999 rides.\nIndicates typical usage patterns and operational consistency.\n\nHigh-end Tail:\n\nUsage drops off steadily after ~4000 rides per bike.\nVery few bikes exceed 5000 rides.\n\n\n\n\nInterpretation\n\nThe chart implies a relatively well-utilized fleet with a normal distribution centered around ~3000 rides per bike.\nThe left-side spike at 0–99 highlights potential outliers worth investigating:\n\nUnderused bikes,\nPossible malfunctions,\nSeasonal deployments,\nRecent fleet additions.\n\nThe right tail shows some high-mileage bikes that may be candidates for maintenance or replacement soon.\n\n\n\nUse Case\nThis visualization is valuable for:\n\nFleet maintenance planning (identify overused/underused bikes),\nLifecycle analysis (detect uneven distribution of wear),\nDeployment strategy (optimize rotation or redistribution).\n\n\n\nData Sources\nrides table in SQLite, queried for bike usage counts grouped by bike_id.\n\nSQL Query to Produce Aggregated Data\n.headers on\n.mode csv\n.output bike_ride_buckets.csv\nWITH bucketed AS (\n  SELECT\n    (ride_count / 100) * 100 AS bucket_start,\n    COUNT(*) AS bike_count\n  FROM (\n    SELECT bike_id, COUNT(*) AS ride_count\n    FROM rides\n    WHERE bike_id IS NOT NULL\n    GROUP BY bike_id\n  )\n  GROUP BY bucket_start\n  ORDER BY bucket_start\n)\nSELECT\n  bucket_start,\n  bucket_start + 99 AS bucket_end,\n  bike_count\nFROM bucketed;\n.output stdout\n\n\nGnuplot Script Used to Generate Chart:\nset datafile separator \",\"\nset terminal pngcairo size 1000,600 enhanced font 'Verdana,10'\nset output 'bike_ride_bucket_histogram.png'\n\nset title \"Distribution of Ride Counts per Bike\"\nset xlabel \"Ride Count Range\"\nset ylabel \"Number of Bikes\"\nset style fill solid 1.0 border -1\nset boxwidth 0.9\nset grid ytics\nunset key\nset xtics rotate by -45\n\n# Format x-tics with the bucket label, like \"0–99\"\nplot 'bike_ride_buckets.csv' using ($0):3:xtic(strcol(1).\"-\".strcol(2)) with boxes"
  }
]